<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hi There</title>
  
  <subtitle>If people do not believe that mathematics is simple, it is only because they do not realize how complicated life is. – John von Neumann.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-18T05:28:21.598Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>isFibonacci</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Facebook&amp;Google 面试题</title>
    <link href="http://yoursite.com/2020/03/15/Facebook%20%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://yoursite.com/2020/03/15/Facebook%20%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2020-03-15T22:55:00.000Z</published>
    <updated>2020-03-18T05:28:21.598Z</updated>
    
    <content type="html"><![CDATA[<h2 id="278-First-Bad-Version"><a href="#278-First-Bad-Version" class="headerlink" title="278. First Bad Version"></a><a href="https://www.acwing.com/solution/LeetCode/content/331/" target="_blank" rel="noopener">278. First Bad Version</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Forward declaration of isBadVersion API.</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBadVersion</span><span class="params">(<span class="keyword">int</span> version)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">firstBadVersion</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">1</span>, mid = <span class="number">1</span>, r = n;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            mid = (l + <span class="number">0l</span>l + r) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (isBadVersion(mid)) r = mid;</span><br><span class="line">            <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="238-Product-of-Array-Except-Self"><a href="#238-Product-of-Array-Except-Self" class="headerlink" title="238. Product of Array Except Self"></a><a href="https://www.acwing.com/solution/LeetCode/content/288/" target="_blank" rel="noopener">238. Product of Array Except Self</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">productExceptSelf</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">output</span><span class="params">(n, <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="comment">// 0*1*2* i-1...</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            output[i] = output[i<span class="number">-1</span>] * nums[i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">end</span> = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// n-1 .. i + 1 </span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            output[i] *= <span class="built_in">end</span>;</span><br><span class="line">            <span class="built_in">end</span> *= nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> output;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">output[i] = 0 * 1 * ... i -1 * i + 1 * (i+2) ...* n -1</span></span><br><span class="line"><span class="comment">[2,3,1,4]</span></span><br><span class="line"><span class="comment">i : 3</span></span><br><span class="line"><span class="comment">output[0] = 1 * 12 = 12,                        end = 24</span></span><br><span class="line"><span class="comment">output[1] = output[0] * nums[0] = 2, 2 * 4 = 8,  end = 12</span></span><br><span class="line"><span class="comment">output[2] = output[1] * nums[1] = 6, 6 * 4 = 24, end = 4</span></span><br><span class="line"><span class="comment">output[3] = output[2] * nums[2] = 6, 6 * 1 = 6, end = 4</span></span><br><span class="line"><span class="comment">output[4] = output[3] * nums[3] = 24, 6 * 1 = 1, end = 4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="133-Clone-Graph"><a href="#133-Clone-Graph" class="headerlink" title="133. Clone Graph"></a><a href="https://www.acwing.com/activity/content/problem/content/191/1/" target="_blank" rel="noopener">133. Clone Graph</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;Node*, Node*&gt; hash;</span><br><span class="line">    </span><br><span class="line">    <span class="function">Node* <span class="title">cloneGraph</span><span class="params">(Node* node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!node) <span class="keyword">return</span> node;</span><br><span class="line">        <span class="keyword">auto</span> p = <span class="keyword">new</span> Node(node-&gt;val);</span><br><span class="line">        hash[node] = p;</span><br><span class="line">        dfs(node);</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(Node* node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> ver : node-&gt;neighbors) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!hash.count(ver)) &#123;</span><br><span class="line">                hash[ver] = <span class="keyword">new</span> Node(ver-&gt;val);</span><br><span class="line">                dfs(ver);</span><br><span class="line">            &#125;</span><br><span class="line">            hash[node]-&gt;neighbors.push_back(hash[ver]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. copy each point into hash map</span></span><br><span class="line"><span class="comment">2. traverse each vertics, between each point, build new vertics</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="883-Projection-Area-of-3D-Shapes"><a href="#883-Projection-Area-of-3D-Shapes" class="headerlink" title="883. Projection Area of 3D Shapes"></a><a href="https://leetcode.com/problems/projection-area-of-3d-shapes/" target="_blank" rel="noopener">883. Projection Area of 3D Shapes</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">projectionArea</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (grid.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>, n = grid.<span class="built_in">size</span>(), m = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">                ans += !!grid[i][j];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> h = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                h = <span class="built_in">max</span>(h, grid[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            ans += h;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> h = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                h = <span class="built_in">max</span>(h, grid[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            ans += h;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="230-Kth-Smallest-Element-in-a-BST"><a href="#230-Kth-Smallest-Element-in-a-BST" class="headerlink" title="230. Kth Smallest Element in a BST"></a><a href="https://leetcode.com/problems/kth-smallest-element-in-a-bst/" target="_blank" rel="noopener">230. Kth Smallest Element in a BST</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">left = the number of child in left tree</span><br><span class="line"><span class="keyword">if</span> k &lt;= left: <span class="keyword">return</span> dfs(root-&gt;left, k)</span><br><span class="line"><span class="keyword">if</span> k == left + <span class="number">1</span>: <span class="keyword">return</span> root-&gt;val</span><br><span class="line"><span class="keyword">if</span> k &gt;= left + <span class="number">1</span>: <span class="keyword">return</span> dfs(root-&gt;right, k - left<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">class Solution &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> kthSmallest(TreeNode* root, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        <span class="keyword">return</span> dfs(root, k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(TreeNode* root, <span class="keyword">int</span> &amp;k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> left = dfs(root-&gt;left, k); <span class="comment">// O(n^2), only left subtree</span></span><br><span class="line">        <span class="keyword">if</span> (k &lt;= <span class="number">0</span>) <span class="keyword">return</span> left;</span><br><span class="line">        <span class="keyword">if</span> (--k == <span class="number">0</span>) <span class="keyword">return</span> root-&gt;val;</span><br><span class="line">        <span class="keyword">return</span> dfs(root-&gt;right, k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">k = 3</span></span><br><span class="line"><span class="comment">3-&gt;2-&gt;1-&gt;0, k = 2</span></span><br><span class="line"><span class="comment">k = 1, -&gt;4 k = 0, -&gt;3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="228-Summary-Ranges"><a href="#228-Summary-Ranges" class="headerlink" title="228. Summary Ranges"></a><a href="https://www.acwing.com/solution/LeetCode/content/324/" target="_blank" rel="noopener">228. Summary Ranges</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">rangeToString</span><span class="params">(<span class="keyword">int</span> st, <span class="keyword">int</span> ed)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (st == ed) <span class="keyword">return</span> to_string(st);</span><br><span class="line">        <span class="keyword">return</span> to_string(st) + <span class="string">"-&gt;"</span> + to_string(ed);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">summaryRanges</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; ans;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (nums.empty()) <span class="keyword">return</span> ans;</span><br><span class="line">        <span class="keyword">int</span> st = nums[<span class="number">0</span>], ed = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">// st = ed = 0</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = nums[i]; <span class="comment">// x = 1</span></span><br><span class="line">            <span class="keyword">if</span> (x &gt; ed + <span class="number">1</span>) &#123; <span class="comment">// disconnect</span></span><br><span class="line">                ans.push_back(rangeToString(st, ed));</span><br><span class="line">                st = ed = x; <span class="comment">// 4</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ed ++; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans.push_back(rangeToString(st, ed));</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="57-Insert-Interval"><a href="#57-Insert-Interval" class="headerlink" title="57. Insert Interval"></a><a href="https://www.acwing.com/solution/LeetCode/content/132/" target="_blank" rel="noopener">57. Insert Interval</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">insert</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; intervals, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; newInterval)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">bool</span> hasIn = <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> interval : intervals) &#123;</span><br><span class="line">            <span class="keyword">if</span> (interval[<span class="number">0</span>] &gt; newInterval[<span class="number">1</span>]) &#123; <span class="comment">// [3, 5] [0, 1]</span></span><br><span class="line">                <span class="keyword">if</span> (!hasIn) &#123;</span><br><span class="line">                    ans.push_back(newInterval); <span class="comment">// [0, 1]</span></span><br><span class="line">                    hasIn = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                ans.push_back(interval);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (interval[<span class="number">1</span>] &lt; newInterval[<span class="number">0</span>]) &#123; <span class="comment">// [2, 4] [7, 8]</span></span><br><span class="line">                ans.push_back(interval);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// [3, 5] [4, 8]</span></span><br><span class="line">                newInterval[<span class="number">0</span>] = <span class="built_in">min</span>(newInterval[<span class="number">0</span>], interval[<span class="number">0</span>]);</span><br><span class="line">                newInterval[<span class="number">1</span>] = <span class="built_in">max</span>(newInterval[<span class="number">1</span>], interval[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="comment">// [3, 5] [4, 8]</span></span><br><span class="line">        <span class="keyword">if</span> (!hasIn) ans.push_back(newInterval);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;278-First-Bad-Version&quot;&gt;&lt;a href=&quot;#278-First-Bad-Version&quot; class=&quot;headerlink&quot; title=&quot;278. First Bad Version&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.a
      
    
    </summary>
    
    
      <category term="yxcNb" scheme="http://yoursite.com/categories/yxcNb/"/>
    
    
      <category term="-Data Structure" scheme="http://yoursite.com/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title>模拟专题（0）</title>
    <link href="http://yoursite.com/2020/03/13/%E6%A8%A1%E6%8B%9F%E4%B8%93%E9%A2%98%20(0)/"/>
    <id>http://yoursite.com/2020/03/13/%E6%A8%A1%E6%8B%9F%E4%B8%93%E9%A2%98%20(0)/</id>
    <published>2020-03-13T22:55:00.000Z</published>
    <updated>2020-03-15T21:50:52.304Z</updated>
    
    <content type="html"><![CDATA[<h2 id="263-Ugly-Number"><a href="#263-Ugly-Number" class="headerlink" title="263. Ugly Number"></a><a href="https://www.acwing.com/solution/LeetCode/content/4743/" target="_blank" rel="noopener">263. Ugly Number</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isUgly</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> d[] = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> prime : d) &#123;</span><br><span class="line">        <span class="keyword">while</span> (num &gt; <span class="number">0</span> &amp;&amp; num % prime == <span class="number">0</span>) &#123;</span><br><span class="line">            num /= prime;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num == <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="67-Add-Binary"><a href="#67-Add-Binary" class="headerlink" title="67. Add Binary"></a><a href="https://www.acwing.com/solution/LeetCode/content/151/" target="_blank" rel="noopener">67. Add Binary</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">addBinary</span><span class="params">(<span class="built_in">string</span> a, <span class="built_in">string</span> b)</span> </span>&#123;</span><br><span class="line">reverse(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line">reverse(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">int</span> t = <span class="number">0</span>; <span class="comment">// 进位</span></span><br><span class="line"><span class="built_in">string</span> ans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>() || i &lt; b.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> va = i &gt;= a.<span class="built_in">size</span>() ? <span class="number">0</span> : a[i] - <span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">int</span> vb = i &gt;= b.<span class="built_in">size</span>() ? <span class="number">0</span> : b[i] - <span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">int</span> s = va + vb + t; <span class="comment">// 1 + 1 + 1</span></span><br><span class="line">    t = s / <span class="number">2</span>, s %= <span class="number">2</span>; <span class="comment">// 3 / 2 = 1, </span></span><br><span class="line">    ans += to_string(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (t) ans += <span class="string">'1'</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">string</span>(ans.rbegin(), ans.rend()); <span class="comment">// string reverse</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">a : 1011 b : 100 -&gt; 1111          | a : 11, b : 1</span></span><br><span class="line"><span class="comment">1101     001 -&gt; 1111          |     11      1 -&gt; 100</span></span><br><span class="line"><span class="comment">s   : 1 1   1   1                   2   2(1+t)</span></span><br><span class="line"><span class="comment">t   : 0 0   0   0 (3/2 = 1)         1   1</span></span><br><span class="line"><span class="comment">res : 1 1   1   1                   0   0 -&gt; if(t) 001 -&gt; 100</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="504-Base-7"><a href="#504-Base-7" class="headerlink" title="504. Base 7"></a><a href="https://www.acwing.com/solution/LeetCode/content/404/" target="_blank" rel="noopener">504. Base 7</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">convertToBase7</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> ans;</span><br><span class="line">    <span class="keyword">bool</span> isNegative = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (num &lt; <span class="number">0</span>) num *= <span class="number">-1</span>, isNegative = <span class="literal">true</span>; <span class="comment">// convert negative to positive</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!num) ans = <span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">while</span> (num) &#123;</span><br><span class="line">        ans += to_string(num % <span class="number">7</span>);</span><br><span class="line">        num /= <span class="number">7</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isNegative) ans += <span class="string">'-'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">string</span>(ans.rbegin(), ans.rend());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">123 </span></span><br><span class="line"><span class="comment">123 % 10 -&gt; 3</span></span><br><span class="line"><span class="comment">12  % 10 -&gt; 2</span></span><br><span class="line"><span class="comment">1   % 10 -&gt; 1</span></span><br><span class="line"><span class="comment">reverse(321) -&gt; 123 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="54-Spiral-Matrix"><a href="#54-Spiral-Matrix" class="headerlink" title="54. Spiral Matrix"></a><a href="https://www.acwing.com/solution/LeetCode/content/144/" target="_blank" rel="noopener">54. Spiral Matrix</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">spiralOrder</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">    <span class="keyword">if</span> (matrix.empty()) <span class="keyword">return</span> ans;</span><br><span class="line">    <span class="keyword">int</span> n = matrix.<span class="built_in">size</span>(), m = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">    <span class="comment">// recored used or not</span></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;&gt; <span class="title">st</span><span class="params">(n, <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;(m, <span class="literal">false</span>))</span></span>;</span><br><span class="line">    <span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;, dy[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>, d = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n*m; k++) &#123;</span><br><span class="line">        ans.push_back(matrix[x][y]);</span><br><span class="line">        st[x][y] = <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> newX = x + dx[d], newY = y + dy[d];</span><br><span class="line">        <span class="keyword">if</span> (newX &lt; <span class="number">0</span> || newX &gt;=n || newY &lt; <span class="number">0</span> || newY &gt;= m || st[newX][newY]) &#123;</span><br><span class="line">            d = (d+<span class="number">1</span>) % <span class="number">4</span>; <span class="comment">// turn around</span></span><br><span class="line">            newX = x + dx[d], newY = y + dy[d];</span><br><span class="line">        &#125;</span><br><span class="line">        x = newX, y = newY;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">d   :   1   2   3   0  </span></span><br><span class="line"><span class="comment">dx  :   0   1   0   -1</span></span><br><span class="line"><span class="comment">dy  :   1   0   -1  0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="299-Bulls-and-Cows"><a href="#299-Bulls-and-Cows" class="headerlink" title="299. Bulls and Cows"></a><a href="https://www.acwing.com/solution/LeetCode/content/334/" target="_blank" rel="noopener">299. Bulls and Cows</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">getHint</span><span class="params">(<span class="built_in">string</span> secret, <span class="built_in">string</span> guess)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>, n = guess.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">int</span> da[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;, db[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="comment">// record a, b = min same subsequence len - the same num in the same location</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = secret[i] - <span class="string">'0'</span>, y = guess[i] - <span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">if</span> (x == y) a++; <span class="comment">// same num in same location</span></span><br><span class="line">        da[x]++, db[y]++; <span class="comment">// record each num frequency</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// calculate b</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) b += <span class="built_in">min</span>(da[i], db[i]);</span><br><span class="line">    </span><br><span class="line">    b -= a;  <span class="comment">// same num in diff location, if not equal, will be 0</span></span><br><span class="line">    <span class="keyword">return</span> to_string(a) + <span class="string">'A'</span> + to_string(b) + <span class="string">'B'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1123   0145     da[1:2]     db[0:1, ]   a = 1 b = 1 - 1 = 0</span></span><br><span class="line"><span class="comment">1, 0  :            </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="481-Magical-String"><a href="#481-Magical-String" class="headerlink" title="481. Magical String"></a><a href="https://www.acwing.com/solution/LeetCode/content/387/" target="_blank" rel="noopener">481. Magical String</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">magicalString</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s = <span class="string">"122"</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>, k = <span class="number">1</span>; i &lt; n; i++, k = <span class="number">3</span> -k) &#123; <span class="comment">// k is 1 or 2</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; s[i] - <span class="string">'0'</span>; j++) s += to_string(k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) ans += s[i] == <span class="string">'1'</span>;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">i = 6</span></span><br><span class="line"><span class="comment">s[2] = 2,   s = 12211</span></span><br><span class="line"><span class="comment">s[3] = 1    s = 122112</span></span><br><span class="line"><span class="comment">s[4] = 1    s = 1221122</span></span><br><span class="line"><span class="comment">s[5] = 2    s = 122112211</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="71-Simplify-Path"><a href="#71-Simplify-Path" class="headerlink" title="71. Simplify Path"></a><a href="https://www.acwing.com/solution/LeetCode/content/156/" target="_blank" rel="noopener">71. Simplify Path</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">simplifyPath</span><span class="params">(<span class="built_in">string</span> path)</span> </span>&#123;</span><br><span class="line">        path += <span class="string">'/'</span>; <span class="comment">// if not: /a/.." -&gt; "/a" </span></span><br><span class="line">        <span class="built_in">string</span> ans, temp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> c : path) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ans.empty()) ans += c; <span class="comment">// '/'</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (c != <span class="string">'/'</span>) temp += c;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// c == '/'</span></span><br><span class="line">                <span class="keyword">if</span> (temp == <span class="string">".."</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (ans.<span class="built_in">size</span>() &gt; <span class="number">1</span>) &#123; <span class="comment">// if == 1 -&gt; '/'</span></span><br><span class="line">                        <span class="comment">// return to up level, clean the ans</span></span><br><span class="line">                        ans.pop_back(); <span class="comment">// /a/../ -&gt; /</span></span><br><span class="line">                        <span class="keyword">while</span> (ans.back() != <span class="string">'/'</span>) ans.pop_back();   </span><br><span class="line">                    &#125; <span class="comment">// if temp == "" will not add into new path, "/home//foo/"</span></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (temp != <span class="string">""</span> &amp;&amp; temp != <span class="string">"."</span>) ans += temp + <span class="string">'/'</span>; <span class="comment">// new path</span></span><br><span class="line">                temp = <span class="string">""</span>; <span class="comment">// clean temp</span></span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ans.<span class="built_in">size</span>() &gt; <span class="number">1</span>) ans.pop_back();</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">c       :   /a/.. </span></span><br><span class="line"><span class="comment">ans     :   /a/ -&gt; pop_back, /a, so if have /, -&gt; /</span></span><br><span class="line"><span class="comment">temp    :   ..</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="12-Integer-to-Roman"><a href="#12-Integer-to-Roman" class="headerlink" title="12. Integer to Roman"></a><a href="https://www.acwing.com/solution/LeetCode/content/101/" target="_blank" rel="noopener">12. Integer to Roman</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">intToRoman</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> value[] = &#123;<span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="built_in">string</span> reps[] = &#123;<span class="string">"M"</span>, <span class="string">"CM"</span>, <span class="string">"D"</span>, <span class="string">"CD"</span>, <span class="string">"C"</span>, <span class="string">"XC"</span>, <span class="string">"L"</span>, <span class="string">"XL"</span>, <span class="string">"X"</span>, <span class="string">"IX"</span>, <span class="string">"V"</span>, <span class="string">"IV"</span>, <span class="string">"I"</span>&#125;;</span><br><span class="line">        <span class="built_in">string</span> ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">13</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (num &gt;= value[i]) &#123;</span><br><span class="line">                num -= value[i];</span><br><span class="line">                ans += reps[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">287</span></span><br><span class="line"><span class="comment">CC, 87</span></span><br><span class="line"><span class="comment">CCLXXX 7</span></span><br><span class="line"><span class="comment">CCLXXXVII</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="68-Text-Justification"><a href="#68-Text-Justification" class="headerlink" title="68. Text Justification"></a><a href="https://www.acwing.com/solution/LeetCode/content/152/" target="_blank" rel="noopener">68. Text Justification</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">spaces</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> res;</span><br><span class="line">        <span class="keyword">while</span> (x--) res += <span class="string">' '</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">fullJustify</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; words, <span class="keyword">int</span> maxWidth)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; words.<span class="built_in">size</span>();) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = i + <span class="number">1</span>, s = words[i].<span class="built_in">size</span>(), rs = words[i].<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">while</span> (j &lt; words.<span class="built_in">size</span>() &amp;&amp; s + <span class="number">1</span> + words[j].<span class="built_in">size</span>() &lt;= maxWidth) &#123;</span><br><span class="line">                s += words[j].<span class="built_in">size</span>() + <span class="number">1</span>;</span><br><span class="line">                rs += words[j].<span class="built_in">size</span>();</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            rs = maxWidth - rs;</span><br><span class="line">            <span class="built_in">string</span> <span class="built_in">line</span> = words[i];</span><br><span class="line">            <span class="keyword">if</span> (j == words.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = i + <span class="number">1</span>; k &lt; j; k++) <span class="built_in">line</span> += <span class="string">' '</span> + words[k];</span><br><span class="line">                <span class="built_in">line</span> += spaces(maxWidth - <span class="built_in">line</span>.<span class="built_in">size</span>());</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j - i == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="built_in">line</span> += spaces(maxWidth - <span class="built_in">line</span>.<span class="built_in">size</span>());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> base = rs / (j - i <span class="number">-1</span>);</span><br><span class="line">                <span class="keyword">int</span> rem = rs % (j - i - <span class="number">1</span>);</span><br><span class="line">                i ++;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; i &lt; j; i++, k++) &#123;</span><br><span class="line">                    <span class="built_in">line</span> += spaces(base + (k &lt; rem)) + words[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            i = j;</span><br><span class="line">            ans.push_back(<span class="built_in">line</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;263-Ugly-Number&quot;&gt;&lt;a href=&quot;#263-Ugly-Number&quot; class=&quot;headerlink&quot; title=&quot;263. Ugly Number&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.acwing.com/solution
      
    
    </summary>
    
    
      <category term="yxcNb" scheme="http://yoursite.com/categories/yxcNb/"/>
    
    
      <category term="-Data Structure" scheme="http://yoursite.com/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title>Math（0）</title>
    <link href="http://yoursite.com/2020/03/11/Math%EF%BC%880)/"/>
    <id>http://yoursite.com/2020/03/11/Math%EF%BC%880)/</id>
    <published>2020-03-11T22:55:00.000Z</published>
    <updated>2020-03-14T22:01:43.100Z</updated>
    
    <content type="html"><![CDATA[<h2 id="268-Missing-Number"><a href="#268-Missing-Number" class="headerlink" title="268. Missing Number"></a><a href="https://www.acwing.com/solution/LeetCode/content/299/" target="_blank" rel="noopener">268. Missing Number</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">missingNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> num : nums) sum += num;</span><br><span class="line">    <span class="keyword">return</span> nums.<span class="built_in">size</span>() * (nums.<span class="built_in">size</span>()+ <span class="number">1</span>) / <span class="number">2</span> - sum; <span class="comment">// (0+1+3)*3/2 = 6, 6 -4 = 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="62-Unique-Paths"><a href="#62-Unique-Paths" class="headerlink" title="62. Unique Paths"></a><a href="https://www.acwing.com/solution/LeetCode/content/54/" target="_blank" rel="noopener">62. Unique Paths</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">0</span>,<span class="number">0</span>) -&gt; (m<span class="number">-1</span>, n<span class="number">-1</span>), each time choose <span class="built_in">move</span> x, <span class="keyword">or</span> y,</span><br><span class="line">so no matter what, we need m+n<span class="number">-2</span> steps</span><br><span class="line">first choose m<span class="number">-1</span>, then n <span class="number">-1</span></span><br><span class="line">total times: c(n+m<span class="number">-2</span>, n<span class="number">-1</span>)</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">dp</span><span class="params">(m, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n, <span class="number">0</span>))</span></span>;</span><br><span class="line">      dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">              <span class="keyword">if</span> (i || j) &#123;</span><br><span class="line">                  <span class="keyword">if</span> (i) dp[i][j] += dp[i<span class="number">-1</span>][j];</span><br><span class="line">                  <span class="keyword">if</span> (j) dp[i][j] += dp[i][j<span class="number">-1</span>];</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> dp[m<span class="number">-1</span>][n<span class="number">-1</span>];</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="462-Minimum-Moves-to-Equal-Array-Elements-II"><a href="#462-Minimum-Moves-to-Equal-Array-Elements-II" class="headerlink" title="462. Minimum Moves to Equal Array Elements II"></a><a href="https://www.acwing.com/solution/LeetCode/content/378/" target="_blank" rel="noopener">462. Minimum Moves to Equal Array Elements II</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// x0, x1, ... x(n-1)</span></span><br><span class="line"><span class="comment">// [x0, x(n-1)], [x1, x(n-2)], [x2, x(n-3)]</span></span><br><span class="line"><span class="comment">// if odd, choose the mid one, if even, each point between them is equal, so no matter</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minMoves2</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">    <span class="comment">// find the mid, the left of mid is smaller, the right is greater</span></span><br><span class="line">    <span class="comment">// only rearrange, not sort</span></span><br><span class="line">    nth_element(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">begin</span>()+n /<span class="number">2</span>, nums.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">int</span> mid = nums[n/<span class="number">2</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> num : nums) sum += <span class="built_in">abs</span>(num - mid); <span class="comment">// the distance of each point to the mid</span></span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="458-Poor-Pigs"><a href="#458-Poor-Pigs" class="headerlink" title="458. Poor Pigs"></a><a href="https://www.acwing.com/solution/LeetCode/content/131/" target="_blank" rel="noopener">458. Poor Pigs</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">poorPigs</span><span class="params">(<span class="keyword">int</span> buckets, <span class="keyword">int</span> minutesToDie, <span class="keyword">int</span> minutesToTest)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> b = minutesToTest/minutesToDie + <span class="number">1</span>; <span class="comment">// +1 to display not die</span></span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>, n = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (n &lt; buckets) k++, n *= b;</span><br><span class="line">    <span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="319-Bulb-Switcher"><a href="#319-Bulb-Switcher" class="headerlink" title="319. Bulb Switcher"></a><a href="https://www.acwing.com/solution/LeetCode/content/346/" target="_blank" rel="noopener">319. Bulb Switcher</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bulbSwitch</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(n);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="343-Integer-Break"><a href="#343-Integer-Break" class="headerlink" title="343. Integer Break"></a><a href="https://www.acwing.com/solution/LeetCode/content/368/" target="_blank" rel="noopener">343. Integer Break</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">integerBreak</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">3</span>) <span class="keyword">return</span> <span class="number">1</span> * (n<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (n % <span class="number">3</span> == <span class="number">1</span>) ans = <span class="number">4</span>, n -= <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (n % <span class="number">3</span> == <span class="number">2</span>) ans = <span class="number">2</span>, n-= <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (n) ans *= <span class="number">3</span>, n -= <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="650-2-Keys-Keyboard"><a href="#650-2-Keys-Keyboard" class="headerlink" title="650. 2 Keys Keyboard"></a><a href="https://www.acwing.com/solution/LeetCode/content/502/" target="_blank" rel="noopener">650. 2 Keys Keyboard</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    // currently we have x A's</span></span><br><span class="line"><span class="comment">//    p = ij, i &gt;= 1, j &gt;= 1</span></span><br><span class="line"><span class="comment">//    x-&gt;ix-&gt;ijx, via i+j times operation</span></span><br><span class="line"><span class="comment">//    ij, i + j</span></span><br><span class="line"><span class="comment">//    (i-1)(j-1) &gt;= 1, ij - i - j &gt;= 0</span></span><br><span class="line"><span class="comment">//    ij &gt;= i + j</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minSteps</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; n &gt; <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">            ans += i;</span><br><span class="line">            n /= i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// n = 4</span></span><br><span class="line"><span class="comment">//        i   2       </span></span><br><span class="line"><span class="comment">//        ans 2   4</span></span><br><span class="line"><span class="comment">//        n   2   1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="829-Consecutive-Numbers-Sum"><a href="#829-Consecutive-Numbers-Sum" class="headerlink" title="829. Consecutive Numbers Sum"></a><a href="https://www.acwing.com/solution/LeetCode/content/621/" target="_blank" rel="noopener">829. Consecutive Numbers Sum</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">n = a + (a+1) + (a+2) + ...(a+b-1)</span></span><br><span class="line"><span class="comment">(a+a+b-1)*b / 2 = n -&gt; a = (2n/b-(b-1)) / 2</span></span><br><span class="line"><span class="comment">if meet :</span></span><br><span class="line"><span class="comment">1.所有除法都可以整除</span></span><br><span class="line"><span class="comment">2. a &gt; 0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1. b is 2 的 约数， 2 ｜ (2n / b - (b-1))</span></span><br><span class="line"><span class="comment">2. 2n &gt; b(b-1)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">consecutiveNumbersSum</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">1</span>; b * (b<span class="number">-1</span>) &lt; <span class="number">2</span> * N; b++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">2</span> * N % b == <span class="number">0</span> &amp;&amp; (<span class="number">2</span> * N / b - (b<span class="number">-1</span>)) % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">            ans ++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="891-Sum-of-Subsequence-Widths"><a href="#891-Sum-of-Subsequence-Widths" class="headerlink" title="891. Sum of Subsequence Widths"></a><a href="https://www.acwing.com/solution/LeetCode/content/576/" target="_blank" rel="noopener">891. Sum of Subsequence Widths</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sumSubseqWidths</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A)</span> </span>&#123;</span><br><span class="line">    sort(A.<span class="built_in">begin</span>(), A.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>, p = <span class="number">1</span>, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> num : A) &#123;</span><br><span class="line">        ans = (ans + num * (p<span class="number">-1</span>) - sum) % mod;</span><br><span class="line">        sum = (sum * <span class="number">2</span> + num) % mod;</span><br><span class="line">        p = p*<span class="number">2</span>%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (ans+mod) % mod;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;268-Missing-Number&quot;&gt;&lt;a href=&quot;#268-Missing-Number&quot; class=&quot;headerlink&quot; title=&quot;268. Missing Number&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.acwing.com
      
    
    </summary>
    
    
      <category term="yxcNb" scheme="http://yoursite.com/categories/yxcNb/"/>
    
    
      <category term="-Data Structure" scheme="http://yoursite.com/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title>DFS （1）</title>
    <link href="http://yoursite.com/2020/03/03/DFS%20%EF%BC%881%EF%BC%89/"/>
    <id>http://yoursite.com/2020/03/03/DFS%20%EF%BC%881%EF%BC%89/</id>
    <published>2020-03-03T23:55:00.000Z</published>
    <updated>2020-03-06T19:04:45.135Z</updated>
    
    <content type="html"><![CDATA[<h2 id="90-Subsets-II"><a href="#90-Subsets-II" class="headerlink" title="90. Subsets II"></a><a href="https://leetcode.com/problems/subsets-ii/" target="_blank" rel="noopener">90. Subsets II</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1, 2, 2, 2, 3, 3</span><br><span class="line"></span><br><span class="line">1: 0, 1</span><br><span class="line">2: 0, 1, 2, 3</span><br><span class="line">3: 0, 1, 2</span><br><span class="line">result:</span><br><span class="line">&#123; [], [1], [2], [3], [1,2], [1,3]...[1,2,2,2,3,3]&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; path;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">subsetsWithDup</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    sort(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">    dfs(nums, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; nums, <span class="keyword">int</span> level)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (level == nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        ans.push_back(path);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// count number of current num</span></span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (level+ k &lt; nums.<span class="built_in">size</span>() &amp;&amp; nums[level+k] == nums[level]) k++;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ???</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= k; i++) &#123;</span><br><span class="line">        dfs(nums, level+k); <span class="comment">// skip the duplicate num?</span></span><br><span class="line">        path.push_back(nums[level]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// recover</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= k; i++) path.pop_back();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="216-Combination-Sum-III"><a href="#216-Combination-Sum-III" class="headerlink" title="216. Combination Sum III"></a><a href="https://leetcode.com/problems/combination-sum-iii/" target="_blank" rel="noopener">216. Combination Sum III</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Input: k &#x3D; 3, n &#x3D; 7</span><br><span class="line">Output: [[1,2,4]]</span><br><span class="line">Input: k &#x3D; 3, n &#x3D; 9</span><br><span class="line">Output: [[1,2,6], [1,3,5], [2,3,4]]</span><br><span class="line">n &#x3D; 3 : </span><br><span class="line"></span><br><span class="line">[1, 1,1]</span><br><span class="line">[2,2,2,]</span><br><span class="line">...</span><br><span class="line">[9,9,9]</span><br><span class="line">dfs(枚举到的第几个数字，开始枚举的位置，当前选择的所有数的和)</span><br><span class="line"></span><br><span class="line">i~9 起码有k个数，9 - i + 1 &gt;&#x3D; k &#x3D;&gt; 10 - k &gt;&#x3D; i;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; path;</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">combinationSum3</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// enumerate ith number, start position of enumerate, cur sum;</span></span><br><span class="line">    dfs(k, <span class="number">1</span>, n); <span class="comment">// from end</span></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> start, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!k) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!n) ans.push_back(path);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// enumerate each positon</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">        path.push_back(i);</span><br><span class="line">        dfs(k<span class="number">-1</span>, i+<span class="number">1</span>, n-i);</span><br><span class="line">        path.pop_back();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="52-N-Queens-II"><a href="#52-N-Queens-II" class="headerlink" title="52. N-Queens II"></a><a href="https://leetcode.com/problems/n-queens-ii/" target="_blank" rel="noopener">52. N-Queens II</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.enumerate each row</span><br><span class="line">2. each col, diagonal can only have one queen</span><br><span class="line"> y &#x3D; x+b</span><br><span class="line"> x+y &#x3D;&gt; row+col[0+2] &#x3D; [1+1] &#x3D; [2+0]</span><br><span class="line"> x-y+n &#x3D;&gt; row+col-n &#x3D; [0-0+3] &#x3D; [1-1+3] &#x3D; [2-2+3]</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ans, n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; col, d, ud;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">totalNQueens</span><span class="params">(<span class="keyword">int</span> _n)</span> </span>&#123;</span><br><span class="line">    n = _n; <span class="comment">// golbal</span></span><br><span class="line">    col = <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;(n);</span><br><span class="line">    d = ud = <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;(n*<span class="number">2</span>);</span><br><span class="line">    dfs(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> level)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (level == n) &#123;</span><br><span class="line">        ans++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!col[i] &amp;&amp; !d[level+i] &amp;&amp; !ud[level-i+n]) &#123;</span><br><span class="line">            col[i] = d[level+i] = ud[level-i+n] = <span class="literal">true</span>;</span><br><span class="line">            dfs(level+<span class="number">1</span>);</span><br><span class="line">            col[i] = d[level+i] = ud[level-i+n] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="37-Sudoku-Solver"><a href="#37-Sudoku-Solver" class="headerlink" title="37. Sudoku Solver"></a><a href="https://leetcode.com/problems/sudoku-solver/" target="_blank" rel="noopener">37. Sudoku Solver</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">enumerate each num in </span><br><span class="line">row[9][9], col[9][9], cell[3][3][9]</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> row[<span class="number">9</span>][<span class="number">9</span>] = &#123;<span class="number">0</span>&#125;, col[<span class="number">9</span>][<span class="number">9</span>] = &#123;<span class="number">0</span>&#125;, cell[<span class="number">3</span>][<span class="number">3</span>][<span class="number">9</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">// [#row][num] = used/ no-use</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solveSudoku</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; board)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = board[i][j];</span><br><span class="line">            <span class="keyword">if</span> (c != <span class="string">'.'</span>) &#123; <span class="comment">// this num has been used</span></span><br><span class="line">                </span><br><span class="line">                <span class="keyword">int</span> temp = c -<span class="string">'1'</span>; <span class="comment">// num</span></span><br><span class="line">                <span class="comment">// the num in cur row, col and cell has been used, cannot repeat</span></span><br><span class="line">                row[i][temp] = col[j][temp] = cell[i/<span class="number">3</span>][j/<span class="number">3</span>][temp] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(board, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; board, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (y == <span class="number">9</span>) x++, y = <span class="number">0</span>; <span class="comment">// this row is done, next level, set y = 0</span></span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">9</span>) <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// x to 9 and still true, so this is a solution</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (board[x][y] != <span class="string">'.'</span>) <span class="keyword">return</span> dfs(board, x, y+<span class="number">1</span>); <span class="comment">// this is num, next enumerate</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// each num</span></span><br><span class="line">        <span class="keyword">if</span> (!row[x][i] &amp;&amp; !col[y][i] &amp;&amp; !cell[x/<span class="number">3</span>][y/<span class="number">3</span>][i]) &#123; <span class="comment">// not used</span></span><br><span class="line">            board[x][y] = <span class="string">'1'</span> + i;</span><br><span class="line">            row[x][i] = col[y][i] = cell[x/<span class="number">3</span>][y/<span class="number">3</span>][i] = <span class="literal">true</span>; <span class="comment">//used</span></span><br><span class="line">            <span class="keyword">if</span> (dfs(board, x, y+<span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// go next num</span></span><br><span class="line">            row[x][i] = col[y][i] = cell[x/<span class="number">3</span>][y/<span class="number">3</span>][i] = <span class="literal">false</span>;<span class="comment">// recover</span></span><br><span class="line">            board[x][y] = <span class="string">'.'</span>; <span class="comment">// this is '.' before get into dfs</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// if current status in dfs not meet the requirement</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="473-Matchsticks-to-Square"><a href="#473-Matchsticks-to-Square" class="headerlink" title="473. Matchsticks to Square"></a><a href="https://leetcode.com/problems/matchsticks-to-square/" target="_blank" rel="noopener">473. Matchsticks to Square</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">enumaerate each martchstick to square :</span><br><span class="line">prunning :</span><br><span class="line">1. from lagest to small : </span><br><span class="line">    2 cases, 3 cases, 6 cases, 8caese</span><br><span class="line">if start from the bigeest, totoal branches to cut :</span><br><span class="line">    below 2 cases, branches : 3 * 6 * 8 -&gt; so we can cut more</span><br><span class="line">    below 3 cases, branches : 2 * 6 * 8</span><br><span class="line"></span><br><span class="line">2. avoid repeat enumerate :</span><br><span class="line">    for each side, choose the largest to small</span><br><span class="line">3. if cur martchstick fail, skip all the same length</span><br><span class="line">4. if cur martchstick fail, &amp;&amp; it is the first one, </span><br><span class="line">   this whole stratege is fail also, cur this whole branch</span><br><span class="line">5. if cur martchstick fail, &amp;&amp; it is the last one,</span><br><span class="line">    this fail also, since we can swtich it to other places</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; st; <span class="comment">// this matchstick used or not</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">makesquare</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// check the sum % 4 == 0</span></span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> u : nums) sum += u;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!sum || sum % <span class="number">4</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    sort(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">    reverse(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>()); <span class="comment">// largest to smallest</span></span><br><span class="line">    </span><br><span class="line">    st = <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;(nums.<span class="built_in">size</span>());</span><br><span class="line">    <span class="keyword">return</span> dfs(nums, <span class="number">0</span>, <span class="number">0</span>, sum/<span class="number">4</span>); <span class="comment">// cur side, cur length, total need length</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> side, <span class="keyword">int</span> cur, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cur == length) side++, cur = <span class="number">0</span>; <span class="comment">// next side, recover cur = 0</span></span><br><span class="line">    <span class="keyword">if</span> (side == <span class="number">4</span>) <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// enumerate all sides</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="comment">// this stick not used &amp;&amp; &lt;=</span></span><br><span class="line">        <span class="keyword">if</span> (!st[i] &amp;&amp; cur + nums[i] &lt;= length) &#123;</span><br><span class="line">            st[i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (dfs(nums, side, cur+nums[i], length)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//fail, recover the status</span></span><br><span class="line">            st[i] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (!cur) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// if fail and cur stick is the first one, no need to go deep</span></span><br><span class="line">            <span class="keyword">if</span> (cur+nums[i] == length) <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">// if fail, and cur stick is the last one</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span> (i+<span class="number">1</span> &lt; nums.<span class="built_in">size</span>() &amp;&amp; nums[i+<span class="number">1</span>] == nums[i]) i++; <span class="comment">//if fail skip all the same length stick</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;90-Subsets-II&quot;&gt;&lt;a href=&quot;#90-Subsets-II&quot; class=&quot;headerlink&quot; title=&quot;90. Subsets II&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.com/problems/subsets
      
    
    </summary>
    
    
      <category term="yxcNb" scheme="http://yoursite.com/categories/yxcNb/"/>
    
    
      <category term="-Data Structure" scheme="http://yoursite.com/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title>DFS （0）</title>
    <link href="http://yoursite.com/2020/03/01/DFS%EF%BC%880)/"/>
    <id>http://yoursite.com/2020/03/01/DFS%EF%BC%880)/</id>
    <published>2020-03-01T23:55:00.000Z</published>
    <updated>2020-03-03T19:19:18.943Z</updated>
    
    <content type="html"><![CDATA[<h2 id="842-排列数字"><a href="#842-排列数字" class="headerlink" title="842. 排列数字"></a><a href="https://www.acwing.com/problem/content/844/" target="_blank" rel="noopener">842. 排列数字</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 2 3</span><br><span class="line">1 3 2</span><br><span class="line">2 1 3</span><br><span class="line">2 3 1</span><br><span class="line">3 1 2</span><br><span class="line">3 2 1</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// the end</span></span><br><span class="line">    <span class="keyword">if</span> (u == n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">printf</span>(<span class="string">"%d "</span>, path[i]);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// each number</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!st[i]) &#123; <span class="comment">// haven't used</span></span><br><span class="line">            path[u] = i;</span><br><span class="line">            st[i] = <span class="literal">true</span>; <span class="comment">// used</span></span><br><span class="line">            dfs(u+<span class="number">1</span>); <span class="comment">//each postion</span></span><br><span class="line">            st[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="843-n-皇后问题"><a href="#843-n-皇后问题" class="headerlink" title="843. n-皇后问题"></a><a href="https://www.acwing.com/problem/content/845/" target="_blank" rel="noopener">843. n-皇后问题</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// all state</span></span><br><span class="line">    <span class="keyword">if</span> (u == n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(g[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//each row</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="comment">// each col, diagonal, opposite diagonal haven't been used</span></span><br><span class="line">        <span class="keyword">if</span> (!col[i] &amp;&amp; !dg[u+i] &amp;&amp; !udg[n-u+i]) &#123; <span class="comment">// dg[1+1] = false</span></span><br><span class="line">            g[u][i] = <span class="string">'Q'</span>;</span><br><span class="line">            col[i] = dg[u+i] = udg[n-u+i] = <span class="literal">true</span>;</span><br><span class="line">            dfs(u+<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//recover</span></span><br><span class="line">            col[i] = dg[u+i] = udg[n-u+i] = <span class="literal">false</span>;</span><br><span class="line">            g[u][i] = <span class="string">'.'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="17-Letter-Combinations-of-a-Phone-Number"><a href="#17-Letter-Combinations-of-a-Phone-Number" class="headerlink" title="17. Letter Combinations of a Phone Number"></a><a href="https://leetcode.com/problems/letter-combinations-of-a-phone-number/" target="_blank" rel="noopener">17. Letter Combinations of a Phone Number</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">state0 &#x3D; &#123;&quot;&quot;&#125;</span><br><span class="line"></span><br><span class="line">for 2 :</span><br><span class="line">  for a, b, c :</span><br><span class="line">    for &quot;&quot; </span><br><span class="line">      &quot;a&quot;, &quot;b&quot;, &quot;c&quot;</span><br><span class="line"></span><br><span class="line">for 3 :</span><br><span class="line">  for d, e, f :</span><br><span class="line">    for &quot;a&quot;, &quot;b&quot;, &quot;c&quot; :</span><br><span class="line">      &quot;ad&quot;, &quot;bd&quot;, &quot;cd&quot;, &quot;ae&quot;,&quot;be&quot;, &quot;cf&quot;, &quot;af&quot;, &quot;bf&quot;, &quot;cf&quot;</span><br><span class="line"></span><br><span class="line">state2 &#x3D; &#123;&quot;ad&quot;, &quot;bd&quot;, &quot;cd&quot;, &quot;ae&quot;,&quot;be&quot;, &quot;cf&quot;, &quot;af&quot;, &quot;bf&quot;, &quot;cf&quot;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> chars[<span class="number">8</span>] = &#123;<span class="string">"abc"</span>, <span class="string">"def"</span>, <span class="string">"ghi"</span>, <span class="string">"jkl"</span>, <span class="string">"mno"</span>, <span class="string">"pqrs"</span>, <span class="string">"tuv"</span>, <span class="string">"wxyz"</span>&#125;;</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">letterCombinations</span><span class="params">(<span class="built_in">string</span> digits)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (digits.empty()) <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">state</span><span class="params">(<span class="number">1</span>, <span class="string">""</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> digit : digits) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; now;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> cha : chars[digit - <span class="string">'2'</span>]) &#123;</span><br><span class="line">            <span class="comment">// 2-9</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> s : state) &#123;</span><br><span class="line">                now.push_back(s+cha);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        state = now;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="79-Word-Search"><a href="#79-Word-Search" class="headerlink" title="79. Word Search"></a><a href="https://leetcode.com/problems/word-search/" target="_blank" rel="noopener">79. Word Search</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> row, col;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;, dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">exist</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; board, <span class="built_in">string</span> <span class="keyword">word</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (board.empty() || board[<span class="number">0</span>].empty()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    row = board.<span class="built_in">size</span>(), col = board[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dfs(board, i, j, <span class="keyword">word</span>, <span class="number">0</span>))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt; &amp; board, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="built_in">string</span> &amp;<span class="keyword">word</span>, <span class="keyword">int</span> curLen)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (board[x][y] != <span class="keyword">word</span>[curLen]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// if all match, </span></span><br><span class="line">    <span class="keyword">if</span> (curLen == <span class="keyword">word</span>.<span class="built_in">size</span>()<span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// used, if not match will return, so at this point, it is matched</span></span><br><span class="line">    board[x][y] = <span class="string">'.'</span>;</span><br><span class="line">    <span class="comment">// each direction</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> newX = x + dx[i], newY = y + dy[i];</span><br><span class="line">        <span class="keyword">if</span> (newX &gt;= <span class="number">0</span> &amp;&amp; newX &lt; row &amp;&amp; newY &gt;= <span class="number">0</span> &amp;&amp; newY &lt; col) &#123;</span><br><span class="line">            <span class="comment">// next word</span></span><br><span class="line">            <span class="keyword">if</span> (dfs(board, newX, newY, <span class="keyword">word</span>, curLen+<span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// backtracking, recover</span></span><br><span class="line">    board[x][y] = <span class="keyword">word</span>[curLen];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="46-Permutations"><a href="#46-Permutations" class="headerlink" title="46. Permutations"></a><a href="https://leetcode.com/problems/permutations/submissions/" target="_blank" rel="noopener">46. Permutations</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n; </span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; path; <span class="comment">// each permutation</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; st; <span class="comment">// record this number has been used or not</span></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">permute</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    n = nums.<span class="built_in">size</span>();</span><br><span class="line">    st = <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;(n);</span><br><span class="line">    dfs(nums, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> level)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (level == n) &#123;</span><br><span class="line">        ans.push_back(path);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// each number in different position</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!st[i]) &#123; <span class="comment">// haven't been used</span></span><br><span class="line">            st[i] = <span class="literal">true</span>;</span><br><span class="line">            path.push_back(nums[i]);</span><br><span class="line">            dfs(nums, level+<span class="number">1</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// recover</span></span><br><span class="line">            path.pop_back();</span><br><span class="line">            st[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="47-Permutations-II"><a href="#47-Permutations-II" class="headerlink" title="47. Permutations II"></a><a href="https://leetcode.com/problems/permutations-ii/" target="_blank" rel="noopener">47. Permutations II</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1. place all the same number, sort</span><br><span class="line">2. the 1th &#39;1&#39; -&gt; 5</span><br><span class="line">   the 2th &#39;1&#39; -&gt; 6</span><br><span class="line">   e.g : 1 1 only one permutation</span><br><span class="line"></span><br><span class="line">3. place each number on position</span><br><span class="line">   [1,_,_] ; [_,1,_] ; [_,_,1]</span><br><span class="line"></span><br><span class="line">   place each position on number</span><br><span class="line">   [1,_,_] ; [2,_,_] ; [3,_,_]</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; path;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; st;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">permuteUnique</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    n = nums.<span class="built_in">size</span>();</span><br><span class="line">    path = <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n);</span><br><span class="line">    st = <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;(n);</span><br><span class="line">    </span><br><span class="line">    sort(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">    </span><br><span class="line">    dfs(nums, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> level, <span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (level == n) &#123;</span><br><span class="line">        ans.push_back(path);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!st[i]) &#123;</span><br><span class="line">            st[i] = <span class="literal">true</span>;</span><br><span class="line">            path[i] = nums[level]; <span class="comment">// sorted</span></span><br><span class="line">            <span class="comment">// the next num is the same then put it in the next position</span></span><br><span class="line">            <span class="comment">//1th '1' -&gt; 5, 2th '1' -&gt; 6</span></span><br><span class="line">            <span class="comment">// else start from 0, since place each number on diff position</span></span><br><span class="line">            dfs(nums, level+<span class="number">1</span>, level+<span class="number">1</span> &lt; n &amp;&amp; nums[level+<span class="number">1</span>] == nums[level] ? i+<span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">            st[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;842-排列数字&quot;&gt;&lt;a href=&quot;#842-排列数字&quot; class=&quot;headerlink&quot; title=&quot;842. 排列数字&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.acwing.com/problem/content/844/&quot; target=
      
    
    </summary>
    
    
      <category term="yxcNb" scheme="http://yoursite.com/categories/yxcNb/"/>
    
    
      <category term="-Data Structure" scheme="http://yoursite.com/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title>Bit Manipulate（0）</title>
    <link href="http://yoursite.com/2020/03/01/Bit%20Manipulate%EF%BC%880%EF%BC%89/"/>
    <id>http://yoursite.com/2020/03/01/Bit%20Manipulate%EF%BC%880%EF%BC%89/</id>
    <published>2020-03-01T23:55:00.000Z</published>
    <updated>2020-03-09T00:55:30.936Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">1101 &gt;&gt; 2 &#x3D; 11 ( &#x2F; 2^2)</span><br><span class="line">1101 &lt;&lt; 3 &#x3D; 1101000 ( * 2^3)</span><br><span class="line"></span><br><span class="line">5 &#x3D; 101 &#x3D; 1*2^2 + 0*2^1 + 1*2^0</span><br><span class="line">-5 :</span><br><span class="line">|-5| &#x3D; 5 &#x3D; 0......0101</span><br><span class="line">-5 : ~x+1 &#x3D; 010 + 1 &#x3D; 1.....1011</span><br><span class="line"></span><br><span class="line">x       &#x3D; 11011</span><br><span class="line">-x      &#x3D; 00100</span><br><span class="line">x&amp;-x    &#x3D; 00000</span><br><span class="line"></span><br><span class="line">x&amp;-x &#x3D;&gt; x的二进制最右边的1</span><br><span class="line">4  &#x3D; 100</span><br><span class="line">-4 &#x3D; ~x+1 &#x3D; 011 + 1 &#x3D; 100</span><br><span class="line">x&amp;-x &#x3D; 100 &#x3D; x : power of 2</span><br><span class="line"></span><br><span class="line">3 &#x3D; 011</span><br><span class="line">-1 &#x3D; 100 + 1 &#x3D; 101</span><br><span class="line">1&amp;-1 &#x3D; 001 &lt; 011 -&gt; not power of 2</span><br><span class="line">-x+1    &#x3D; 00101</span><br></pre></td></tr></table></figure><h2 id="231-Power-of-Two"><a href="#231-Power-of-Two" class="headerlink" title="231. Power of Two"></a><a href="https://leetcode.com/problems/power-of-two/" target="_blank" rel="noopener">231. Power of Two</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfTwo</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 1 &lt;&lt; 30 = : 1 * 2^30</span></span><br><span class="line">    <span class="comment">// return n &gt; 0 &amp;&amp; (1&lt;&lt;30) % n == 0;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> n &gt; <span class="number">0</span> &amp;&amp; (n &amp; -n) == n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">10 : 1010 [3,2,1,0]</span><br><span class="line"></span><br><span class="line">for (int k &#x3D; 3; k &gt;&#x3D; 0; k--)</span><br><span class="line">    x&gt;&gt;1 &amp; 1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x&amp;(-x) &#x3D; x&amp;(~x+1)</span><br><span class="line">x       &#x3D; 1010...1000</span><br><span class="line">~x      &#x3D; 0101...0111</span><br><span class="line">~x+1    &#x3D; 0101...1000</span><br><span class="line">x&amp;(~x+1)&#x3D; 0000...1000</span><br><span class="line">the last 1 postion</span><br><span class="line"></span><br><span class="line">x &#x3D; 1010</span><br><span class="line">sign and magnitude : 1010</span><br><span class="line">one&#39;s complement: 0101</span><br><span class="line">two&#39;s complement: 0110</span><br></pre></td></tr></table></figure><h2 id="801-二进制中1的个数"><a href="#801-二进制中1的个数" class="headerlink" title="801. 二进制中1的个数"></a><a href="https://www.acwing.com/problem/content/803/" target="_blank" rel="noopener">801. 二进制中1的个数</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> x&amp;(~x+<span class="number">1</span>);<span class="comment">// the last one position</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// record the number of 1</span></span><br><span class="line">        <span class="keyword">while</span> (x) x -= lowbit(x), res++;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt; res &lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="78-Subsets"><a href="#78-Subsets" class="headerlink" title="78. Subsets"></a><a href="https://leetcode.com/problems/subsets/" target="_blank" rel="noopener">78. Subsets</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">i-&gt; 2^n-1</span><br><span class="line">123</span><br><span class="line">0~7 case</span><br><span class="line">000 : &#123;&#125;</span><br><span class="line">001 : &#123;1&#125;</span><br><span class="line">010 : &#123;2&#125;</span><br><span class="line">011 : &#123;1,2&#125;</span><br><span class="line">100 : &#123;3&#125;</span><br><span class="line">101 : &#123;1,3&#125;</span><br><span class="line">110 : &#123;2,3&#125;</span><br><span class="line">111 : &#123;1,2,3&#125;</span><br><span class="line"></span><br><span class="line">(i&gt;&gt;j) &amp; 1 : j&#39;th position of i is 1 or not</span><br><span class="line">1&lt;&lt; nums.size() move left 3 times &#x3D; 2^3</span><br><span class="line">bc : 2^3 &#x3D; 8, 8 &#x3D; (1000)2</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">subsets</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span>&lt;&lt;nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="comment">// i &lt; 2^3, 8 = (1000)2</span></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; now;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nums.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;&gt; j &amp; <span class="number">1</span>) &#123;<span class="comment">// jth position of i is 1 or not</span></span><br><span class="line">                now.push_back(nums[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res.push_back(now);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="762-Prime-Number-of-Set-Bits-in-Binary-Representation"><a href="#762-Prime-Number-of-Set-Bits-in-Binary-Representation" class="headerlink" title="762. Prime Number of Set Bits in Binary Representation"></a><a href="https://leetcode.com/problems/prime-number-of-set-bits-in-binary-representation/" target="_blank" rel="noopener">762. Prime Number of Set Bits in Binary Representation</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countPrimeSetBits</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">unordered_set</span>&lt;<span class="keyword">int</span>&gt; <span class="title">primes</span><span class="params">(&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>&#125;)</span></span>;</span><br><span class="line">    <span class="comment">// [1, 10^6] =&gt; 2 ^ 20</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = L; i &lt;= R; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// find the number of 1 in this number</span></span><br><span class="line">        <span class="comment">// k &gt;&gt;= 1, move right 1 bit</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = i; k; k &gt;&gt;= <span class="number">1</span>) res += k &amp; <span class="number">1</span>; <span class="comment">// 1&amp;1 = 1, 1&amp;0 = 0</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// check prime</span></span><br><span class="line">        <span class="keyword">if</span> (primes.count(res)) ans++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="136-Single-Number"><a href="#136-Single-Number" class="headerlink" title="136. Single Number"></a><a href="https://leetcode.com/problems/single-number/" target="_blank" rel="noopener">136. Single Number</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// a^a = 0, 0 ^ a = a, 001 ^ 011 = 010, 010 ^ 010 = 000 so 001</span></span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> num : nums) ans ^= num;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="476-Number-Complement-https-leetcode-com-problems-number-complement"><a href="#476-Number-Complement-https-leetcode-com-problems-number-complement" class="headerlink" title="[476. Number Complement] (https://leetcode.com/problems/number-complement/)"></a>[476. Number Complement] (<a href="https://leetcode.com/problems/number-complement/" target="_blank" rel="noopener">https://leetcode.com/problems/number-complement/</a>)</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findComplement</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>, t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (num) &#123;</span><br><span class="line">        ans += !(num &amp; <span class="number">1</span>) &lt;&lt; t; <span class="comment">// ~num, </span></span><br><span class="line">        num &gt;&gt;= <span class="number">1</span>, t++; <span class="comment">// num &gt;&gt;= 1, move 1 bit</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="137-Single-Number-II"><a href="#137-Single-Number-II" class="headerlink" title="137. Single Number II"></a><a href="https://leetcode.com/problems/single-number-ii/" target="_blank" rel="noopener">137. Single Number II</a></h2><p>another solution(<a href="https://www.acwing.com/solution/LeetCode/content/232/" target="_blank" rel="noopener">https://www.acwing.com/solution/LeetCode/content/232/</a>)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// origin : 0, 0</span></span><br><span class="line">    <span class="comment">// one 1  : 1, 0</span></span><br><span class="line">    <span class="comment">// two 1  : 0, 1</span></span><br><span class="line">    <span class="comment">//three 1 : 0, 0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// num % 3 = 1 -&gt; 1 times,</span></span><br><span class="line">    <span class="comment">// num % 3 = 0 -&gt; 3 times</span></span><br><span class="line">    <span class="keyword">int</span> ones = <span class="number">0</span>, twoes = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> num : nums) &#123;</span><br><span class="line">        ones = (ones ^ num) &amp; ~twoes; <span class="comment">// </span></span><br><span class="line">        twoes = (twoes ^ num) &amp; ~ones;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ones;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="260-Single-Number-III"><a href="#260-Single-Number-III" class="headerlink" title="260. Single Number III"></a><a href="https://www.bilibili.com/video/av32421086" target="_blank" rel="noopener">260. Single Number III</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">singleNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> num : nums) s ^= num; <span class="comment">// a^a^b^c=b^c</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// find b</span></span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!(s&gt;&gt;k &amp; <span class="number">1</span>)) k++;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> s2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> num : nums) &#123;</span><br><span class="line">        <span class="keyword">if</span> (num &gt;&gt; k &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// find b</span></span><br><span class="line">            s2 ^= num; <span class="comment">// s = a ^ b, s2 = a, s2^s = b;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(&#123;s^s2, s2&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="371-Sum-of-Two-Integers"><a href="#371-Sum-of-Two-Integers" class="headerlink" title="371. Sum of Two Integers"></a><a href="https://www.acwing.com/solution/LeetCode/content/543/" target="_blank" rel="noopener">371. Sum of Two Integers</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1101</span></span><br><span class="line"><span class="comment">//^ 1001</span></span><br><span class="line"><span class="comment">// 0100</span></span><br><span class="line"><span class="comment">// 1001 &lt;&lt; 1 = 10010</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!b) <span class="keyword">return</span> a; <span class="comment">// at most, 32times,</span></span><br><span class="line">    <span class="keyword">int</span> sum = a ^ b, carry = uint(a&amp;b)&lt;&lt;<span class="number">1</span>; <span class="comment">// 0&amp;0 &lt;&lt; 1 = 0, uint = unsight int(0, 2^32-1)</span></span><br><span class="line">    <span class="keyword">return</span> getSum(sum, carry); <span class="comment">// b will be 0 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="201-Bitwise-AND-of-Numbers-Range"><a href="#201-Bitwise-AND-of-Numbers-Range" class="headerlink" title="201. Bitwise AND of Numbers Range"></a><a href="https://www.acwing.com/solution/LeetCode/content/264/" target="_blank" rel="noopener">201. Bitwise AND of Numbers Range</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rangeBitwiseAnd</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; (<span class="number">1l</span>l &lt;&lt; i) &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (m &gt;&gt; i &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((m&amp; ~((<span class="number">1</span>&lt;&lt;i) - <span class="number">1l</span>l)) + (<span class="number">1</span> &lt;&lt; i) &gt; n) &#123;</span><br><span class="line">                res += <span class="number">1</span> &lt;&lt; i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="477-Total-Hamming-Distance"><a href="#477-Total-Hamming-Distance" class="headerlink" title="477. Total Hamming Distance"></a><a href="https://www.acwing.com/solution/LeetCode/content/385/" target="_blank" rel="noopener">477. Total Hamming Distance</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">totalHammingDistance</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> ones = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> num : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num &gt;&gt; i &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                ones++;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res += ones * (nums.<span class="built_in">size</span>() - ones);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="421-Maximum-XOR-of-Two-Numbers-in-an-Array"><a href="#421-Maximum-XOR-of-Two-Numbers-in-an-Array" class="headerlink" title="421. Maximum XOR of Two Numbers in an Array"></a><a href="https://www.acwing.com/solution/LeetCode/content/549/" target="_blank" rel="noopener">421. Maximum XOR of Two Numbers in an Array</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> son[<span class="number">2</span>]; <span class="comment">// left and right</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;Node&gt; nodes;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findMaximumXOR</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    nodes.push_back(Node(&#123;<span class="number">0</span>, <span class="number">0</span>&#125;));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// create tire</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> num : nums) &#123;</span><br><span class="line">        <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">30</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">int</span> t = num &gt;&gt; i &amp; <span class="number">1</span>; <span class="comment">// the higest bit </span></span><br><span class="line">            <span class="comment">// if not this node</span></span><br><span class="line">            <span class="keyword">if</span> (!nodes[p].son[t]) &#123;</span><br><span class="line">                nodes.push_back(Node(&#123;<span class="number">0</span>, <span class="number">0</span>&#125;));</span><br><span class="line">                nodes[p].son[t] = nodes.<span class="built_in">size</span>()<span class="number">-1</span>; <span class="comment">// index</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// move p pointer to its son</span></span><br><span class="line">            p = nodes[p].son[t];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// greedy</span></span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> num : nums) &#123;</span><br><span class="line">        <span class="keyword">int</span> p = <span class="number">0</span>, maxXOR = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// for lagest bit</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">30</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">int</span> t = num &gt;&gt; i &amp; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (nodes[p].son[!t]) &#123;</span><br><span class="line">                <span class="comment">// have son</span></span><br><span class="line">                p = nodes[p].son[!t];</span><br><span class="line">                maxXOR  += <span class="number">1</span> &lt;&lt; i;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// not son</span></span><br><span class="line">                p = nodes[p].son[t];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, maxXOR);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
      <category term="yxcNb" scheme="http://yoursite.com/categories/yxcNb/"/>
    
    
      <category term="-Data Structure" scheme="http://yoursite.com/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title>string (1)</title>
    <link href="http://yoursite.com/2020/02/21/title:%20string%20(1)/"/>
    <id>http://yoursite.com/2020/02/21/title:%20string%20(1)/</id>
    <published>2020-02-21T23:55:00.000Z</published>
    <updated>2020-02-27T05:50:43.264Z</updated>
    
    <content type="html"><![CDATA[<h2 id="208-Implement-Trie-Prefix-Tree"><a href="#208-Implement-Trie-Prefix-Tree" class="headerlink" title="208. Implement Trie (Prefix Tree)"></a><a href="https://leetcode.com/problems/implement-trie-prefix-tree/" target="_blank" rel="noopener">208. Implement Trie (Prefix Tree)</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">        <span class="keyword">bool</span> isEnd;</span><br><span class="line">        Node *son[<span class="number">26</span>];</span><br><span class="line">        Node() &#123;</span><br><span class="line">            isEnd = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) son[i] = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;* root;</span><br><span class="line">    Trie() &#123;</span><br><span class="line">        root = <span class="keyword">new</span> Node();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Inserts a word into the trie. */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="built_in">string</span> <span class="keyword">word</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> p = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> c : <span class="keyword">word</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = c - <span class="string">'a'</span>; <span class="comment">// set that node is not NULL</span></span><br><span class="line">            <span class="keyword">if</span> (p-&gt;son[u] == <span class="literal">NULL</span>) p-&gt;son[u] = <span class="keyword">new</span> Node();</span><br><span class="line">            p = p-&gt;son[u]; <span class="comment">// p move to the son</span></span><br><span class="line">        &#125;</span><br><span class="line">        p-&gt;isEnd = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Returns if the word is in the trie. */</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">search</span><span class="params">(<span class="built_in">string</span> <span class="keyword">word</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> p = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> c : <span class="keyword">word</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = c - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;son[u] == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            p = p-&gt;son[u];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p-&gt;isEnd;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Returns if there is any word in the trie that starts with the given prefix. */</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">startsWith</span><span class="params">(<span class="built_in">string</span> prefix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> p = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> c : prefix) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = c - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;son[u] == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            p = p-&gt;son[u];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// prefix</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="273-Integer-to-English-Words"><a href="#273-Integer-to-English-Words" class="headerlink" title="273. Integer to English Words"></a><a href="https://leetcode.com/problems/integer-to-english-words/" target="_blank" rel="noopener">273. Integer to English Words</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Example 3:</span><br><span class="line"></span><br><span class="line">Input: 1234567</span><br><span class="line">Output: &quot;One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven&quot;</span><br><span class="line">Example 4:</span><br><span class="line"></span><br><span class="line">Input: 1234567891</span><br><span class="line">Output: &quot;One Billion Two Hundred Thirty Four Million Five Hundred Sixty Seven Thousand Eight Hundred Ninety One&quot;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    </span><br><span class="line">        <span class="built_in">string</span> small[<span class="number">20</span>] = &#123;<span class="string">"Zero"</span>, <span class="string">"One"</span>, <span class="string">"Two"</span>, <span class="string">"Three"</span>, <span class="string">"Four"</span>, <span class="string">"Five"</span>, </span><br><span class="line">                               <span class="string">"Six"</span>, <span class="string">"Seven"</span>, <span class="string">"Eight"</span>, <span class="string">"Nine"</span>, <span class="string">"Ten"</span>, <span class="string">"Eleven"</span>, </span><br><span class="line">                               <span class="string">"Twelve"</span>, <span class="string">"Thirteen"</span>, <span class="string">"Fourteen"</span>, <span class="string">"Fifteen"</span>, </span><br><span class="line">                               <span class="string">"Sixteen"</span>, <span class="string">"Seventeen"</span>, <span class="string">"Eighteen"</span>, <span class="string">"Nineteen"</span>&#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">string</span> decade[<span class="number">10</span>] = &#123;<span class="string">""</span>, <span class="string">""</span>, <span class="string">"Twenty"</span>, <span class="string">"Thirty"</span>, <span class="string">"Forty"</span>, <span class="string">"Fifty"</span>, <span class="string">"Sixty"</span>, </span><br><span class="line">                              <span class="string">"Seventy"</span>, <span class="string">"Eighty"</span>, <span class="string">"Ninety"</span>&#125;;</span><br><span class="line">        <span class="built_in">string</span> big[<span class="number">4</span>] = &#123;<span class="string">"Billion"</span>, <span class="string">"Million"</span>, <span class="string">"Thousand"</span>, <span class="string">""</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">numberToWords</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!num) <span class="keyword">return</span> small[<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">string</span> res;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1000000000</span>, j = <span class="number">0</span>; i &gt; <span class="number">0</span>; i /= <span class="number">1000</span>, j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num &gt;= i) &#123;</span><br><span class="line">                res += getPart(num / i) + big[j] + <span class="string">' '</span>;</span><br><span class="line">                num %= i;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (res.back() == <span class="string">' '</span>) res.pop_back();</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">getPart</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> res;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (num &gt;= <span class="number">100</span>) &#123;</span><br><span class="line">            res += small[num /<span class="number">100</span>] + <span class="string">" Hundred "</span>;</span><br><span class="line">            num %= <span class="number">100</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!num) <span class="keyword">return</span> res;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (num &gt;= <span class="number">20</span>) &#123;</span><br><span class="line">            res += decade[num /<span class="number">10</span>] + <span class="string">' '</span>;</span><br><span class="line">            num %= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!num) <span class="keyword">return</span> res;</span><br><span class="line">        res += small[num] + <span class="string">' '</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;208-Implement-Trie-Prefix-Tree&quot;&gt;&lt;a href=&quot;#208-Implement-Trie-Prefix-Tree&quot; class=&quot;headerlink&quot; title=&quot;208. Implement Trie (Prefix Tree
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="string" scheme="http://yoursite.com/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>string (0)</title>
    <link href="http://yoursite.com/2020/02/20/string%20(0)/"/>
    <id>http://yoursite.com/2020/02/20/string%20(0)/</id>
    <published>2020-02-20T23:55:00.000Z</published>
    <updated>2020-02-27T02:38:25.953Z</updated>
    
    <content type="html"><![CDATA[<h2 id="38-Count-and-Say"><a href="#38-Count-and-Say" class="headerlink" title="38. Count and Say"></a><a href="https://leetcode.com/problems/count-and-say/" target="_blank" rel="noopener">38. Count and Say</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.     1</span><br><span class="line">2.     11</span><br><span class="line">3.     21</span><br><span class="line">4.     1211</span><br><span class="line">5.     111221</span><br><span class="line">1 is read off as &quot;one 1&quot; or 11.</span><br><span class="line">11 is read off as &quot;two 1s&quot; or 21.</span><br><span class="line">21 is read off as &quot;one 2, then one 1&quot; or 1211.</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">countAndSay</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> ans = <span class="string">"1"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n<span class="number">-1</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">string</span> temp;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; ans.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> k = j;</span><br><span class="line">            <span class="keyword">while</span> (k &lt; ans.<span class="built_in">size</span>() &amp;&amp; ans[k] == ans[j]) k++; <span class="comment">//count the repeat element</span></span><br><span class="line">            temp += to_string(k - j) + ans[j]; <span class="comment">// counter + cur num</span></span><br><span class="line">            j = k - <span class="number">1</span>; <span class="comment">// j jump to k pointer</span></span><br><span class="line">        &#125;</span><br><span class="line">        ans = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="49-Group-Anagrams"><a href="#49-Group-Anagrams" class="headerlink" title="49. Group Anagrams"></a><a href="https://leetcode.com/problems/group-anagrams/" target="_blank" rel="noopener">49. Group Anagrams</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: [&quot;eat&quot;, &quot;tea&quot;, &quot;tan&quot;, &quot;ate&quot;, &quot;nat&quot;, &quot;bat&quot;],</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [&quot;ate&quot;,&quot;eat&quot;,&quot;tea&quot;],</span><br><span class="line">  [&quot;nat&quot;,&quot;tan&quot;],</span><br><span class="line">  [&quot;bat&quot;]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; <span class="title">groupAnagrams</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; strs)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; hash;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> str : strs) &#123;</span><br><span class="line">        <span class="built_in">string</span> key = str;</span><br><span class="line">        sort(key.<span class="built_in">begin</span>(), key.<span class="built_in">end</span>());</span><br><span class="line">        hash[key].push_back(str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; res;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> item : hash) res.push_back(item.second);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// O(n*m*logm + n*m) : n word, m : word length</span></span><br></pre></td></tr></table></figure><h2 id="151-Reverse-Words-in-a-String"><a href="#151-Reverse-Words-in-a-String" class="headerlink" title="151. Reverse Words in a String"></a><a href="https://leetcode.com/problems/reverse-words-in-a-string/" target="_blank" rel="noopener">151. Reverse Words in a String</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">reverseWords</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> wordEnd = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="comment">// erase spaces</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt; s.<span class="built_in">size</span>() &amp;&amp; s[i] == <span class="string">' '</span>) i++;</span><br><span class="line">        <span class="keyword">if</span> (i == s.<span class="built_in">size</span>()) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// reverse each word</span></span><br><span class="line">        <span class="keyword">int</span> j = i;</span><br><span class="line">        <span class="keyword">while</span> (j &lt; s.<span class="built_in">size</span>() &amp;&amp; s[j] != <span class="string">' '</span>) j++;</span><br><span class="line">        <span class="comment">// [) not including j</span></span><br><span class="line">        reverse(s.<span class="built_in">begin</span>() + i, s.<span class="built_in">begin</span>() + j);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// insert space</span></span><br><span class="line">        <span class="keyword">if</span> (wordEnd) s[wordEnd++] = <span class="string">' '</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//move wordEnd pointer to word end</span></span><br><span class="line">        <span class="comment">// bc may have a lot of spaces between words</span></span><br><span class="line">        <span class="comment">// _hello______w, k = index after one space of 'o'</span></span><br><span class="line">        <span class="comment">// copy w to there</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt; j) s[wordEnd++] = s[i++];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// erase the spaces of the string end</span></span><br><span class="line">    s.erase(s.<span class="built_in">begin</span>() + wordEnd, s.<span class="built_in">end</span>());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// reverse the str by each word</span></span><br><span class="line">    reverse(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="165-Compare-Version-Numbers"><a href="#165-Compare-Version-Numbers" class="headerlink" title="165. Compare Version Numbers"></a><a href="https://leetcode.com/problems/compare-version-numbers/" target="_blank" rel="noopener">165. Compare Version Numbers</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compareVersion</span><span class="params">(<span class="built_in">string</span> s1, <span class="built_in">string</span> s2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; s1.<span class="built_in">size</span>() || j &lt; s2.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = i, y = j;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//cut word</span></span><br><span class="line">        <span class="keyword">while</span> (x &lt; s1.<span class="built_in">size</span>() &amp;&amp; s1[x] != <span class="string">'.'</span>) x++;</span><br><span class="line">        <span class="keyword">while</span> (y &lt; s2.<span class="built_in">size</span>() &amp;&amp; s2[y] != <span class="string">'.'</span>) y++;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// convert to int</span></span><br><span class="line">        <span class="keyword">int</span> a = i == x ? <span class="number">0</span> : atoi(s1.substr(i, x - i).c_str()); </span><br><span class="line">        <span class="comment">// substr return pointer, so need to conver to char</span></span><br><span class="line">        <span class="keyword">int</span> b = j == y ? <span class="number">0</span> : atoi(s2.substr(j, y - j).c_str());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (a &gt; b) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (a &lt; b) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//continue</span></span><br><span class="line">        i = x + <span class="number">1</span>, j = y + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="929-Unique-Email-Addresses"><a href="#929-Unique-Email-Addresses" class="headerlink" title="929. Unique Email Addresses"></a><a href="https://leetcode.com/problems/unique-email-addresses/" target="_blank" rel="noopener">929. Unique Email Addresses</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">numUniqueEmails</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; emails)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">unordered_set</span>&lt;<span class="built_in">string</span>&gt; <span class="built_in">set</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> email : emails) &#123;</span><br><span class="line">        <span class="built_in">string</span> name;</span><br><span class="line">        <span class="keyword">int</span> at = email.<span class="built_in">find</span>(<span class="string">'@'</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> c : email.substr(<span class="number">0</span>, at)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">'+'</span>) <span class="keyword">break</span>; <span class="comment">// ignore</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (c != <span class="string">'.'</span>) name += c; <span class="comment">// a.b = ab</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">string</span> domain = email.substr(at + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">set</span>.insert(name + <span class="string">'@'</span> + domain);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">set</span>.<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-Longest-Palindromic-Substring"><a href="#5-Longest-Palindromic-Substring" class="headerlink" title="5. Longest Palindromic Substring"></a><a href="https://leetcode.com/problems/longest-palindromic-substring/" target="_blank" rel="noopener">5. Longest Palindromic Substring</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">longestPalindrome</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> res;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="comment">// odd</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i, k = i; j &gt;= <span class="number">0</span> &amp;&amp; k &lt; s.<span class="built_in">size</span>() &amp;&amp; s[j] == s[k]; j--, k++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (res.<span class="built_in">size</span>() &lt; k - j + <span class="number">1</span>)</span><br><span class="line">                res = s.substr(j, k -j + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// even</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i, k = i + <span class="number">1</span>; j &gt;= <span class="number">0</span> &amp;&amp; k &lt; s.<span class="built_in">size</span>() &amp;&amp; s[j] == s[k]; j--, k++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (res.<span class="built_in">size</span>() &lt; k - j + <span class="number">1</span>)</span><br><span class="line">                res = s.substr(j, k - j + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-ZigZag-Conversion"><a href="#6-ZigZag-Conversion" class="headerlink" title="6. ZigZag Conversion"></a><a href="https://leetcode.com/problems/zigzag-conversion/" target="_blank" rel="noopener">6. ZigZag Conversion</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">                        N &#x3D; 5</span><br><span class="line">0       8       16     首项是0， 公差是2（N-1）的等差数列</span><br><span class="line">1     7 9     15       两个等差数列交错</span><br><span class="line">2   6  10   14</span><br><span class="line">3 5    11 13</span><br><span class="line">4      12              首项是N-1， 公差是2（N-1）的等差数列</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">convert</span><span class="params">(<span class="built_in">string</span> s, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> s; <span class="comment">// (n -1)</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">string</span> res;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="comment">// the fisrt and the last row</span></span><br><span class="line">        <span class="keyword">if</span> (!i || i == n - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; s.<span class="built_in">size</span>(); j += <span class="number">2</span>*(n<span class="number">-1</span>)) res += s[j];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i, k = <span class="number">2</span>*(n<span class="number">-1</span>) - i; j &lt; s.<span class="built_in">size</span>() || k &lt; s.<span class="built_in">size</span>(); j += <span class="number">2</span>*(n<span class="number">-1</span>), k += <span class="number">2</span>*(n<span class="number">-1</span>)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j &lt; s.<span class="built_in">size</span>()) res += s[j];</span><br><span class="line">                <span class="keyword">if</span> (k &lt; s.<span class="built_in">size</span>()) res += s[k];</span><br><span class="line">                <span class="comment">// res += s[j];</span></span><br><span class="line">                <span class="comment">// res += s[k]; -&gt; k may over the size first</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-Longest-Substring-Without-Repeating-Characters"><a href="#3-Longest-Substring-Without-Repeating-Characters" class="headerlink" title="3. Longest Substring Without Repeating Characters"></a><a href="https://leetcode.com/problems/longest-substring-without-repeating-characters/" target="_blank" rel="noopener">3. Longest Substring Without Repeating Characters</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; hash;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        hash[s[i]]++; </span><br><span class="line">        </span><br><span class="line">        <span class="comment">// if the added element make hash[s[i]] &gt; 1</span></span><br><span class="line">        <span class="comment">// repeat, move j to the repeat index</span></span><br><span class="line">        <span class="comment">// before j + 1(the repeat one) is the res</span></span><br><span class="line">        <span class="comment">// clean the hash</span></span><br><span class="line">        <span class="keyword">while</span> (hash[s[i]] &gt; <span class="number">1</span>) hash[s[j++]]--;</span><br><span class="line">        res = <span class="built_in">max</span>(res, i - j + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;38-Count-and-Say&quot;&gt;&lt;a href=&quot;#38-Count-and-Say&quot; class=&quot;headerlink&quot; title=&quot;38. Count and Say&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.com/problem
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="string" scheme="http://yoursite.com/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>binary-stack-queue (1)</title>
    <link href="http://yoursite.com/2020/02/14/title:%20binary-stack-queue%20(1)/"/>
    <id>http://yoursite.com/2020/02/14/title:%20binary-stack-queue%20(1)/</id>
    <published>2020-02-14T23:55:00.000Z</published>
    <updated>2020-02-24T18:51:00.154Z</updated>
    
    <content type="html"><![CDATA[<h2 id="496-Next-Greater-Element-I"><a href="#496-Next-Greater-Element-I" class="headerlink" title="496. Next Greater Element I"></a><a href="https://leetcode.com/problems/next-greater-element-i/" target="_blank" rel="noopener">496. Next Greater Element I</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">给定两个没有重复元素的数组 nums1 和 nums2 ，其中 nums1 是 nums2 的子集。找到 nums1 中每个元素在 nums2 中的下一个比其大的值。</span><br><span class="line">nums1 中数字 x 的下一个更大元素是指 x 在 nums2 中对应位置的右边的第一个比 x 大的元素。如果不存在，对应位置输出 -1</span><br><span class="line">输入: nums1 &#x3D; [4,1,2], nums2 &#x3D; [1,3,4,2].</span><br><span class="line">输出: [-1,3,-1]</span><br><span class="line">解释:</span><br><span class="line">对于 nums1 中的数字 4，你无法在第二个数组中找到下一个更大的数字，因此输出 -1。</span><br><span class="line">对于 nums1 中的数字 1，第二个数组中数字1右边的下一个较大数字是 3。</span><br><span class="line">对于 nums1 中的数字 2，第二个数组中没有下一个更大的数字，因此输出 -1。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. use stack to save the next greater element in its right</span><br><span class="line">2. bc need to find its right, so we search from back</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">nextGreaterElement</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; stk;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; hash;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = nums2.<span class="built_in">size</span>() <span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">int</span> t = nums2[i];</span><br><span class="line">        <span class="keyword">while</span> (stk.<span class="built_in">size</span>() &amp;&amp; stk.top() &lt;= t) stk.pop();</span><br><span class="line">        hash[t] = stk.<span class="built_in">size</span>() ? stk.top() : <span class="number">-1</span>;</span><br><span class="line">        stk.push(t);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> t : nums1) res.push_back(hash[t]);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="84-Largest-Rectangle-in-Histogram"><a href="#84-Largest-Rectangle-in-Histogram" class="headerlink" title="84. Largest Rectangle in Histogram"></a><a href="https://leetcode.com/problems/largest-rectangle-in-histogram/" target="_blank" rel="noopener">84. Largest Rectangle in Histogram</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">largestRectangleArea</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; heights)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = heights.<span class="built_in">size</span>(), ans = <span class="number">0</span>;</span><br><span class="line">heights.push_back(<span class="number">-1</span>); <span class="comment">// [2, 3], i = 2</span></span><br><span class="line"><span class="comment">// 为了算法书写方便，在数组末尾添加高度 -1</span></span><br><span class="line"><span class="comment">// 这会使得栈中所有数字在最后出栈。</span></span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; st; <span class="comment">// index </span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">while</span> (!st.empty() &amp;&amp; heights[i] &lt; heights[st.top()]) &#123;</span><br><span class="line">        <span class="keyword">int</span> cur = st.top();</span><br><span class="line">        st.pop();</span><br><span class="line">        <span class="keyword">if</span> (st.empty())</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, heights[cur] * i); <span class="comment">// [2,1] height[cur] </span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ans = <span class="built_in">max</span>(ans, heights[cur] </span><br><span class="line">                    * (i - st.top() - <span class="number">1</span>)); <span class="comment">// weigth, - 1 is itself, limit by the shortest heigth</span></span><br><span class="line">    &#125;</span><br><span class="line">    st.push(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;496-Next-Greater-Element-I&quot;&gt;&lt;a href=&quot;#496-Next-Greater-Element-I&quot; class=&quot;headerlink&quot; title=&quot;496. Next Greater Element I&quot;&gt;&lt;/a&gt;&lt;a href
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="binary" scheme="http://yoursite.com/tags/binary/"/>
    
      <category term="stack" scheme="http://yoursite.com/tags/stack/"/>
    
      <category term="heap" scheme="http://yoursite.com/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>Linked List(0)</title>
    <link href="http://yoursite.com/2020/02/14/Linked%20List(0)/"/>
    <id>http://yoursite.com/2020/02/14/Linked%20List(0)/</id>
    <published>2020-02-14T23:55:00.000Z</published>
    <updated>2020-03-03T02:49:35.300Z</updated>
    
    <content type="html"><![CDATA[<h2 id="82-Remove-Duplicates-from-Sorted-List-II"><a href="#82-Remove-Duplicates-from-Sorted-List-II" class="headerlink" title="82. Remove Duplicates from Sorted List II"></a><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/" target="_blank" rel="noopener">82. Remove Duplicates from Sorted List II</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">deleteDuplicates</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">    ListNode* dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    dummy-&gt;next = head;</span><br><span class="line">    ListNode* pre = dummy;</span><br><span class="line">    ListNode* cur = head;</span><br><span class="line">    <span class="keyword">bool</span> equal = <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (cur &amp;&amp; cur-&gt;next) &#123;</span><br><span class="line">        <span class="keyword">while</span> (cur-&gt;next &amp;&amp; cur-&gt;val == cur-&gt;next-&gt;val) &#123;</span><br><span class="line">            equal = <span class="literal">true</span>;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (equal) &#123;</span><br><span class="line">            pre-&gt;next = cur-&gt;next;</span><br><span class="line">            equal = <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pre = cur;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = cur-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="83-Remove-Duplicates-from-Sorted-List-https-leetcode-com-problems-remove-duplicates-from-sorted-list"><a href="#83-Remove-Duplicates-from-Sorted-List-https-leetcode-com-problems-remove-duplicates-from-sorted-list" class="headerlink" title="[83. Remove Duplicates from Sorted List] (https://leetcode.com/problems/remove-duplicates-from-sorted-list/)"></a>[83. Remove Duplicates from Sorted List] (<a href="https://leetcode.com/problems/remove-duplicates-from-sorted-list/" target="_blank" rel="noopener">https://leetcode.com/problems/remove-duplicates-from-sorted-list/</a>)</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">deleteDuplicates</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">    ListNode* cur = head;</span><br><span class="line">    <span class="keyword">while</span> (cur) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cur-&gt;next &amp;&amp; cur-&gt;val == cur-&gt;next-&gt;val) &#123;</span><br><span class="line">            cur-&gt;next = cur-&gt;next-&gt;next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;82-Remove-Duplicates-from-Sorted-List-II&quot;&gt;&lt;a href=&quot;#82-Remove-Duplicates-from-Sorted-List-II&quot; class=&quot;headerlink&quot; title=&quot;82. Remove D
      
    
    </summary>
    
    
      <category term="恰饭要紧" scheme="http://yoursite.com/categories/%E6%81%B0%E9%A5%AD%E8%A6%81%E7%B4%A7/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Slide Window (0)</title>
    <link href="http://yoursite.com/2020/02/14/title:%20Slide%20Window%20(0)/"/>
    <id>http://yoursite.com/2020/02/14/title:%20Slide%20Window%20(0)/</id>
    <published>2020-02-14T23:55:00.000Z</published>
    <updated>2020-03-02T00:00:14.710Z</updated>
    
    <content type="html"><![CDATA[<h2 id="167-Two-Sum-II-Input-array-is-sorted-https-leetcode-com-problems-two-sum-ii-input-array-is-sorted"><a href="#167-Two-Sum-II-Input-array-is-sorted-https-leetcode-com-problems-two-sum-ii-input-array-is-sorted" class="headerlink" title="[167. Two Sum II - Input array is sorted] (https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/)"></a>[167. Two Sum II - Input array is sorted] (<a href="https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/" target="_blank" rel="noopener">https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/</a>)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: numbers &#x3D; [2,7,11,15], target &#x3D; 9</span><br><span class="line">Output: [1,2]</span><br><span class="line">Explanation: The sum of 2 and 7 is 9. Therefore index1 &#x3D; 1, index2 &#x3D; 2.</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">twoSum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; numbers, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// i &lt; numbers.size()-1 if only two element</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = numbers.<span class="built_in">size</span>() <span class="number">-1</span>; i &lt; numbers.<span class="built_in">size</span>()<span class="number">-1</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// fix i, move j</span></span><br><span class="line">        <span class="keyword">while</span> ( i &lt; j &amp;&amp; numbers[i] + numbers[j] &gt; target) j--;</span><br><span class="line">        <span class="keyword">if</span> (numbers[i] + numbers[j] == target) <span class="keyword">return</span> &#123;i+<span class="number">1</span>, j+<span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="number">-1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="88-Merge-Sorted-Array"><a href="#88-Merge-Sorted-Array" class="headerlink" title="88. Merge Sorted Array"></a><a href="https://leetcode.com/problems/merge-sorted-array/" target="_blank" rel="noopener">88. Merge Sorted Array</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="keyword">int</span> m, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = m <span class="number">-1</span>, j = n <span class="number">-1</span>, k = m + n <span class="number">-1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; j &gt;= <span class="number">0</span>) &#123; <span class="comment">// if use ||, j = 0 -&gt;else -1</span></span><br><span class="line">        <span class="keyword">if</span> (nums1[i] &gt; nums2[j]) nums1[k--] = nums1[i--];</span><br><span class="line">        <span class="keyword">else</span> nums1[k--] = nums2[j--];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// if nums2 not empty, means have smaller</span></span><br><span class="line">    <span class="keyword">while</span> (j &gt;= <span class="number">0</span>) nums1[k--] = nums2[j--]; <span class="comment">// if nums2 bigger, do need to move i</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="26-Remove-Duplicates-from-Sorted-Array"><a href="#26-Remove-Duplicates-from-Sorted-Array" class="headerlink" title="26. Remove Duplicates from Sorted Array"></a><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-array/" target="_blank" rel="noopener">26. Remove Duplicates from Sorted Array</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Given nums &#x3D; [1,1,2],</span><br><span class="line"></span><br><span class="line">Your function should return length &#x3D; 2, with the first two elements of nums being 1 and 2 respectively.</span><br><span class="line"></span><br><span class="line">It doesn&#39;t matter what you leave beyond the returned length.</span><br><span class="line"></span><br><span class="line">Given nums &#x3D; [0,0,1,1,1,2,2,3,3,4],</span><br><span class="line"></span><br><span class="line">Your function should return length &#x3D; 5, with the first five elements of nums being modified to 0, 1, 2, 3, and 4 respectively.</span><br><span class="line"></span><br><span class="line">It doesn&#39;t matter what values are set beyond the returned length.</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.empty()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; nums.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[j] != nums[j<span class="number">-1</span>]) &#123;</span><br><span class="line">            nums[k++] = nums[j]; <span class="comment">// cover it </span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="76-Minimum-Window-Substring-https-leetcode-com-problems-minimum-window-substring"><a href="#76-Minimum-Window-Substring-https-leetcode-com-problems-minimum-window-substring" class="headerlink" title="[76. Minimum Window Substring] (https://leetcode.com/problems/minimum-window-substring/)"></a>[76. Minimum Window Substring] (<a href="https://leetcode.com/problems/minimum-window-substring/" target="_blank" rel="noopener">https://leetcode.com/problems/minimum-window-substring/</a>)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: S &#x3D; &quot;ABBBBDABC&quot;, T &#x3D; &quot;ABBC&quot;</span><br><span class="line">Output: &quot;BDABC&quot;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">minWindow</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; hash;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> c : t) hash[c]++;</span><br><span class="line">    <span class="keyword">int</span> cnt = hash.<span class="built_in">size</span>();</span><br><span class="line">    <span class="comment">// cout&lt;&lt;hash.size()&lt;&lt;endl; // 3</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">string</span> res;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, c = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (hash[s[i]] == <span class="number">1</span>) c++;</span><br><span class="line">        hash[s[i]]--;</span><br><span class="line">        <span class="keyword">while</span> (hash[s[j]] &lt; <span class="number">0</span>) hash[s[j++]]++;</span><br><span class="line">        <span class="keyword">if</span> (c == cnt) &#123;</span><br><span class="line">            <span class="keyword">if</span> (res.empty() || res.<span class="built_in">size</span>() &gt; i - j + <span class="number">1</span>) res = s.substr(j, i - j + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="32-Longest-Valid-Parentheses"><a href="#32-Longest-Valid-Parentheses" class="headerlink" title="32. Longest Valid Parentheses"></a><a href="https://leetcode.com/problems/longest-valid-parentheses/" target="_blank" rel="noopener">32. Longest Valid Parentheses</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">合法的括号序列 &#x3D; 前缀和 》&#x3D; 0 &amp;&amp; 总和 &#x3D; 0</span><br><span class="line">start  ： 当前枚举的这一段的开头</span><br><span class="line">cnt ： 前缀和</span><br><span class="line">(  &#x3D; 1, ) &#x3D; -1</span><br><span class="line">1. cnt &lt;  &#x3D;&gt; start &#x3D; i + 1, cnt &#x3D; 0</span><br><span class="line">2. cnt &gt; 0 &#x3D;&gt; 继续做</span><br><span class="line">3. cnt &#x3D;&#x3D; 0 &#x3D;&gt; 【start, i] 是一段合法的括号序列</span><br><span class="line">4. （（（（（）） cnt 一直 &gt;0 so 反过来再做一次</span><br><span class="line">    (())))</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">work</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, start = <span class="number">0</span>, cnt = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">'('</span>) cnt++;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            cnt --;</span><br><span class="line">            <span class="keyword">if</span> (cnt &lt; <span class="number">0</span>) start = i + <span class="number">1</span>, cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (!cnt) res = <span class="built_in">max</span>(res, i - start + <span class="number">1</span>); <span class="comment">// valid parentheses</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">longestValidParentheses</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = work(s);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// （（（（（）） cnt 一直 &gt;0 so 反过来再做一次 (())))</span></span><br><span class="line">    reverse(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;c : s) c ^= <span class="number">1</span>; <span class="comment">// convert ( -&gt; )</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(res, work(s));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="42-Trapping-Rain-Water"><a href="#42-Trapping-Rain-Water" class="headerlink" title="42. Trapping Rain Water"></a><a href="https://leetcode.com/problems/trapping-rain-water/" target="_blank" rel="noopener">42. Trapping Rain Water</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">单调栈 ： 左侧第一个比它小的数</span><br><span class="line">单调队列： 滑动窗口最值</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">trap</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; <span class="built_in">height</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; stk;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">height</span>.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> last = <span class="number">0</span>; <span class="comment">// last height</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (stk.<span class="built_in">size</span>() &amp;&amp; <span class="built_in">height</span>[i] &gt;= <span class="built_in">height</span>[stk.top()]) &#123;</span><br><span class="line">            <span class="keyword">int</span> t = stk.top();</span><br><span class="line">            stk.pop();</span><br><span class="line">            res += (i - t - <span class="number">1</span>) * (<span class="built_in">height</span>[t] - last); <span class="comment">// level, leftHight-rightLow</span></span><br><span class="line">            last = <span class="built_in">height</span>[t];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// if still have, that means left &gt; height[i]</span></span><br><span class="line">        <span class="keyword">if</span> (stk.<span class="built_in">size</span>()) res += (i - stk.top() <span class="number">-1</span>) * (<span class="built_in">height</span>[i] - last); <span class="comment">// rightHigh - leftLow</span></span><br><span class="line">        stk.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="239-Sliding-Window-Maximum"><a href="#239-Sliding-Window-Maximum" class="headerlink" title="239. Sliding Window Maximum"></a><a href="https://leetcode.com/problems/sliding-window-maximum/submissions/" target="_blank" rel="noopener">239. Sliding Window Maximum</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">maxSlidingWindow</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">    <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="comment">// move window, if full, move it out</span></span><br><span class="line">        <span class="keyword">if</span> (q.<span class="built_in">size</span>() &amp;&amp; i - k + <span class="number">1</span> &gt; q.front()) q.pop_front();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// decreasing queue, the front is always the max</span></span><br><span class="line">        <span class="keyword">while</span> (q.<span class="built_in">size</span>() &amp;&amp; nums[q.back()] &lt;= nums[i]) q.pop_back();</span><br><span class="line">        q.push_back(i);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// each maximum in the window</span></span><br><span class="line">        <span class="keyword">if</span> (i &gt;= k - <span class="number">1</span>) res.push_back(nums[q.front()]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="918-Maximum-Sum-Circular-Subarray"><a href="#918-Maximum-Sum-Circular-Subarray" class="headerlink" title="918. Maximum Sum Circular Subarray"></a><a href="https://leetcode.com/problems/maximum-sum-circular-subarray/" target="_blank" rel="noopener">918. Maximum Sum Circular Subarray</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxSubarraySumCircular</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = A.<span class="built_in">size</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//make A to 2n</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) A.push_back(A[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//find n length window, the maximum sum of 1~n</span></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">sum</span><span class="params">(<span class="number">2</span>*n+<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span>*n; i++) sum[i] = sum[i<span class="number">-1</span>] + A[i<span class="number">-1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> res = INT_MIN;</span><br><span class="line">    <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.push_back(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span>*n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (q.<span class="built_in">size</span>() &amp;&amp; i - n &gt; q.front()) q.pop_front();</span><br><span class="line">        <span class="keyword">if</span> (q.<span class="built_in">size</span>()) res = <span class="built_in">max</span>(res, sum[i]-sum[q.front()]); <span class="comment">// q.front is the smallest</span></span><br><span class="line">        <span class="keyword">while</span> (q.<span class="built_in">size</span>() &amp;&amp; sum[q.back()] &gt;= sum[i]) q.pop_back(); <span class="comment">// increasing</span></span><br><span class="line">        q.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;167-Two-Sum-II-Input-array-is-sorted-https-leetcode-com-problems-two-sum-ii-input-array-is-sorted&quot;&gt;&lt;a href=&quot;#167-Two-Sum-II-Input-ar
      
    
    </summary>
    
    
      <category term="恰饭要紧" scheme="http://yoursite.com/categories/%E6%81%B0%E9%A5%AD%E8%A6%81%E7%B4%A7/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Dynamic Program (0)</title>
    <link href="http://yoursite.com/2020/02/14/title:%20Dynamic%20Program%20(0)/"/>
    <id>http://yoursite.com/2020/02/14/title:%20Dynamic%20Program%20(0)/</id>
    <published>2020-02-14T23:55:00.000Z</published>
    <updated>2020-03-13T03:00:53.373Z</updated>
    
    <content type="html"><![CDATA[<h2 id="120-Triangle"><a href="#120-Triangle" class="headerlink" title="120. Triangle"></a><a href="https://leetcode.com/problems/triangle/" target="_blank" rel="noopener">120. Triangle</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">For example, given the following triangle</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">     [2],</span><br><span class="line">    [3,4],</span><br><span class="line">   [6,5,7],</span><br><span class="line">  [4,1,8,3]</span><br><span class="line">]</span><br><span class="line">The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 &#x3D; 11).</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minimumTotal</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> row = nums.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;&gt; <span class="title">dp</span><span class="params">(row, <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; (row))</span></span>;</span><br><span class="line"></span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = nums[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; row; i++) &#123;</span><br><span class="line">        <span class="comment">//each level</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nums[i].<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">            dp[i][j] = INT_MAX;</span><br><span class="line">            <span class="comment">//like res = min(res, dp[row-1][i]);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//from top left</span></span><br><span class="line">            <span class="keyword">if</span> (j &gt; <span class="number">0</span>) dp[i][j] = <span class="built_in">min</span>(dp[i][j], dp[i<span class="number">-1</span>][j<span class="number">-1</span>] + nums[i][j]);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//from top right</span></span><br><span class="line">            <span class="keyword">if</span> (j &lt; nums[i<span class="number">-1</span>].<span class="built_in">size</span>())</span><br><span class="line">                dp[i][j] = <span class="built_in">min</span>(dp[i][j], dp[i<span class="number">-1</span>][j] + nums[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//at last row</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> res = INT_MAX;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; nums[row<span class="number">-1</span>].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        res = <span class="built_in">min</span>(res, dp[row<span class="number">-1</span>][i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="63-Unique-Paths-II"><a href="#63-Unique-Paths-II" class="headerlink" title="63. Unique Paths II"></a><a href="https://leetcode.com/problems/unique-paths-ii/" target="_blank" rel="noopener">63. Unique Paths II</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">uniquePathsWithObstacles</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; g)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> row = g.<span class="built_in">size</span>(), col = g[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;&gt; <span class="title">dp</span><span class="params">(row, <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;(col))</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// if [[1]] Expected : 0</span></span><br><span class="line">    <span class="comment">// dp[0][0] = 1;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">            <span class="comment">//obstacles, should before !i&amp;&amp;!j bc [[1]], i = 1, j = 1</span></span><br><span class="line">            <span class="keyword">if</span> (g[i][j]) <span class="keyword">continue</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (!i &amp;&amp; !j) dp[i][j] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//not the first row, e.g i = 1; dp[1][0] = 1, down  </span></span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span>) dp[i][j] += dp[i<span class="number">-1</span>][j];</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//else if is wrong</span></span><br><span class="line">            <span class="keyword">if</span> (j &gt; <span class="number">0</span>) dp[i][j] += dp[i][j<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//at [row-1][col]: down, at[row][col-1]: right</span></span><br><span class="line">    <span class="keyword">return</span> dp[row<span class="number">-1</span>][col<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="198-House-Robber"><a href="#198-House-Robber" class="headerlink" title="198. House Robber"></a><a href="https://leetcode.com/problems/house-robber/" target="_blank" rel="noopener">198. House Robber</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> rob = <span class="number">0</span>, notRob = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> preRob = rob, preNotRob = notRob;</span><br><span class="line"></span><br><span class="line">        rob = preNotRob + nums[i];</span><br><span class="line"></span><br><span class="line">        notRob = <span class="built_in">max</span>(preRob, preNotRob);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(rob, notRob);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1143-Longest-Common-Subsequence-https-leetcode-com-problems-longest-common-subsequence"><a href="#1143-Longest-Common-Subsequence-https-leetcode-com-problems-longest-common-subsequence" class="headerlink" title="[1143. Longest Common Subsequence] (https://leetcode.com/problems/longest-common-subsequence/)"></a>[1143. Longest Common Subsequence] (<a href="https://leetcode.com/problems/longest-common-subsequence/" target="_blank" rel="noopener">https://leetcode.com/problems/longest-common-subsequence/</a>)</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">longestCommonSubsequence</span><span class="params">(<span class="built_in">string</span> text1, <span class="built_in">string</span> text2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len1 = text1.<span class="built_in">size</span>(), len2 = text2.<span class="built_in">size</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">dp</span><span class="params">(len1+<span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(len2+<span class="number">1</span>))</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len1; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= len2; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (text1[i<span class="number">-1</span>] == text2[j<span class="number">-1</span>]) &#123;</span><br><span class="line">                dp[i][j] = (dp[i<span class="number">-1</span>][j<span class="number">-1</span>] + <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i][j] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][j], dp[i][j<span class="number">-1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[len1][len2];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="354-Russian-Doll-Envelopes"><a href="#354-Russian-Doll-Envelopes" class="headerlink" title="354. Russian Doll Envelopes"></a><a href="https://www.acwing.com/solution/LeetCode/content/2865/" target="_blank" rel="noopener">354. Russian Doll Envelopes</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp;a, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a[<span class="number">0</span>] != b[<span class="number">0</span>]) <span class="keyword">return</span> a[<span class="number">0</span>] &lt; b[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">return</span> a[<span class="number">1</span>] &gt; b[<span class="number">1</span>]; <span class="comment">// if a.first == b.first</span></span><br><span class="line">&#125; <span class="comment">// [1,2], [1,4], [2,4], [2,3], so increasing y won't have the same x, [x,y] </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxEnvelopes</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; envelopes)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = envelopes.<span class="built_in">size</span>();</span><br><span class="line">    sort(envelopes.<span class="built_in">begin</span>(), envelopes.<span class="built_in">end</span>(), cmp);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> item : envelopes) &#123;</span><br><span class="line">        <span class="keyword">int</span> y = item[<span class="number">1</span>];</span><br><span class="line">        <span class="comment">// save second</span></span><br><span class="line">        <span class="keyword">if</span> (q.empty() || y &gt; q.back()) &#123;</span><br><span class="line">            q.push_back(y);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> l = <span class="number">0</span>, r = q.<span class="built_in">size</span>() <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">                <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (q[mid] &gt;= y) r = mid;</span><br><span class="line">                <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            q[l] = <span class="built_in">min</span>(q[l], y); <span class="comment">// save more evelopes as you can,</span></span><br><span class="line">                <span class="comment">// so choose the min</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> q.<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="338-Counting-Bits"><a href="#338-Counting-Bits" class="headerlink" title="338. Counting Bits"></a><a href="acwing.com/solution/LeetCode/content/365/">338. Counting Bits</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 001 : f[1] = 0 + 1 = 1</span></span><br><span class="line"><span class="comment">// 010 : f[2] = 010, f[2&gt;&gt;1] = 001</span></span><br><span class="line"><span class="comment">// 010 : f[2] = f[1] + 1, 1 + (010 &amp; 001 = 0) = 1</span></span><br><span class="line"><span class="comment">// 011 : f[3] = f[1] + (011 &amp; 001) = 1 + 1 = 2 </span></span><br><span class="line"><span class="comment">// 001, 010, 011, 100, 4/2 = 2-&gt; 100&gt;&gt;1 = 010</span></span><br><span class="line"><span class="comment">// f[4] = f[2] + (100 &amp; 001) = 1 + 0 = 1</span></span><br><span class="line"><span class="comment">// each num is 1 or 2, so + (i&amp;1)</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">countBits</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">f</span><span class="params">(num+<span class="number">1</span>)</span></span>;</span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; i++) &#123;</span><br><span class="line">        f[i] = f[i&gt;&gt;<span class="number">1</span>] + (i&amp;<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="526-Beautiful-Arrangement"><a href="#526-Beautiful-Arrangement" class="headerlink" title="526. Beautiful Arrangement"></a><a href="https://www.acwing.com/solution/LeetCode/content/418/" target="_blank" rel="noopener">526. Beautiful Arrangement</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countArrangement</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">f</span><span class="params">(<span class="number">1</span> &lt;&lt; N, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">        f[<span class="number">1</span> &lt;&lt; i] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> s = <span class="number">1</span>; s &lt; (<span class="number">1</span> &lt;&lt; N); s++)</span><br><span class="line">        <span class="keyword">if</span> (f[s] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">                <span class="keyword">if</span> (s &amp; (<span class="number">1</span> &lt;&lt; i))</span><br><span class="line">                    tot++;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">                <span class="keyword">if</span> (!(s &amp; (<span class="number">1</span> &lt;&lt; i)) &amp;&amp; ((tot + <span class="number">1</span>) % (i + <span class="number">1</span>) == <span class="number">0</span> || (i + <span class="number">1</span>) % (tot + <span class="number">1</span>) == <span class="number">0</span>))</span><br><span class="line">                    f[s | <span class="number">1</span> &lt;&lt; i] += f[s];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> f[(<span class="number">1</span> &lt;&lt; N) - <span class="number">1</span>];         </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="486-Predict-the-Winner"><a href="#486-Predict-the-Winner" class="headerlink" title="486. Predict the Winner"></a><a href="https://www.acwing.com/solution/LeetCode/content/392/" target="_blank" rel="noopener">486. Predict the Winner</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">PredictTheWinner</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">f</span><span class="params">(n, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n))</span></span>;</span><br><span class="line">    <span class="comment">// f[i][j], [i, j] player1 score, total score - player1 = player2</span></span><br><span class="line">    <span class="comment">// problem -&gt; max player1 score</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (n &amp; <span class="number">1</span>) <span class="comment">// if only 0 and that num, we only need to check odd case</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) f[i][i] = nums[i]; <span class="comment">// the last num will be choosed by player1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123; <span class="comment">// length 2 cases</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j + i - <span class="number">1</span> &lt; n; j++) &#123; <span class="comment">// j+i-1 the last num in this section </span></span><br><span class="line">            <span class="keyword">int</span> l = j, r = j + i - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> ((n - (r - l + <span class="number">1</span>)) % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">                f[l][r] = <span class="built_in">max</span>(f[l+<span class="number">1</span>][r] + nums[l], f[l][r<span class="number">-1</span>] + nums[r]);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                f[l][r] = <span class="built_in">min</span>(f[l+<span class="number">1</span>][r], f[l][r - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> x : nums) sum += x;</span><br><span class="line">    <span class="keyword">return</span> f[<span class="number">0</span>][n<span class="number">-1</span>] &gt;= sum - f[<span class="number">0</span>][n<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;120-Triangle&quot;&gt;&lt;a href=&quot;#120-Triangle&quot; class=&quot;headerlink&quot; title=&quot;120. Triangle&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.com/problems/triangle/&quot;
      
    
    </summary>
    
    
      <category term="恰饭要紧" scheme="http://yoursite.com/categories/%E6%81%B0%E9%A5%AD%E8%A6%81%E7%B4%A7/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Hash Table (1)</title>
    <link href="http://yoursite.com/2020/02/14/title:%20Hash%20Table%20(1)/"/>
    <id>http://yoursite.com/2020/02/14/title:%20Hash%20Table%20(1)/</id>
    <published>2020-02-14T23:55:00.000Z</published>
    <updated>2020-02-21T02:14:57.605Z</updated>
    
    <content type="html"><![CDATA[<h2 id="350-Intersection-of-Two-Arrays-II"><a href="#350-Intersection-of-Two-Arrays-II" class="headerlink" title="350. Intersection of Two Arrays II"></a><a href="https://leetcode.com/problems/intersection-of-two-arrays-ii/" target="_blank" rel="noopener">350. Intersection of Two Arrays II</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: nums1 &#x3D; [1,2,2,1], nums2 &#x3D; [2,2]</span><br><span class="line">Output: [2,2]</span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: nums1 &#x3D; [4,9,5], nums2 &#x3D; [9,4,9,8,4]</span><br><span class="line">Output: [4,9]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0 . use table to record element in the less length nums</span><br><span class="line">    for loop to search the x</span><br><span class="line">1. Only add the least frequency intersection : </span><br><span class="line">    Input: nums1 &#x3D; [4,9,5], nums2 &#x3D; [9,4,9,8,4]</span><br><span class="line">    Output: [4,9]</span><br><span class="line">    So, need to erase that x in the table</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">intersect</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// exchange the pointer</span></span><br><span class="line">    <span class="keyword">if</span> (nums1.<span class="built_in">size</span>() &gt; nums2.<span class="built_in">size</span>()) <span class="keyword">return</span> intersect(nums2, nums1);</span><br><span class="line">    <span class="built_in">unordered_multiset</span>&lt;<span class="keyword">int</span>&gt; hash;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> num : nums1) hash.insert(num);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> num : nums2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (hash.count(num)) &#123;</span><br><span class="line">            res.push_back(num);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// erase [2,2,2] [2,2] -&gt; [2, 2]</span></span><br><span class="line">            <span class="keyword">auto</span> it = hash.<span class="built_in">find</span>(num);</span><br><span class="line">            hash.erase(it);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (hash.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">map, multimap, set, multiset : red black tree</span><br><span class="line">sorted, O(nlogn)</span><br><span class="line"></span><br><span class="line">unordered_map, unordered_multimap, </span><br><span class="line">unordered_set, unordered_multiset,</span><br><span class="line"></span><br><span class="line">dictionary, O(1)</span><br></pre></td></tr></table></figure><h2 id="706-Design-HashMap"><a href="#706-Design-HashMap" class="headerlink" title="706. Design HashMap"></a><a href="https://www.acwing.com/solution/LeetCode/content/443/" target="_blank" rel="noopener">706. Design HashMap</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHashMap</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">20011</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">list</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&gt; hash;</span><br><span class="line">    </span><br><span class="line">    MyHashMap() &#123;</span><br><span class="line">        hash = <span class="built_in">vector</span>&lt;<span class="built_in">list</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&gt;(N);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">list</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;::<span class="function">iterator <span class="title">find</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> t = key % N;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">auto</span> it = hash[t].<span class="built_in">begin</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (; it != hash[t].<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (it-&gt;first == key) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> it;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** value will always be non-negative. */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> t = key % N;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">auto</span> it = <span class="built_in">find</span>(key);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (it == hash[t].<span class="built_in">end</span>()) <span class="comment">// not have</span></span><br><span class="line">            hash[t].push_back(make_pair(key, value));</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            it-&gt;second = value;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> t = key % N;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">auto</span> it = <span class="built_in">find</span>(key);</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">if</span> (it == hash[t].<span class="built_in">end</span>())</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> it-&gt;second;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Removes the mapping of the specified value key if this map contains a mapping for the key */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> t = key % N;</span><br><span class="line">        <span class="keyword">auto</span> it = <span class="built_in">find</span>(key);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (it != hash[t].<span class="built_in">end</span>())</span><br><span class="line">            hash[t].erase(it);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="652-Find-Duplicate-Subtrees"><a href="#652-Find-Duplicate-Subtrees" class="headerlink" title="652. Find Duplicate Subtrees"></a><a href="https://leetcode.com/problems/find-duplicate-subtrees/" target="_blank" rel="noopener">652. Find Duplicate Subtrees</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">        1</span><br><span class="line">       &#x2F; \</span><br><span class="line">      2   3</span><br><span class="line">     &#x2F;   &#x2F; \</span><br><span class="line">    4   2   4</span><br><span class="line">       &#x2F;</span><br><span class="line">      4</span><br><span class="line">The following are two duplicate subtrees:</span><br><span class="line"></span><br><span class="line">      2</span><br><span class="line">     &#x2F;</span><br><span class="line">    4</span><br><span class="line">and</span><br><span class="line"></span><br><span class="line">    4</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. dfs, record the frequency of each subtree</span><br><span class="line">2. hash is O(1), copy string is O(n), recursion left and right</span><br><span class="line">    so O(n^2)</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// record the string frequency</span></span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; hash;</span><br><span class="line"><span class="built_in">vector</span>&lt;TreeNode*&gt; ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">dfs</span><span class="params">(TreeNode* node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!node) <span class="keyword">return</span> <span class="string">" "</span>;</span><br><span class="line">    <span class="built_in">string</span> left = dfs(node-&gt;left);</span><br><span class="line">    <span class="built_in">string</span> right = dfs(node-&gt;right);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">string</span> s = to_string(node-&gt;val) + <span class="string">','</span> + left + <span class="string">','</span> + right;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (++hash[s] == <span class="number">2</span>) ans.push_back(node);</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;TreeNode*&gt; <span class="title">findDuplicateSubtrees</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">    dfs(root);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="290-Word-Pattern"><a href="#290-Word-Pattern" class="headerlink" title="290. Word Pattern"></a><a href="https://leetcode.com/problems/word-pattern/" target="_blank" rel="noopener">290. Word Pattern</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Input: pattern &#x3D; &quot;abba&quot;, str &#x3D; &quot;dog cat cat dog&quot;</span><br><span class="line">Output: true</span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input:pattern &#x3D; &quot;abba&quot;, str &#x3D; &quot;dog cat cat fish&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. each word map to specific string</span><br><span class="line">   string map to specific word</span><br><span class="line">   worng: b -&gt; bc, c-&gt;bc</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">wordPattern</span><span class="params">(<span class="built_in">string</span> pattern, <span class="built_in">string</span> str)</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">stringstream</span> <span class="title">raw</span><span class="params">(str)</span></span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; words;</span><br><span class="line">    <span class="built_in">string</span> <span class="keyword">word</span>;</span><br><span class="line">    <span class="keyword">while</span> (raw &gt;&gt; <span class="keyword">word</span>) words.push_back(<span class="keyword">word</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pattern.<span class="built_in">size</span>() != words.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>, <span class="built_in">string</span>&gt; patString;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>, <span class="keyword">char</span>&gt; stringPat;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; words.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">char</span> c = pattern[i];</span><br><span class="line">        <span class="built_in">string</span> s = words[i];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!patString.count(c)) patString[c] = s;</span><br><span class="line">        <span class="keyword">if</span> (!stringPat.count(s)) stringPat[s] = c;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (patString[c] != s || stringPat[s] != c) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="554-Brick-Wall"><a href="#554-Brick-Wall" class="headerlink" title="554. Brick Wall"></a><a href="https://leetcode.com/problems/brick-wall/" target="_blank" rel="noopener">554. Brick Wall</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. record the max count of same length</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">leastBricks</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; wall)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; hash;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> blocks : wall) &#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// each row</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i + <span class="number">1</span> &lt; blocks.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            sum += blocks[i];</span><br><span class="line">            hash[sum]++;</span><br><span class="line">            res = <span class="built_in">max</span>(res, hash[sum]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> wall.<span class="built_in">size</span>() - res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="149-Max-Points-on-a-Line"><a href="#149-Max-Points-on-a-Line" class="headerlink" title="149. Max Points on a Line"></a><a href="https://leetcode.com/problems/max-points-on-a-line/" target="_blank" rel="noopener">149. Max Points on a Line</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. set a point, record the slop</span><br><span class="line">2. if vertical slop &#x3D; infinite, duplicate</span><br><span class="line">3. If the last one is duplicate :</span><br><span class="line">   need two loop, frist to find the duplicate and vertical</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxPoints</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; points)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (points.empty()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; points.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> vertical = <span class="number">1</span>, duplicate = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// duplicate, vertical</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; points.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (points[i][<span class="number">0</span>] == points[j][<span class="number">0</span>]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (points[i][<span class="number">1</span>] == points[j][<span class="number">1</span>]) duplicate++;</span><br><span class="line">            vertical++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// slop</span></span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">long</span> <span class="keyword">double</span>, <span class="keyword">int</span>&gt; hash;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; points.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (points[i][<span class="number">0</span>] != points[j][<span class="number">0</span>]) &#123;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">double</span> slop = (<span class="keyword">long</span> <span class="keyword">double</span>) (points[i][<span class="number">1</span>] - points[j][<span class="number">1</span>]) / (points[i][<span class="number">0</span>] - points[j][<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">if</span> (hash.count(slop)) hash[slop]++;</span><br><span class="line">            <span class="keyword">else</span> hash[slop] = <span class="number">2</span>;</span><br><span class="line">            res = <span class="built_in">max</span>(res, duplicate + hash[slop]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// need to compare choose the vertical or slop</span></span><br><span class="line">    res = <span class="built_in">max</span>(res, vertical);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="355-Design-Twitter"><a href="#355-Design-Twitter" class="headerlink" title="355. Design Twitter"></a><a href="https://leetcode.com/problems/design-twitter/" target="_blank" rel="noopener">355. Design Twitter</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&gt; posts; <span class="comment">// UserID, &lt;postDate, postID&gt;</span></span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="built_in">unordered_set</span>&lt;<span class="keyword">int</span>&gt;&gt; follows; <span class="comment">// UserID map to follows</span></span><br><span class="line"><span class="keyword">int</span> id = <span class="number">0</span>; <span class="comment">// postDate</span></span><br><span class="line">Twitter() &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Compose a new tweet. */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postTweet</span><span class="params">(<span class="keyword">int</span> userId, <span class="keyword">int</span> tweetId)</span> </span>&#123;</span><br><span class="line">    posts[userId].push_back(make_pair(id++, tweetId)); <span class="comment">// postDate++</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent. */</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">getNewsFeed</span><span class="params">(<span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// find all the post he posted</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; ps;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> t : posts[userId]) ps.push_back(t);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// find all the post his followee posts</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> follow : follows[userId])</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> t : posts[follow])</span><br><span class="line">            ps.push_back(t);</span><br><span class="line">    </span><br><span class="line">    sort(ps.rbegin(), ps.rend()); <span class="comment">// id greater, date newer, so reverse begin</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span> &amp;&amp; i &lt; ps.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        res.push_back(ps[i].second); <span class="comment">// postID</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Follower follows a followee. If the operation is invalid, it should be a no-op. */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">follow</span><span class="params">(<span class="keyword">int</span> followerId, <span class="keyword">int</span> followeeId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (followerId != followeeId) &#123;</span><br><span class="line">        follows[followerId].insert(followeeId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unfollow</span><span class="params">(<span class="keyword">int</span> followerId, <span class="keyword">int</span> followeeId)</span> </span>&#123;</span><br><span class="line">    follows[followerId].erase(followeeId);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="128-Longest-Consecutive-Sequence"><a href="#128-Longest-Consecutive-Sequence" class="headerlink" title="128. Longest Consecutive Sequence"></a><a href="https://leetcode.com/problems/longest-consecutive-sequence/" target="_blank" rel="noopener">128. Longest Consecutive Sequence</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Given an unsorted array of integers, find the length of the longest consecutive elements sequence.</span><br><span class="line"></span><br><span class="line">Your algorithm should run in O(n) complexity.</span><br><span class="line"></span><br><span class="line">Example:</span><br><span class="line"></span><br><span class="line">Input: [100, 4, 200, 1, 3, 2]</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. Because it is consecutive, hash[x-1] is the number of LEFT consecutive points</span><br><span class="line">    hash[x+1] is the number of RIGHT consecutive points</span><br><span class="line"></span><br><span class="line">2. hash[x-left] &#x3D; during the left to x, the nubmer of points</span><br><span class="line">   hash[x+right] &#x3D; during the x to right+x, the numbr of points</span><br><span class="line">   hash[x+right] can be seen as x+right+1 point hash[x-left]</span><br><span class="line">   现在终点可以看成下一段的起点</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">longestConsecutive</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; hash; <span class="comment">// key: idnex, value : val</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> x : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hash[x]) <span class="keyword">continue</span>; <span class="comment">// repeat</span></span><br><span class="line">            hash[x] = <span class="number">1</span>; <span class="comment">// itself, mark</span></span><br><span class="line">            <span class="keyword">int</span> left = hash[x<span class="number">-1</span>]; <span class="comment">// the number points of left</span></span><br><span class="line">            <span class="keyword">int</span> right = hash[x+<span class="number">1</span>]; <span class="comment">// the number points of right</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// update </span></span><br><span class="line">            hash[x-left] = left+right+<span class="number">1</span>;</span><br><span class="line">            hash[x+right] = left+right+<span class="number">1</span>;</span><br><span class="line">            res = <span class="built_in">max</span>(res, left+right+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;350-Intersection-of-Two-Arrays-II&quot;&gt;&lt;a href=&quot;#350-Intersection-of-Two-Arrays-II&quot; class=&quot;headerlink&quot; title=&quot;350. Intersection of Two A
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="Hash Table" scheme="http://yoursite.com/tags/Hash-Table/"/>
    
  </entry>
  
  <entry>
    <title>sort (0)</title>
    <link href="http://yoursite.com/2020/02/14/sort%20(0)/"/>
    <id>http://yoursite.com/2020/02/14/sort%20(0)/</id>
    <published>2020-02-14T23:55:00.000Z</published>
    <updated>2020-03-06T04:26:56.180Z</updated>
    
    <content type="html"><![CDATA[<h2 id="785-快速排序"><a href="#785-快速排序" class="headerlink" title="785. 快速排序"></a><a href="https://www.acwing.com/problem/content/787/" target="_blank" rel="noopener">785. 快速排序</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> q[N], n;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span> q[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">int</span> i = l - <span class="number">1</span>, j = r + <span class="number">1</span>, x = q[l + r &gt;&gt;<span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        <span class="keyword">do</span> i++; <span class="keyword">while</span> (q[i] &lt; x);</span><br><span class="line">        <span class="keyword">do</span> j--; <span class="keyword">while</span> (q[j] &gt; x);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) swap(q[i], q[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    quickSort(q, l, j), quickSort(q, j+<span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q[i]);</span><br><span class="line">    </span><br><span class="line">    quickSort(q, <span class="number">0</span>, n<span class="number">-1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">printf</span>(<span class="string">"%d "</span>, q[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="786-第k个数"><a href="#786-第k个数" class="headerlink" title="786. 第k个数"></a><a href="https://www.acwing.com/problem/content/788/" target="_blank" rel="noopener">786. 第k个数</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1. find the seperate point, q[l], q[(l+r)&#x2F;2], q[r]</span><br><span class="line">2. all the num in the left &lt;&#x3D; x, all the num in the right &gt;&#x3D; x</span><br><span class="line">3. recursion sort left and right </span><br><span class="line">n+ n&#x2F;2 + n&#x2F;4 + ...  &#x3D; n(1+ 1&#x2F;2+1&#x2F;4 + ...) &gt;&#x3D; 2n </span><br><span class="line">O(n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int sl &#x3D; j - l + 1; &#x2F;&#x2F; how many nums before the j</span><br><span class="line">need to plus one bc, itsefl.</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> q[l]; <span class="comment">// check if k &gt; n</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> x = q[l], i = l - <span class="number">1</span>, j = r + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        <span class="keyword">while</span> (q[++i] &lt; x);</span><br><span class="line">        <span class="keyword">while</span> (q[--j] &gt; x);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> ( i &lt; j) swap(q[i], q[j]);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//current sorted</span></span><br><span class="line">    <span class="comment">//not j - i, should j -l, like binary search</span></span><br><span class="line">    <span class="keyword">int</span> t = j - l + <span class="number">1</span>; <span class="comment">// how many nums before j, (+1 bc plus itself)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//index</span></span><br><span class="line">    <span class="keyword">if</span> ( k &lt;= t) <span class="keyword">return</span> quickSort(l, j, k); <span class="comment">//try to find in the left</span></span><br><span class="line">    <span class="comment">//should k-t, like binary search</span></span><br><span class="line">    <span class="keyword">return</span> quickSort(j+<span class="number">1</span>, r, k-t); <span class="comment">// try to find in the right</span></span><br><span class="line">    <span class="comment">// k-t bc, [j+1, r]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;785-快速排序&quot;&gt;&lt;a href=&quot;#785-快速排序&quot; class=&quot;headerlink&quot; title=&quot;785. 快速排序&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.acwing.com/problem/content/787/&quot; target=
      
    
    </summary>
    
    
      <category term="恰饭要紧" scheme="http://yoursite.com/categories/%E6%81%B0%E9%A5%AD%E8%A6%81%E7%B4%A7/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Dynamic Program (1)</title>
    <link href="http://yoursite.com/2020/02/14/Dynamic%20Program%20(1)/"/>
    <id>http://yoursite.com/2020/02/14/Dynamic%20Program%20(1)/</id>
    <published>2020-02-14T23:55:00.000Z</published>
    <updated>2020-03-11T04:56:05.260Z</updated>
    
    <content type="html"><![CDATA[<h2 id="329-Longest-Increasing-Path-in-a-Matrix"><a href="#329-Longest-Increasing-Path-in-a-Matrix" class="headerlink" title="329. Longest Increasing Path in a Matrix"></a><a href="https://www.acwing.com/solution/LeetCode/content/356/" target="_blank" rel="noopener">329. Longest Increasing Path in a Matrix</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; f; <span class="comment">// each start point, f to record the longest way</span></span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;, dy[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> row, col;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dp</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp;matrix)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (f[x][y] != <span class="number">-1</span>) <span class="keyword">return</span> f[x][y]; <span class="comment">// used</span></span><br><span class="line">    f[x][y] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> a = x + dx[i], b = y + dy[i];</span><br><span class="line">        <span class="keyword">if</span> (a &gt;= <span class="number">0</span> &amp;&amp; a &lt; row &amp;&amp; b &gt;= <span class="number">0</span> &amp;&amp; b &lt; col &amp;&amp; matrix[a][b] &gt; matrix[x][y]) &#123;</span><br><span class="line">            f[x][y] = <span class="built_in">max</span>(f[x][y], dp(a, b, matrix) + <span class="number">1</span>); <span class="comment">// can go deeper, dfs</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f[x][y];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">longestIncreasingPath</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (matrix.empty()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    row = matrix.<span class="built_in">size</span>(), col = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">    f = <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; (row, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(col, <span class="number">-1</span>)); <span class="comment">// -1 is not used</span></span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, dp(i, j, matrix));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="322-Coin-Change"><a href="#322-Coin-Change" class="headerlink" title="322. Coin Change"></a><a href="https://www.acwing.com/solution/LeetCode/content/348/" target="_blank" rel="noopener">322. Coin Change</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">coinChange</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; coins, <span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// enumerate the ways to generate i amount</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(amount+<span class="number">1</span>, amount+<span class="number">1</span>)</span></span>;</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> len = coins.<span class="built_in">size</span>(); </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i =  <span class="number">1</span>; i &lt;= amount; i++) &#123;</span><br><span class="line">        <span class="comment">// each coin to make i amount</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j++) &#123; <span class="comment">// connot use coin, bc will overflow, 1 -5</span></span><br><span class="line">            <span class="keyword">if</span> (coins[j] &lt;= i) </span><br><span class="line">                dp[i] = <span class="built_in">min</span>(dp[i], dp[i-coins[j]] + <span class="number">1</span>); <span class="comment">// dp[2 - 2] + 1, dp[2] = amount + 1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[amount] &gt; amount ? <span class="number">-1</span> : dp[amount]; <span class="comment">// coins = [2], dp[amount] = amount + 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="221-Maximal-Square"><a href="#221-Maximal-Square" class="headerlink" title="221. Maximal Square"></a><a href="https://www.acwing.com/solution/LeetCode/content/86/" target="_blank" rel="noopener">221. Maximal Square</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maximalSquare</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (matrix.empty()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> row = matrix.<span class="built_in">size</span>(), col = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">dp</span><span class="params">(row, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(col, <span class="number">0</span>))</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (matrix[i][j] == <span class="string">'0'</span>) &#123;</span><br><span class="line">                dp[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i][j] = <span class="number">1</span>; <span class="comment">// at least one </span></span><br><span class="line">                <span class="keyword">if</span> (i &gt;= <span class="number">1</span> &amp;&amp; j &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">                    dp[i][j] += <span class="built_in">min</span>(dp[i<span class="number">-1</span>][j], <span class="built_in">min</span>(dp[i<span class="number">-1</span>][j<span class="number">-1</span>], dp[i][j<span class="number">-1</span>]));</span><br><span class="line">                    <span class="comment">// dp[i][j] as the right down point, it limit to the </span></span><br><span class="line">                    <span class="comment">// other three point can generate square</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, dp[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans * ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="576-Out-of-Boundary-Paths"><a href="#576-Out-of-Boundary-Paths" class="headerlink" title="576. Out of Boundary Paths"></a><a href="https://www.acwing.com/solution/LeetCode/content/457/" target="_blank" rel="noopener">576. Out of Boundary Paths</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&gt; f;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;, dy[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>; <span class="comment">// larget answer</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findPaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">int</span> N, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// at most N times</span></span><br><span class="line">    f = <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&gt;(m, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;(n, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(N+<span class="number">1</span>, <span class="number">-1</span>)));</span><br><span class="line">    <span class="keyword">return</span> dp(m, n, N, i, j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dp</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">int</span> k, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> &amp;v = f[x][y][k]; <span class="comment">// at(x,y) move at most N times, paths</span></span><br><span class="line">    <span class="keyword">if</span> (v != <span class="number">-1</span>) <span class="keyword">return</span> v; <span class="comment">// used, not need to calculate again, otherwise -&gt;O(n^3)</span></span><br><span class="line">    v = <span class="number">0</span>; <span class="comment">// not use, set it to used</span></span><br><span class="line">    <span class="keyword">if</span> (!k) <span class="keyword">return</span> v; <span class="comment">//Cannot move, return 0 path</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> a = x + dx[i], b = y + dy[i];</span><br><span class="line">        <span class="keyword">if</span> (a &lt; <span class="number">0</span> || a == m || b &lt; <span class="number">0</span> || b == n) &#123;</span><br><span class="line">            v++; <span class="comment">//move out, so it is  a path</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            v += dp(m, n, k<span class="number">-1</span>, a, b); <span class="comment">// go deeper</span></span><br><span class="line">        &#125;</span><br><span class="line">        v %= mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="91-Decode-Ways"><a href="#91-Decode-Ways" class="headerlink" title="91. Decode Ways"></a><a href="https://www.acwing.com/solution/LeetCode/content/173/" target="_blank" rel="noopener">91. Decode Ways</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> len = s.<span class="built_in">size</span>();</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(len+<span class="number">1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">dp[<span class="number">0</span>] = <span class="number">1</span>; <span class="comment">// for convenience</span></span><br><span class="line"><span class="comment">// i start from 1, bc dp[i-1], overflow</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span>  i = <span class="number">1</span>; i &lt;= len; i++) &#123;</span><br><span class="line">    <span class="comment">//one alpha</span></span><br><span class="line">    <span class="keyword">if</span> (s[i<span class="number">-1</span>] - <span class="string">'0'</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        dp[i] += dp[i<span class="number">-1</span>]; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// two alpha</span></span><br><span class="line">    <span class="keyword">if</span> (i &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> t = ((s[i<span class="number">-2</span>]-<span class="string">'0'</span>)*<span class="number">10</span> + s[i<span class="number">-1</span>] - <span class="string">'0'</span>);</span><br><span class="line">        <span class="keyword">if</span> (t &gt;= <span class="number">10</span> &amp;&amp; t &lt;= <span class="number">26</span>) &#123;</span><br><span class="line">            dp[i] += dp[i<span class="number">-2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[len];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="264-Ugly-Number-II"><a href="#264-Ugly-Number-II" class="headerlink" title="264. Ugly Number II"></a><a href="https://www.acwing.com/solution/LeetCode/content/286/" target="_blank" rel="noopener">264. Ugly Number II</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">nthUglyNumber</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.push_back(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = <span class="number">0</span>; <span class="comment">// pointer to 2, 3, 5</span></span><br><span class="line">    <span class="keyword">while</span> (--n) &#123;</span><br><span class="line">        <span class="keyword">int</span> t = <span class="built_in">min</span>(q[i] * <span class="number">2</span>, <span class="built_in">min</span>(q[j]*<span class="number">3</span>, q[k]*<span class="number">5</span>));</span><br><span class="line">        q.push_back(t);</span><br><span class="line">        <span class="keyword">if</span> (t == q[i]*<span class="number">2</span>) i++;</span><br><span class="line">        <span class="keyword">if</span> (t == q[j]*<span class="number">3</span>) j++;</span><br><span class="line">        <span class="keyword">if</span> (t == q[k]*<span class="number">5</span>) k++;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">return</span> q.back();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 由于丑数的因子也必定是丑数，它一定是某个丑数乘2、3、5得到的，因此我们可以采用动态规划的思想，利用前面已经得到的丑数序列来得到之后的丑数，而问题的关键在于如何确定状态转移方程。由于小的丑数乘5不一定比大的丑数乘2要小，我们没法直接使用目前最大的丑数来乘2、3、5顺序得到更大的丑数。不过，我们可以确定的是，小的丑陋数乘2，肯定小于大的丑陋数乘2。所以我们使用三个指针，分别记录乘2、3、5得出的目前最大丑陋数，而新的丑数就是这三个目前最大丑数中最小的那个，那么就需要更新被选中的丑数的指针，获得新的三个目前最大丑数，依次类推，从而得到最终结果。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 时间复杂度分析：需要维护3个指针，从1到n遍历，复杂度为O(n)O(n)。</span></span><br></pre></td></tr></table></figure><h2 id="115-Distinct-Subsequences"><a href="#115-Distinct-Subsequences" class="headerlink" title="115. Distinct Subsequences"></a><a href="https://www.acwing.com/solution/LeetCode/content/203/" target="_blank" rel="noopener">115. Distinct Subsequences</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//f[i][j] : s[i] == t[j] forms</span></span><br><span class="line"><span class="comment">// f[i][j] = f[i-1][j-1], s[i]==t[j]</span></span><br><span class="line"><span class="comment">// f[i][j] = f[i-1][j], s[i] not matcht[j] :</span></span><br><span class="line"><span class="comment">// mutex</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">numDistinct</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sLen = s.<span class="built_in">size</span>(), tLen = t.<span class="built_in">size</span>();</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span> &gt;&gt; <span class="title">f</span><span class="params">(sLen+<span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;(tLen+<span class="number">1</span>))</span></span>; <span class="comment">// f[0] has means, so over 1, n+1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// all behave i do not match j, so 1 ways(after i match)</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= sLen; i++) f[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sLen; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= tLen; j++) &#123;</span><br><span class="line">            f[i][j] = f[i<span class="number">-1</span>][j]; <span class="comment">// do not match</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (s[i<span class="number">-1</span>] == t[j<span class="number">-1</span>]) f[i][j] += f[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f[sLen][tLen];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="132-Palindrome-Partitioning-II"><a href="#132-Palindrome-Partitioning-II" class="headerlink" title="132. Palindrome Partitioning II"></a><a href="https://www.acwing.com/solution/LeetCode/content/227/" target="_blank" rel="noopener">132. Palindrome Partitioning II</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minCut</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;f(n + <span class="number">1</span>);</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;&gt; <span class="title">st</span><span class="params">(n, <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;(n, <span class="literal">false</span>))</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt;= <span class="number">0</span>; j -- )</span><br><span class="line">            <span class="keyword">if</span> (i - j &lt;= <span class="number">1</span>) st[j][i] = s[j] == s[i];</span><br><span class="line">            <span class="keyword">else</span> st[j][i] = s[j] == s[i] &amp;&amp; st[j + <span class="number">1</span>][i - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        f[i] = INT_MAX;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j ++ )</span><br><span class="line">            <span class="keyword">if</span> (st[j][i - <span class="number">1</span>])</span><br><span class="line">                f[i] = <span class="built_in">min</span>(f[i], f[j] + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(<span class="number">0</span>, f[n] - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;329-Longest-Increasing-Path-in-a-Matrix&quot;&gt;&lt;a href=&quot;#329-Longest-Increasing-Path-in-a-Matrix&quot; class=&quot;headerlink&quot; title=&quot;329. Longest I
      
    
    </summary>
    
    
      <category term="恰饭要紧" scheme="http://yoursite.com/categories/%E6%81%B0%E9%A5%AD%E8%A6%81%E7%B4%A7/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>binary-stack-queue (0)</title>
    <link href="http://yoursite.com/2020/02/14/title:BinarySearch-stack-queue/"/>
    <id>http://yoursite.com/2020/02/14/title:BinarySearch-stack-queue/</id>
    <published>2020-02-14T23:55:00.000Z</published>
    <updated>2020-02-24T06:07:13.919Z</updated>
    
    <content type="html"><![CDATA[<p>【模版】(<a href="https://www.acwing.com/blog/content/277/" target="_blank" rel="noopener">https://www.acwing.com/blog/content/277/</a>)</p><h2 id="69-Sqrt-x"><a href="#69-Sqrt-x" class="headerlink" title="69. Sqrt(x)"></a><a href="https://leetcode.com/problems/sqrtx/" target="_blank" rel="noopener">69. Sqrt(x)</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: 4</span><br><span class="line">Output: 2</span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: 8</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: The square root of 8 is 2.82842..., and since </span><br><span class="line">             the decimal part is truncated, 2 is returned.</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mySqrt</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, r = x;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> mid = (l + r &gt;&gt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (mid*mid*<span class="number">1l</span>l &lt;=  x) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>; <span class="comment">// let r including target</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="34-Find-First-and-Last-Position-of-Element-in-Sorted-Array"><a href="#34-Find-First-and-Last-Position-of-Element-in-Sorted-Array" class="headerlink" title="34. Find First and Last Position of Element in Sorted Array"></a><a href="https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/" target="_blank" rel="noopener">34. Find First and Last Position of Element in Sorted Array</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: nums &#x3D; [5,7,7,8,8,10], target &#x3D; 8</span><br><span class="line">Output: [3,4]</span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: nums &#x3D; [5,7,7,8,8,10], target &#x3D; 6</span><br><span class="line">Output: [-1,-1]</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">searchRange</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.empty()) <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; (&#123;<span class="number">-1</span>, <span class="number">-1</span>&#125;);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, r = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//find up = right, so else is l</span></span><br><span class="line">    <span class="keyword">while</span> ( l &lt; r) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &gt;= target) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (nums[r] != target) <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; (&#123;<span class="number">-1</span>, <span class="number">-1</span>&#125;);</span><br><span class="line">    </span><br><span class="line">    res.push_back(r);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// find down = left, so else is r, need to + 1</span></span><br><span class="line">    l = <span class="number">0</span>, r = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid  = l + r + <span class="number">1</span>&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &lt;= target) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    res.push_back(r); <span class="comment">// push (r) always</span></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="74-Search-a-2D-Matrix"><a href="#74-Search-a-2D-Matrix" class="headerlink" title="74. Search a 2D Matrix"></a><a href="https://leetcode.com/problems/search-a-2d-matrix/" target="_blank" rel="noopener">74. Search a 2D Matrix</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">matrix &#x3D; [</span><br><span class="line">  [1,   3,  5,  7],</span><br><span class="line">  [10, 11, 16, 20],</span><br><span class="line">  [23, 30, 34, 50]</span><br><span class="line">]</span><br><span class="line">target &#x3D; 3</span><br><span class="line">Output: true</span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input:</span><br><span class="line">matrix &#x3D; [</span><br><span class="line">  [1,   3,  5,  7],</span><br><span class="line">  [10, 11, 16, 20],</span><br><span class="line">  [23, 30, 34, 50]</span><br><span class="line">]</span><br><span class="line">target &#x3D; 13</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">searchMatrix</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (matrix.<span class="built_in">size</span>() == <span class="number">0</span> || matrix[<span class="number">0</span>].<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">int</span> n = matrix.<span class="built_in">size</span>(), m = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, r = n * m <span class="number">-1</span>; <span class="comment">// see it as one dimension</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// find up = right</span></span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// mid / m - &gt; row,  mid % m - &gt; col</span></span><br><span class="line">        <span class="keyword">if</span> (matrix[mid / m][mid % m] &gt;= target) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> matrix[r / m][r % m] == target;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="240-Search-a-2D-Matrix-II"><a href="#240-Search-a-2D-Matrix-II" class="headerlink" title="240. Search a 2D Matrix II"></a><a href="https://leetcode.com/problems/search-a-2d-matrix-ii/" target="_blank" rel="noopener">240. Search a 2D Matrix II</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [1,   4,  7, 11, 15],</span><br><span class="line">  [2,   5,  8, 12, 19],</span><br><span class="line">  [3,   6,  9, 16, 22],</span><br><span class="line">  [10, 13, 14, 17, 24],</span><br><span class="line">  [18, 21, 23, 26, 30]</span><br><span class="line">]</span><br><span class="line">Given target &#x3D; 5, return true.</span><br><span class="line"></span><br><span class="line">Given target &#x3D; 20, return false.</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">searchMatrix</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (matrix.empty()|| matrix[<span class="number">0</span>].empty()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = matrix[<span class="number">0</span>].<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (i &lt; matrix.<span class="built_in">size</span>() &amp;&amp; j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> t = matrix[i][j];</span><br><span class="line">        <span class="keyword">if</span> (t == target) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (t &gt; target) j--; <span class="comment">// delete col</span></span><br><span class="line">        <span class="keyword">else</span> i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="153-Find-Minimum-in-Rotated-Sorted-Array"><a href="#153-Find-Minimum-in-Rotated-Sorted-Array" class="headerlink" title="153. Find Minimum in Rotated Sorted Array"></a><a href="https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/" target="_blank" rel="noopener">153. Find Minimum in Rotated Sorted Array</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: [3,4,5,1,2] </span><br><span class="line">Output: 1</span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: [4,5,6,7,0,1,2]</span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findMin</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//if sorted</span></span><br><span class="line">    <span class="keyword">if</span> (nums[<span class="number">0</span>] &lt; nums.back()) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, r = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> ( l &lt; r) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// find down = left</span></span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &gt;= nums[<span class="number">0</span>]) l = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> r = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums[r];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="162-Find-Peak-Element"><a href="#162-Find-Peak-Element" class="headerlink" title="162. Find Peak Element"></a><a href="https://leetcode.com/problems/find-peak-element/" target="_blank" rel="noopener">162. Find Peak Element</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">You may imagine that nums[-1] &#x3D; nums[n] &#x3D; -∞.</span><br><span class="line"></span><br><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: nums &#x3D; [1,2,3,1]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: 3 is a peak element and your function should return the index number 2.</span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: nums &#x3D; [1,2,1,3,5,6,4]</span><br><span class="line">Output: 1 or 5 </span><br><span class="line">Explanation: Your function can return either index number 1 where the peak element is 2, </span><br><span class="line">             or index number 5 where the peak element is 6.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. nums[i] &gt; i+1 must exist a peak at right, otherwise it is acending, </span><br><span class="line">   then the most right is peak</span><br><span class="line">   nums[i-1] &gt; nums[i], must exist a peak at left, otherwise it is decreasing, </span><br><span class="line">   then the most left is peak</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findPeakElement</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.<span class="built_in">size</span>() == <span class="number">1</span> || nums[<span class="number">0</span>] &gt; nums[<span class="number">1</span>] ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, r = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r  + <span class="number">1</span>&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &gt; nums[mid<span class="number">-1</span>]) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;【模版】(&lt;a href=&quot;https://www.acwing.com/blog/content/277/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.acwing.com/blog/content/277/&lt;/a&gt;)&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="binary" scheme="http://yoursite.com/tags/binary/"/>
    
      <category term="stack" scheme="http://yoursite.com/tags/stack/"/>
    
      <category term="heap" scheme="http://yoursite.com/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>Hash Table (0)</title>
    <link href="http://yoursite.com/2020/02/13/title:%20Hash%20Table%20(0)/"/>
    <id>http://yoursite.com/2020/02/13/title:%20Hash%20Table%20(0)/</id>
    <published>2020-02-13T23:55:00.000Z</published>
    <updated>2020-02-21T02:46:23.153Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Two-Sum"><a href="#1-Two-Sum" class="headerlink" title="1. Two Sum"></a><a href="https://leetcode.com/problems/two-sum/" target="_blank" rel="noopener">1. Two Sum</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Given nums &#x3D; [2, 7, 11, 15], target &#x3D; 9,</span><br><span class="line"></span><br><span class="line">Because nums[0] + nums[1] &#x3D; 2 + 7 &#x3D; 9,</span><br><span class="line">return [0, 1].</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">twoSum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; hash;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> t = target - nums[i];</span><br><span class="line">        <span class="keyword">if</span> (hash.count(t)) <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(&#123;hash[t], i&#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// careful here</span></span><br><span class="line">        hash[nums[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="454-4Sum-II"><a href="#454-4Sum-II" class="headerlink" title="454. 4Sum II"></a><a href="https://leetcode.com/problems/4sum-ii/" target="_blank" rel="noopener">454. 4Sum II</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">A &#x3D; [ 1, 2]</span><br><span class="line">B &#x3D; [-2,-1]</span><br><span class="line">C &#x3D; [-1, 2]</span><br><span class="line">D &#x3D; [ 0, 2]</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">2</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">The two tuples are:</span><br><span class="line">1. (0, 0, 0, 1) -&gt; A[0] + B[0] + C[0] + D[1] &#x3D; 1 + (-2) + (-1) + 2 &#x3D; 0</span><br><span class="line">2. (1, 1, 0, 0) -&gt; A[1] + B[1] + C[0] + D[0] &#x3D; 2 + (-1) + (-1) + 0 &#x3D; 0</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">It is euqal to find the opposite value of A+B</span><br><span class="line">Bc, A+B + C+D &#x3D; 0 &#x3D;&gt; A+B &#x3D; -C-D</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fourSumCount</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; B, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; C, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; D)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; hash;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> a : A)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> b : B)</span><br><span class="line">            hash[a+b]++;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> c : C)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> d : D)</span><br><span class="line">            res += hash[-c-d];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="560-Subarray-Sum-Equals-K"><a href="#560-Subarray-Sum-Equals-K" class="headerlink" title="560. Subarray Sum Equals K"></a><a href="https://leetcode.com/problems/subarray-sum-equals-k/" target="_blank" rel="noopener">560. Subarray Sum Equals K</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Given an array of integers and an integer k, you need to find the total number of continuous subarrays whose sum equals to k.</span><br><span class="line">Input:nums &#x3D; [1,1,1], k &#x3D; 2</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">前缀合思想</span><br><span class="line">Need to find sum[j] - sum[i] &#x3D; k -&gt; hash[sum-k]</span><br><span class="line">use hash table to record previous sum</span><br><span class="line">hash[sum]++;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">subarraySum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; hash;</span><br><span class="line">    </span><br><span class="line">    hash[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// if the previous two meet the requirement</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> num : nums) &#123;</span><br><span class="line">        sum += num;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// sum[j] - sum[i] = k</span></span><br><span class="line">        res += hash[sum-k];</span><br><span class="line">        hash[sum]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="525-Contiguous-Array"><a href="#525-Contiguous-Array" class="headerlink" title="525. Contiguous Array"></a><a href="https://leetcode.com/problems/contiguous-array/" target="_blank" rel="noopener">525. Contiguous Array</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Example 1:</span><br><span class="line">Input: [0,1]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: [0, 1] is the longest contiguous subarray with equal number of 0 and 1.</span><br><span class="line">Example 2:</span><br><span class="line">Input: [0,1,0]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 0 -&gt; -1, 1 -&gt; 1, convert question to find the length previous sum &#x3D; 0</span><br><span class="line">2. use hash table to record the first index of previous sum &#x3D; 0;</span><br><span class="line">3. the max length &#x3D; i - previous sum index</span><br><span class="line">   res &#x3D; max(i-index, res)</span><br><span class="line">4. hash[0] &#x3D; -1 bc [0,1] - &gt; i &#x3D; 1, i-hash[0] &#x3D; 2</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findMaxLength</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; hash;</span><br><span class="line">    hash[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>, res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        sum += nums[i] ? <span class="number">1</span> : <span class="number">-1</span>; <span class="comment">// 0 -&gt; -1, 1 -&gt; 1</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//if have</span></span><br><span class="line">        <span class="keyword">if</span> (hash.count(sum)) res = <span class="built_in">max</span>(res, i - hash[sum]);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//not have, add it into hashtable</span></span><br><span class="line">        <span class="keyword">else</span> hash[sum] = i;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="187-Repeated-DNA-Sequences"><a href="#187-Repeated-DNA-Sequences" class="headerlink" title="187. Repeated DNA Sequences"></a><a href="https://leetcode.com/problems/repeated-dna-sequences/" target="_blank" rel="noopener">187. Repeated DNA Sequences</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: s &#x3D; &quot;AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT&quot;</span><br><span class="line"></span><br><span class="line">Output: [&quot;AAAAACCCCC&quot;, &quot;CCCCCAAAAA&quot;]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. key is the sub string, value is the times it appear</span><br><span class="line">2. ++hash[sub] : add into hash, if it &#x3D;&#x3D; 1, so it&#39;s the second times it appear</span><br><span class="line">    since we have one sub now, and another is saved in the hash table</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">findRepeatedDnaSequences</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; hash;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; res;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i + <span class="number">10</span> &lt;= s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="built_in">string</span> str = s.substr(i, <span class="number">10</span>);</span><br><span class="line">        hash[str]++;</span><br><span class="line">        <span class="keyword">if</span> (hash[str] == <span class="number">2</span>) res.push_back(str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="347-Top-K-Frequent-Elements"><a href="#347-Top-K-Frequent-Elements" class="headerlink" title="347. Top K Frequent Elements"></a><a href="https://leetcode.com/problems/top-k-frequent-elements/" target="_blank" rel="noopener">347. Top K Frequent Elements</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Given a non-empty array of integers, return the k most frequent elements.</span><br><span class="line"></span><br><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: nums &#x3D; [1,1,1,2,2,3], k &#x3D; 2</span><br><span class="line">Output: [1,2]</span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: nums &#x3D; [1], k &#x3D; 1</span><br><span class="line">Output: [1]</span><br><span class="line"></span><br><span class="line">**1 ≤ k ≤ number of unique elements.**</span><br><span class="line">**OUTPUT the k most frequency, e.g. k &#x3D; 2, two numbers, k &#x3D; 3, 3 numbers**</span><br><span class="line">**NOT K frequency**</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. [Counting sort](https:&#x2F;&#x2F;www.geeksforgeeks.org&#x2F;counting-sort&#x2F;), the value as it&#39;s index array index</span><br><span class="line">2. In the index array, the value is the index of the places index</span><br><span class="line">   remember to decrease</span><br><span class="line"></span><br><span class="line">3. In this question, the index is the frequency, use hashtable to record the frequency and number.</span><br><span class="line">4. Find the cut off, and before the cut off, add them to the res.</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">topKFrequent</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; hash;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// recored the frequency</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> t : nums) hash[t]++;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">    <span class="comment">// genereate array</span></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">arr</span><span class="params">(n+<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// place num in arr by the frequency</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> t : hash)</span><br><span class="line">        arr[t.second]++;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> cut = n, t = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (t &lt; k) t += arr[cut--];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> t : hash)</span><br><span class="line">        <span class="keyword">if</span> (t.second &gt; cut &amp;&amp; res.<span class="built_in">size</span>() &lt; k)</span><br><span class="line">            res.push_back(t.first);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-Two-Sum&quot;&gt;&lt;a href=&quot;#1-Two-Sum&quot; class=&quot;headerlink&quot; title=&quot;1. Two Sum&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.com/problems/two-sum/&quot; target=&quot;_
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="Hash Table" scheme="http://yoursite.com/tags/Hash-Table/"/>
    
  </entry>
  
  <entry>
    <title>Pointers and Dynamic Memory Allocation(2)</title>
    <link href="http://yoursite.com/2020/02/11/title:%20%20Pointers%20and%20Dynamic%20Memory%20%202/"/>
    <id>http://yoursite.com/2020/02/11/title:%20%20Pointers%20and%20Dynamic%20Memory%20%202/</id>
    <published>2020-02-12T01:55:00.000Z</published>
    <updated>2020-02-13T19:07:15.217Z</updated>
    
    <content type="html"><![CDATA[<h2 id="String-functions-with-pointers"><a href="#String-functions-with-pointers" class="headerlink" title="String functions with pointers"></a>String functions with pointers</h2><h3 id="strcmp-strcpy"><a href="#strcmp-strcpy" class="headerlink" title="strcmp, strcpy"></a>strcmp, strcpy</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> cmp1, cmp2;</span><br><span class="line"><span class="keyword">char</span> string1[<span class="number">10</span>] = <span class="string">"abcxyz"</span>;</span><br><span class="line"><span class="keyword">char</span> string2[<span class="number">10</span>] = <span class="string">"xyz"</span>;</span><br><span class="line"><span class="keyword">char</span> newText[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">char</span>* subStr = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">cmp1 = <span class="built_in">strcmp</span>(string1, string2);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"strcmp of \""</span> &lt;&lt; string1 &lt;&lt; <span class="string">"\" and \""</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; string2 &lt;&lt; <span class="string">"\" returned "</span> &lt;&lt; cmp1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">subStr = &amp;string1[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">cmp2 = <span class="built_in">strcmp</span>(subStr, <span class="string">"xyz"</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"strcmp of \""</span> &lt;&lt; subStr;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\" and \"xyz\" returned "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; cmp2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">strcpy</span>(newText, subStr);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"newText is now \""</span> &lt;&lt; newText &lt;&lt; <span class="string">"\""</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p><strong>OUTPUT</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">strcmp of &quot;abcxyz&quot; and &quot;xyz&quot; returned -23</span><br><span class="line">strcmp of &quot;xyz&quot; and &quot;xyz&quot; returned 0</span><br><span class="line">newText is now &quot;xyz&quot;</span><br></pre></td></tr></table></figure><h3 id="strchr-strrchr-strstr"><a href="#strchr-strrchr-strstr" class="headerlink" title="strchr(), strrchr(), strstr()"></a>strchr(), strrchr(), strstr()</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> orgName[<span class="number">100</span>] = <span class="string">"The Dept. of Redundancy Dept."</span>; </span><br><span class="line"><span class="keyword">char</span> newText[<span class="number">100</span>]; </span><br><span class="line"><span class="keyword">char</span>* subString = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strchr</span>(orgName, <span class="string">'D'</span>) != <span class="literal">nullptr</span>) &#123;  <span class="comment">// 'D' exists in orgName?</span></span><br><span class="line">   subString = <span class="built_in">strchr</span>(orgName, <span class="string">'D'</span>);    <span class="comment">// Points to first 'D'</span></span><br><span class="line">   <span class="built_in">strcpy</span>(newText, subString);          <span class="comment">// newText now "Dept. of Redundancy Dept."</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strrchr</span>(orgName, <span class="string">'D'</span>) != <span class="literal">nullptr</span>) &#123;   <span class="comment">// 'D' exists in orgName?</span></span><br><span class="line">   subString = <span class="built_in">strrchr</span>(orgName, <span class="string">'D'</span>);     <span class="comment">// Points to last 'D'</span></span><br><span class="line">   <span class="built_in">strcpy</span>(newText, subString);            <span class="comment">// newText now "Dept."</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">subString = <span class="built_in">strstr</span>(orgName, <span class="string">"Dept"</span>); <span class="comment">// Points to first 'D'</span></span><br><span class="line"><span class="keyword">if</span> (subString != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">   <span class="built_in">strcpy</span>(newText, subString);       <span class="comment">// newText now "Dept. of Redundancy Dept."</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Memory-regions-Heap-Stack"><a href="#Memory-regions-Heap-Stack" class="headerlink" title="Memory regions: Heap/Stack"></a>Memory regions: Heap/Stack</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-20.png" alt="upload successful" title="">                </div>                <div class="image-caption">upload successful</div>            </figure><h2 id="Destructors"><a href="#Destructors" class="headerlink" title="Destructors"></a>Destructors</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-21.png" alt="upload successful" title="">                </div>                <div class="image-caption">upload successful</div>            </figure><h3 id="When-the-destructors-call"><a href="#When-the-destructors-call" class="headerlink" title="When the destructors call"></a>When the destructors call</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-22.png" alt="upload successful" title="">                </div>                <div class="image-caption">upload successful</div>            </figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">listToDisplay is passed by reference,</span><br><span class="line"> so the destructor is not called at the end of the DisplayList function.</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DisplayList</span><span class="params">(LinkedList&amp; listToDisplay)</span> </span>&#123;</span><br><span class="line">   LinkedListNode* node = listToDisplay.head;</span><br><span class="line">   <span class="keyword">while</span>(node) &#123;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; node-&gt;data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">      node = node-&gt;next;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">listToDisplay is not passed by pointer or by reference and goes out of scope at the end of the DisplayList function. </span><br><span class="line">Thus, listToDisplay&#39;s destructor is called.</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DisplayList</span><span class="params">(LinkedList listToDisplay)</span> </span>&#123;</span><br><span class="line">   LinkedListNode* node = listToDisplay.head;</span><br><span class="line">   <span class="keyword">while</span>(node) &#123;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; node-&gt;data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">      node = node-&gt;next;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Memory-leaks"><a href="#Memory-leaks" class="headerlink" title="Memory leaks"></a>Memory leaks</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-23.png" alt="upload successful" title="">                </div>                <div class="image-caption">upload successful</div>            </figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   MyClass* ptrOne = <span class="keyword">new</span> MyClass;</span><br><span class="line">   MyClass* ptrTwo = <span class="keyword">new</span> MyClass;</span><br><span class="line"></span><br><span class="line">   ptrOne = ptrTwo;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SO MAKE SURE INITIALIZE DESTRUCTOR</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      MyClass() &#123;</span><br><span class="line">         subObject = <span class="keyword">new</span> <span class="keyword">int</span>;</span><br><span class="line">         *subObject = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      ~MyClass() &#123;</span><br><span class="line">         <span class="keyword">delete</span> subObject;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">      <span class="keyword">int</span>* subObject;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   MyClass* ptrOne = <span class="keyword">new</span> MyClass;</span><br><span class="line">   MyClass* ptrTwo = <span class="keyword">new</span> MyClass;</span><br><span class="line">   ...</span><br><span class="line"></span><br><span class="line">   <span class="keyword">delete</span> ptrOne;</span><br><span class="line">   ptrOne = ptrTwo;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>```C++<br>Vector<int> cubes(intnumCubes){<br>    Vector<int> vec;<br>    for (inti= 0; i&lt; numCubes; i++)<br>        vec.add(i* i* i);<br>    return vec;<br>}</p><p>// It does, but there is an issue.<br>// The copy constructor of the Vector class is invoked because a value is being returned.<br>// We do not want to make copies of large objects. </p><p>Vector<int> &amp;cubes(intnumCubes){<br>    Vector<int> vec;<br>    for (inti= 0; i&lt; numCubes; i++)<br>        vec.add(i* i* i);<br>    return vec;<br>}</p><p>/* This is really reallybad.<br>The scope of vecis only within the function and once the function terminates the stack is cleaned up,<br>thus the reference to the memory location is destroyed.  */</p><p>Vector<int> <em>cubes(intnumCubes){<br>    Vector<int> vec;<br>    for (inti= 0; i&lt; numCubes; i++)<br>        vec.add(i</em> i* i);<br>    return vec;<br>}</p><p>/* This is really reallyreallybad.<br>The scope of vecis only within the function and once the function terminates the stack is cleaned up (all local variables are destroyed),<br>thus the reference to the memory location is destroyed.<br>Hence the pointer is pointing at a NULL reference which eventually will cause your program to crash.  */</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;String-functions-with-pointers&quot;&gt;&lt;a href=&quot;#String-functions-with-pointers&quot; class=&quot;headerlink&quot; title=&quot;String functions with pointers&quot;&gt;
      
    
    </summary>
    
    
      <category term="Program Language" scheme="http://yoursite.com/categories/Program-Language/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Greedy Algorithm (2)</title>
    <link href="http://yoursite.com/2020/02/10/Greedy%20Algorithm%20(2)/"/>
    <id>http://yoursite.com/2020/02/10/Greedy%20Algorithm%20(2)/</id>
    <published>2020-02-11T01:55:00.000Z</published>
    <updated>2020-02-18T23:56:23.188Z</updated>
    
    <content type="html"><![CDATA[<h2 id="376-Wiggle-Subsequence"><a href="#376-Wiggle-Subsequence" class="headerlink" title="376. Wiggle Subsequence"></a><a href="https://leetcode.com/problems/wiggle-subsequence/" target="_blank" rel="noopener">376. Wiggle Subsequence</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,7,4,9,2,5]</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: The entire sequence is a wiggle sequence.</span><br><span class="line"></span><br><span class="line">Input: [1,17,5,10,13,15,10,5,16,8]</span><br><span class="line">Output: 7</span><br><span class="line">Explanation: There are several subsequences that achieve this length. One is [1,17,10,13,10,16,8].</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">The longest subsequences will always start at first, to the last one.</span><br><span class="line">Since it is subsequence, not need to successive.</span><br><span class="line">Proof : [1, -1, -1, -2, 3, 2, 5, 5]</span><br><span class="line">[-1, -2, 3, 2, 5] can see as [1, -2, 3, 2, 5]</span><br><span class="line"></span><br><span class="line">Maintain two booleans to record the previous is incr or decr</span><br><span class="line">Maintain previous to determind whether cur is valid</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wiggleMaxLength</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">    <span class="keyword">if</span> len(nums) &lt; <span class="number">2</span> :</span><br><span class="line">        <span class="keyword">return</span> len(nums)</span><br><span class="line">    </span><br><span class="line">    incr, decr = <span class="literal">True</span>, <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    count = <span class="number">1</span></span><br><span class="line">    prev = nums[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> nums[<span class="number">1</span>:] :</span><br><span class="line">        <span class="keyword">if</span> num &lt; prev <span class="keyword">and</span> incr :</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            incr, decr = <span class="literal">False</span>, <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> num &gt; prev <span class="keyword">and</span> decr :</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            incr, decr = <span class="literal">True</span>, <span class="literal">False</span></span><br><span class="line">            </span><br><span class="line">        prev = num</span><br><span class="line">    <span class="keyword">return</span> count</span><br></pre></td></tr></table></figure><h2 id="406-Queue-Reconstruction-by-Height"><a href="#406-Queue-Reconstruction-by-Height" class="headerlink" title="406. Queue Reconstruction by Height"></a><a href="https://leetcode.com/problems/queue-reconstruction-by-height/" target="_blank" rel="noopener">406. Queue Reconstruction by Height</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Suppose you have a random list of people standing in a queue. Each person is described by a pair of integers (h, k), </span><br><span class="line">where h is the height of the person and k is the number of people in front of this person who have a height greater than or equal to h. </span><br><span class="line">Write an algorithm to reconstruct the queue.</span><br><span class="line"></span><br><span class="line">Input:</span><br><span class="line">[[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]]</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">[[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. sort increasing</span><br><span class="line">2. map people higher you to index -&gt; pop()</span><br><span class="line">    e.g [[4, 0], [5, 0]] : indexs : [0, 1] </span><br><span class="line">        pop(0) -&gt; 0 so indexs : [1]</span><br><span class="line">        pop(0) -&gt; 1</span><br><span class="line">        so pop will delete 0, and 1 will be at the index 0</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reconstructQueue</span><span class="params">(self, people: List[List[int]])</span> -&gt; List[List[int]]:</span></span><br><span class="line">    n = len(people)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> <span class="keyword">or</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> people</span><br><span class="line">    </span><br><span class="line">    res = [[]]*n</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#increasing</span></span><br><span class="line">    people.sort(key = <span class="keyword">lambda</span> x : (x[<span class="number">0</span>], -x[<span class="number">1</span>]))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#map of index</span></span><br><span class="line">    <span class="comment"># [0, 1, 2, 3] -&gt; pop(0) = 0 : [1, 2, 3]-&gt; pop(0) = 1: [2, 3]</span></span><br><span class="line">    indexs = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i, (_, pepHiger) <span class="keyword">in</span> enumerate(people) :</span><br><span class="line">        j = indexs.pop(pepHiger)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#j is how many people higer and before you</span></span><br><span class="line">        res[j] = people[i]</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="452-Minimum-Number-of-Arrows-to-Burst-Balloons"><a href="#452-Minimum-Number-of-Arrows-to-Burst-Balloons" class="headerlink" title="452. Minimum Number of Arrows to Burst Balloons"></a><a href="https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/" target="_blank" rel="noopener">452. Minimum Number of Arrows to Burst Balloons</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">[[10,16], [2,8], [1,6], [7,12]]</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">2</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">One way is to shoot one arrow for example at x &#x3D; 6 (bursting the balloons [2,8] and [1,6]) and another arrow at x &#x3D; 11 (bursting the other two balloons).</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findMinArrowShots</span><span class="params">(self, points: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">    points.sort(key = <span class="keyword">lambda</span> x : (x[<span class="number">1</span>]))</span><br><span class="line">    </span><br><span class="line">    res, right = <span class="number">0</span>, float(<span class="string">'-inf'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> point <span class="keyword">in</span> points : </span><br><span class="line">        <span class="comment">#new </span></span><br><span class="line">        <span class="keyword">if</span> right &lt; point[<span class="number">0</span>] :</span><br><span class="line">            res += <span class="number">1</span></span><br><span class="line">            right = point[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="402-Remove-K-Digits"><a href="#402-Remove-K-Digits" class="headerlink" title="402. Remove K Digits"></a><a href="https://leetcode.com/problems/remove-k-digits/" target="_blank" rel="noopener">402. Remove K Digits</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: num &#x3D; &quot;10200&quot;, k &#x3D; 1</span><br><span class="line">Output: &quot;200&quot;</span><br><span class="line">Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">res = []</span><br><span class="line">n = len(num)</span><br><span class="line"><span class="keyword">if</span> n == k : <span class="keyword">return</span> <span class="string">'0'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> num :</span><br><span class="line">    <span class="keyword">while</span> k <span class="keyword">and</span> res <span class="keyword">and</span> res[<span class="number">-1</span>] &gt; char :</span><br><span class="line">        res.pop()</span><br><span class="line">        k -= <span class="number">1</span></span><br><span class="line">    res.append(char)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> k :</span><br><span class="line">    res.pop()</span><br><span class="line">    k -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">''</span>.join(res).lstrip(<span class="string">'0'</span>) <span class="keyword">or</span> <span class="string">"0"</span><span class="comment">#remove leading 0, if "" need to return "0"</span></span><br></pre></td></tr></table></figure><h2 id="134-Gas-Station"><a href="#134-Gas-Station" class="headerlink" title="134. Gas Station"></a><a href="https://leetcode.com/problems/gas-station/" target="_blank" rel="noopener">134. Gas Station</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Input: </span><br><span class="line">gas  &#x3D; [1,2,3,4,5]</span><br><span class="line">cost &#x3D; [3,4,5,1,2]</span><br><span class="line"></span><br><span class="line">Output: 3</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank &#x3D; 0 + 4 &#x3D; 4</span><br><span class="line">Travel to station 4. Your tank &#x3D; 4 - 1 + 5 &#x3D; 8</span><br><span class="line">Travel to station 0. Your tank &#x3D; 8 - 2 + 1 &#x3D; 7</span><br><span class="line">Travel to station 1. Your tank &#x3D; 7 - 3 + 2 &#x3D; 6</span><br><span class="line">Travel to station 2. Your tank &#x3D; 6 - 4 + 3 &#x3D; 5</span><br><span class="line">Travel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.</span><br><span class="line">Therefore, return 3 as the starting index.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. brute force : for each station, run a loop</span><br><span class="line">2.  # for i to j, i can only to j, i+1 can also to j, but </span><br><span class="line">    # we don&#39;t need to try. bc when we start from i, and get to i+1</span><br><span class="line">    # we have more gas but still can only get to j.</span><br><span class="line">    # Now we start from i, we have less gas, so we cannot get further than j</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">canCompleteCircuit</span><span class="params">(self, gas: List[int], cost: List[int])</span> -&gt; int:</span></span><br><span class="line">    n = len(gas)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> :</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; n :</span><br><span class="line">        <span class="comment"># for each station</span></span><br><span class="line">        gasLeft = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> j &lt; n :</span><br><span class="line">            <span class="comment"># j start from 0 is the same as start from i+1, a loop</span></span><br><span class="line">            </span><br><span class="line">            k = (i+j) % n</span><br><span class="line">            gasLeft = gasLeft + gas[k] - cost[k]</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> gasLeft &lt; <span class="number">0</span> :</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> j &gt;= n :</span><br><span class="line">            <span class="comment"># the gasLeft can make a loop</span></span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">        i += j + <span class="number">1</span> <span class="comment">#for i to j, i can only to j, i+1 can also to j, but </span></span><br><span class="line">                <span class="comment"># we don't need to try. bc when we start from i, and get to i+1</span></span><br><span class="line">                <span class="comment"># we have more gas but still can only get to j.</span></span><br><span class="line">                <span class="comment">#Now we start from i, we have less gas, so we cannot get further than j</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;376-Wiggle-Subsequence&quot;&gt;&lt;a href=&quot;#376-Wiggle-Subsequence&quot; class=&quot;headerlink&quot; title=&quot;376. Wiggle Subsequence&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://le
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="greedy algorithm" scheme="http://yoursite.com/tags/greedy-algorithm/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Tree (0)</title>
    <link href="http://yoursite.com/2020/02/10/Tree%20(0)/"/>
    <id>http://yoursite.com/2020/02/10/Tree%20(0)/</id>
    <published>2020-02-11T01:55:00.000Z</published>
    <updated>2020-02-14T04:28:30.206Z</updated>
    
    <content type="html"><![CDATA[<h2 id="235-Lowest-Common-Ancestor-of-a-Binary-Search-Tree"><a href="#235-Lowest-Common-Ancestor-of-a-Binary-Search-Tree" class="headerlink" title="235. Lowest Common Ancestor of a Binary Search Tree"></a><a href="https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/" target="_blank" rel="noopener">235. Lowest Common Ancestor of a Binary Search Tree</a></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lowestCommonAncestor</span><span class="params">(self, root: <span class="string">'TreeNode'</span>, p: <span class="string">'TreeNode'</span>, q: <span class="string">'TreeNode'</span>)</span> -&gt; 'TreeNode':</span></span><br><span class="line">    <span class="keyword">if</span> p.val &lt; root.val <span class="keyword">and</span> q.val &lt; root.val :</span><br><span class="line">        <span class="keyword">return</span> self.lowestCommonAncestor(root.left, p, q)</span><br><span class="line">    <span class="keyword">elif</span> p.val &gt; root.val <span class="keyword">and</span> q.val &gt; root.val :</span><br><span class="line">        <span class="keyword">return</span> self.lowestCommonAncestor(root.right, p, q)</span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure><h2 id="236-Lowest-Common-Ancestor-of-a-Binary-Tree"><a href="#236-Lowest-Common-Ancestor-of-a-Binary-Tree" class="headerlink" title="236. Lowest Common Ancestor of a Binary Tree"></a><a href="https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/" target="_blank" rel="noopener">236. Lowest Common Ancestor of a Binary Tree</a></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">ans = <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lowestCommonAncestor</span><span class="params">(self, root: <span class="string">'TreeNode'</span>, p: <span class="string">'TreeNode'</span>, q: <span class="string">'TreeNode'</span>)</span> -&gt; 'TreeNode':</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">#LCA : find the node that p and q seperate</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(cur)</span> -&gt; 'boolean' :</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> cur :</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            </span><br><span class="line">            left = dfs(cur.left)</span><br><span class="line">            </span><br><span class="line">            <span class="comment">#if cur node is q or p, so don't need to dfs right</span></span><br><span class="line">            mid = cur == q <span class="keyword">or</span> cur == p</span><br><span class="line">            </span><br><span class="line">            right = dfs(cur.right)</span><br><span class="line">            </span><br><span class="line">            <span class="comment">#so don't need to dfs deep</span></span><br><span class="line">            <span class="keyword">if</span> mid+right+left &gt;= <span class="number">2</span> :</span><br><span class="line">                self.ans = cur</span><br><span class="line">            </span><br><span class="line">            <span class="comment">#bring the ans up to previous level</span></span><br><span class="line">            <span class="keyword">return</span> mid <span class="keyword">or</span> left <span class="keyword">or</span> right</span><br><span class="line">        </span><br><span class="line">        dfs(root)</span><br><span class="line">        <span class="keyword">return</span> self.ans</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;235-Lowest-Common-Ancestor-of-a-Binary-Search-Tree&quot;&gt;&lt;a href=&quot;#235-Lowest-Common-Ancestor-of-a-Binary-Search-Tree&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="tree" scheme="http://yoursite.com/tags/tree/"/>
    
  </entry>
  
</feed>
