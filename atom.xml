<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hi There</title>
  
  <subtitle>If people do not believe that mathematics is simple, it is only because they do not realize how complicated life is. – John von Neumann.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-02-10T02:34:09.276Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>isFibonacci</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Common errors make your program crash</title>
    <link href="http://yoursite.com/2020/02/07/Common-error-make-your-program-crash/"/>
    <id>http://yoursite.com/2020/02/07/Common-error-make-your-program-crash/</id>
    <published>2020-02-07T22:56:00.000Z</published>
    <updated>2020-02-10T02:34:09.276Z</updated>
    
    <content type="html"><![CDATA[<h2 id="10-2-Access-by-members-of-derived-classes"><a href="#10-2-Access-by-members-of-derived-classes" class="headerlink" title="10.2 Access by members of derived classes"></a>10.2 Access by members of derived classes</h2><p>The members of a derived class have access to the public members of the base class, but not to the private members of the base class.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Business</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">       ...</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">      <span class="built_in">string</span> name;</span><br><span class="line">      <span class="built_in">string</span> address;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Restaurant</span> :</span> <span class="keyword">public</span> Business &#123;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    </span><br><span class="line">       ...</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">void</span> <span class="title">DisplayRestaurant</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="built_in">cout</span> &lt;&lt; name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">         <span class="built_in">cout</span> &lt;&lt; address &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">         <span class="built_in">cout</span> &lt;&lt; <span class="string">" Rating: "</span> &lt;&lt; rating &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">      <span class="keyword">int</span> rating;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Solution :<br>A third access specifier is protected, which provides access to derived classes but not by anyone else. </p><p>But! Careful here : A third access specifier is protected, which provides access to derived classes but not by anyone else.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Business</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:    <span class="comment">// Members accessible by anyone</span></span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">PrintMembers</span><span class="params">()</span></span>;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">protected</span>: <span class="comment">// Members accessible by self and derived classes</span></span><br><span class="line">      <span class="built_in">string</span> name;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span>:   <span class="comment">// Members accessible only by self</span></span><br><span class="line">      <span class="built_in">string</span> address;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Restaurant</span> :</span> <span class="keyword">public</span> Business &#123;</span><br><span class="line">   ...</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// Attempted accesses</span></span><br><span class="line">   PrintMembers();             <span class="comment">// OK</span></span><br><span class="line">   name = <span class="string">"Gyro Hero"</span>;         <span class="comment">// OK    ("protected" above made this possible)</span></span><br><span class="line">   address = <span class="string">"5 Fifth St"</span>;     <span class="comment">// ERROR</span></span><br><span class="line">   </span><br><span class="line">   ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   ...</span><br><span class="line">   </span><br><span class="line">   Business business;</span><br><span class="line">   Restaurant restaurant;</span><br><span class="line">   </span><br><span class="line">   ...</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// Attempted accesses</span></span><br><span class="line">   business.PrintMembers();          <span class="comment">// OK</span></span><br><span class="line">   business.name  = <span class="string">"Gyro Hero"</span>;     <span class="comment">// ERROR (protected only applies to derived classes)</span></span><br><span class="line">   business.address = <span class="string">"5 Fifth St"</span>;  <span class="comment">// ERROR</span></span><br><span class="line">   </span><br><span class="line">   restaurant.PrintMembers();         <span class="comment">// OK</span></span><br><span class="line">   restaurant.name  = <span class="string">"Gyro Hero"</span>;    <span class="comment">// ERROR</span></span><br><span class="line">   restaurant.rating = <span class="number">5</span>;  <span class="comment">// ERROR</span></span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-3-Overriding-member-functions"><a href="#10-3-Overriding-member-functions" class="headerlink" title="10.3 Overriding member functions"></a>10.3 Overriding member functions</h2><p><strong>Overriding vs. overloading :</strong></p><p>In overloading, functions with the same name must have different parameter types. In overriding, a derived class member function takes precedence over a base class member function with the same name, regardless of the parameter types. Overloading is not performed if derived and base member functions have different parameter types; the member function of the derived class hides the member function of the base class.</p><p><strong>Restaurant’s GetDescription() must be identical to Business’s GetDescription() name, return type, and parameter list.</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Business</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      ...</span><br><span class="line">      <span class="function"><span class="built_in">string</span> <span class="title">GetDescription</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> name + <span class="string">" -- "</span> + address;</span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">   <span class="keyword">protected</span>:</span><br><span class="line">      <span class="built_in">string</span> name;</span><br><span class="line">      <span class="built_in">string</span> address;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Restaurant</span> :</span> <span class="keyword">public</span> Business &#123;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      ...</span><br><span class="line">      <span class="function"><span class="built_in">string</span> <span class="title">GetDescription</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> name + <span class="string">" -- "</span> + address + </span><br><span class="line">            <span class="string">"\n  Rating: "</span> + to_string(rating);</span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">      <span class="keyword">int</span> rating;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Or you can call it conveniently :</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Restaurant</span> :</span> <span class="keyword">public</span> Business &#123;</span><br><span class="line"></span><br><span class="line">   ...</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="built_in">string</span> <span class="title">GetDescription</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> Business::GetDescription() + <span class="string">"\n  Rating: "</span> + to_string(rating);</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>Without the prepended base class name, the call to GetDescription() refers to itself (a recursive call)</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">SetComputerStatus</span><span class="params">(<span class="built_in">string</span> cpuStatus, <span class="built_in">string</span> internetStatus)</span> </span>&#123;</span><br><span class="line">      cpuUsage = cpuStatus;</span><br><span class="line">      internet = internetStatus;</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">PrintStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"CPU: "</span> &lt;&lt; cpuUsage &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"Internet: "</span> &lt;&lt; internet &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">   <span class="built_in">string</span> cpuUsage;</span><br><span class="line">   <span class="built_in">string</span> internet;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Laptop</span> :</span> <span class="keyword">public</span> Computer &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">SetComputerStatus</span><span class="params">(<span class="built_in">string</span> cpuStatus, <span class="built_in">string</span> internetStatus, </span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="built_in">string</span> wifiStatus)</span> </span>&#123;</span><br><span class="line">      cpuUsage = cpuStatus;</span><br><span class="line">      internet = internetStatus;</span><br><span class="line">      wifiQuality = wifiStatus;</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">PrintStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      Computer::PrintStatus();</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"WiFi: "</span> &lt;&lt; wifiQuality &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   &#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;10-2-Access-by-members-of-derived-classes&quot;&gt;&lt;a href=&quot;#10-2-Access-by-members-of-derived-classes&quot; class=&quot;headerlink&quot; title=&quot;10.2 Acces
      
    
    </summary>
    
    
      <category term="Program language" scheme="http://yoursite.com/categories/Program-language/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Uniformed Search</title>
    <link href="http://yoursite.com/2020/02/06/Search/"/>
    <id>http://yoursite.com/2020/02/06/Search/</id>
    <published>2020-02-07T01:55:00.000Z</published>
    <updated>2020-02-10T02:20:29.630Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Search"><a href="#Search" class="headerlink" title="Search"></a>Search</h2><pre><code>a. In deterministic environments the search solution is a single sequence (list of actions)b. Stochastic environments need multiple sequences to account for all possible outcomes of actionsc. There are 5 parts to search:    1. Initial state    2. Actions possible at each state    3. Transition model (result of each action)    4. Goal test (are we there yet?)   5. Path costs/weights (not stored in states) (related to performance measure)</code></pre><p>   <img src="/images/pasted-0.png" alt="upload successful"></p><h2 id="Search-algorithm"><a href="#Search-algorithm" class="headerlink" title="Search algorithm"></a>Search algorithm</h2><pre><code>   BFS: FIFOThe search algorithms metrics/criteria: 1. Completeness (does it terminate with a valid solution) 2. Optimality (is the answer the best solution) 3. Time (in big-O notation) 4. Space (big-O) b = maximum branching factor d = minimum depth of a goal m = maximum length of any path    a. Uniform-cost searchThe only modification is when exploring a node we cannot disregard it if it has already been explored by another node We might have found a shorter path and thus need to update the cost on that node We also do not terminate when we find a goal, but instead when the goal has the lowest cost in the queue.UCS is.. 1. Complete (if costs strictly greater than 0) 2. Optimal However.... 3&amp;4. Time complexity = space complexity = O(b1+C*/min(path cost)), where C* cost of optimal solution (much worse than BFS)    b. Bidirectional search It starts from both the goal and start (using BFS) until the trees meet This is better as 2*(bd/2) &lt; bd (the space is much worse than IDS, so only applicable to small problems)</code></pre><p><img src="/images/pasted-7.png" alt="upload successful"></p><p>DFS: FILO<br>Metrics:<br>    1. Might not terminate (not correct) (e.g. in vacuum world, if first expand is action L)<br>    2. Non-optimal (just… no)<br>    3. Time complexity = O(bd )<br>    4. Space complexity = O(b*d) Only way this is better than BFS is the space complexity… DFS by itself is not great, but it has two (very) useful modifications</p><pre><code>a. Depth limited search </code></pre><p>It runs normal DFS, but if it is at a specified depth limit, you cannot have children (i.e. take another action) However, if you pick the depth limit before d, you will not find a solution (not correct, but will terminate)</p><p><img src="/images/pasted-10.png" alt="upload successful"></p><pre><code>b. iterative deepening DFS</code></pre><p>This search performs depth limited search with maximum depth 1, then maximum depth 2, then 3… until it finds a solution</p><p><img src="/images/pasted-13.png" alt="upload successful"></p><p>The first few states do get re-checked multiple times in IDS, however it is not too many When you find the solution at depth d, depth 1 is expanded d times (at most b of them) The second depth are expanded d-1 times (at most b2 of them) Thus</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-15.png" alt="upload successful" title="">                </div>                <div class="image-caption">upload successful</div>            </figure><p>Metrics:<br>    1. Complete 2. Non-optimal (unless uniform cost) 3. O(bd ) 4. O(b*d) Thus IDS is better in every way than BFS (asymptotically) Best uninformed we will talk about</p><p><img src="/images/pasted-17.png" alt="upload successful"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Search&quot;&gt;&lt;a href=&quot;#Search&quot; class=&quot;headerlink&quot; title=&quot;Search&quot;&gt;&lt;/a&gt;Search&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;a. In deterministic environments the search so
      
    
    </summary>
    
    
      <category term="AI" scheme="http://yoursite.com/categories/AI/"/>
    
    
      <category term="Search" scheme="http://yoursite.com/tags/Search/"/>
    
  </entry>
  
  <entry>
    <title>Some thoughts on AI</title>
    <link href="http://yoursite.com/2020/02/05/Some-thoughts-about-AI/"/>
    <id>http://yoursite.com/2020/02/05/Some-thoughts-about-AI/</id>
    <published>2020-02-06T03:45:00.000Z</published>
    <updated>2020-02-10T01:53:04.424Z</updated>
    
    <content type="html"><![CDATA[<p>Recently, there has been a lot of concerns about AI(artificial intelligence), like AI will make people lose jobs and the tech oligarch will make wealth inequality; in brief, AI will raise abundant social issues over than its advantage to society. On the contrary, some people argues that AI will bring abundant jobs instead. Like in the past, some people concerned that industrial revolution will take away people’s jobs but we know this revolution promote society development and then bring many opening jobs. However, I still believe there are many reasons to be concerned about advances of AI.</p><p>As the automation is developing, we can see in the near future; millions of people will be replaced by the machines. The reasons I concerned are that there are many advantages in automation over than humans. First, machines will never feel tired. Mentioned in this article, I believe ”the self-driving trucks promised by Tesla’s Elon Musk become widely available in the next decade.” (Bossmann, 2016). Human drivers need to take a break after long driving, but self-driving trucks not. Self-driving car can keep long driving during the midnight to avoid rush hours in the daytime, and self-driving car has a lower risk of accidents than humans after long driving. Absolutely, transportation company will hire robots to drive rather than humans in obvious these advances. Hence, we can see in the near future; AI will take away many people’s jobs, and the unemployment rate will be increasing rapidly.</p><p>What if AI turn to hurt humans? Hollywood movies have presented many AI disasters for us. And in this article, the author mentioned a vivid example: in order to kill the cancer, the machine kills everyone on the planet instead, which is more efficient. (Bossmann, 2016). As we know, the real world is really complicated. It is hard to just use some if-else statements to cover all the cases, like we are hard to predicate the future. So, in more specific, how can we ensure that the robot will not hurt human in a complicate case like rescue hostages? How can we ensure human will still dominate the world if one day we totally lose the ingenuity and intelligence than AI? As one day AI can evolve them very efficiently by iteration? How can we protect ourselves if robots start to attack people? How can we ensure we can still dominate the world, not AI dominate us? Or AI can just create a pandemic breaks out the world, which is the most efficient way to kill all the organism on this planet. Or like the movie, The Matrix, people are imprisoned in a container as a energy source?</p><p>Obviously, there are still many issues that AI will bring to us. So I believe govern- ments, industries, and academics should take some steps to address these issues. First, since the automation take place of many people’s job, the unemployment rate will be in- creasing. Government should make some effectual policy to against unemployment. For example, Andrew Yang proposes government to pay one thousand dollars each month to every American over the age of 18. This money is from company’s VAT(A Value-Added Tax), and then people use the money to consumer company’s product. (Yang, 2020). This is a double win. No need to say, there are still a lot of issues that AI will bring to us in the future, but government should take its strong right to control these issues.</p><p>Second, industries and academics should make some principles or agreement during the AI development. Like The Institute for Ethical ML, this academic institute make 8 principles when designing and developing AI and ML.(for Ethical AI ML, 2020). In that 8 principles, the developer commit to assess and handle the impact of incorrect result. So I believe the developers can take a great effort to avoid accident due to AI, and even when the accident happens, they can reduce losses.</p><p>In brief, We have reasons to be concerned about advances of AI.And there are still many steps to address these issues, but the only principle we need to make sure is, artificial intelligence is conducive to improving the efficiency of social work and promoting social development.</p><hr><p>References</p><p>J. Bossmann. Top 9 ethical issues in artificial intelligence. 2016. URL <a href="https://www.weforum.org/agenda/2016/10/top-10-ethical-issues" target="_blank" rel="noopener">https://www.weforum.org/agenda/2016/10/top-10-ethical-issues</a> -in-artificial-intelligence.<br>I. for Ethical AI ML. The 7 Most Pressing Ethical Issues in Artificial Intelligence. 2020. URL <a href="https://ethical.institute/principles.html" target="_blank" rel="noopener">https://ethical.institute/principles.html</a>.<br>A. Yang. VALUE-ADDED TAX. 2020. URL <a href="https://www.yang2020.com/policies/value-added-tax/" target="_blank" rel="noopener">https://www.yang2020.com/policies/value-added-tax/</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Recently, there has been a lot of concerns about AI(artificial intelligence), like AI will make people lose jobs and the tech oligarch wi
      
    
    </summary>
    
    
      <category term="AI" scheme="http://yoursite.com/categories/AI/"/>
    
    
  </entry>
  
  <entry>
    <title>Build your own blog</title>
    <link href="http://yoursite.com/2020/02/01/hello-world/"/>
    <id>http://yoursite.com/2020/02/01/hello-world/</id>
    <published>2020-02-01T15:22:00.000Z</published>
    <updated>2020-02-10T01:53:43.591Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><h3 id="Change-Theme"><a href="#Change-Theme" class="headerlink" title="Change Theme"></a>Change Theme</h3><p>The theme I used in this blog is cited from <a href="https://github.com/yscoder/hexo-theme-indigo/wiki" target="_blank" rel="noopener">yscoder</a></p><p>1.<br>git clone -&gt; after all install -&gt; move theme to your hexo theme and</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>Careful here, if in the _config.yml you set it as</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>The hexo d will delete your custom domin name!<br><a href="https://stackoverflow.com/a/46431728/10854896" target="_blank" rel="noopener">What should do is here</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
