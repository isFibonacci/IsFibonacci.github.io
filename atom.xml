<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hi There</title>
  
  <subtitle>If people do not believe that mathematics is simple, it is only because they do not realize how complicated life is. – John von Neumann.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-02-13T19:07:15.217Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>isFibonacci</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Pointers and Dynamic Memory Allocation(2)</title>
    <link href="http://yoursite.com/2020/02/11/title:%20%20Pointers%20and%20Dynamic%20Memory%20%202/"/>
    <id>http://yoursite.com/2020/02/11/title:%20%20Pointers%20and%20Dynamic%20Memory%20%202/</id>
    <published>2020-02-12T01:55:00.000Z</published>
    <updated>2020-02-13T19:07:15.217Z</updated>
    
    <content type="html"><![CDATA[<h2 id="String-functions-with-pointers"><a href="#String-functions-with-pointers" class="headerlink" title="String functions with pointers"></a>String functions with pointers</h2><h3 id="strcmp-strcpy"><a href="#strcmp-strcpy" class="headerlink" title="strcmp, strcpy"></a>strcmp, strcpy</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> cmp1, cmp2;</span><br><span class="line"><span class="keyword">char</span> string1[<span class="number">10</span>] = <span class="string">"abcxyz"</span>;</span><br><span class="line"><span class="keyword">char</span> string2[<span class="number">10</span>] = <span class="string">"xyz"</span>;</span><br><span class="line"><span class="keyword">char</span> newText[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">char</span>* subStr = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">cmp1 = <span class="built_in">strcmp</span>(string1, string2);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"strcmp of \""</span> &lt;&lt; string1 &lt;&lt; <span class="string">"\" and \""</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; string2 &lt;&lt; <span class="string">"\" returned "</span> &lt;&lt; cmp1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">subStr = &amp;string1[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">cmp2 = <span class="built_in">strcmp</span>(subStr, <span class="string">"xyz"</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"strcmp of \""</span> &lt;&lt; subStr;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\" and \"xyz\" returned "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; cmp2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">strcpy</span>(newText, subStr);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"newText is now \""</span> &lt;&lt; newText &lt;&lt; <span class="string">"\""</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p><strong>OUTPUT</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">strcmp of &quot;abcxyz&quot; and &quot;xyz&quot; returned -23</span><br><span class="line">strcmp of &quot;xyz&quot; and &quot;xyz&quot; returned 0</span><br><span class="line">newText is now &quot;xyz&quot;</span><br></pre></td></tr></table></figure><h3 id="strchr-strrchr-strstr"><a href="#strchr-strrchr-strstr" class="headerlink" title="strchr(), strrchr(), strstr()"></a>strchr(), strrchr(), strstr()</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> orgName[<span class="number">100</span>] = <span class="string">"The Dept. of Redundancy Dept."</span>; </span><br><span class="line"><span class="keyword">char</span> newText[<span class="number">100</span>]; </span><br><span class="line"><span class="keyword">char</span>* subString = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strchr</span>(orgName, <span class="string">'D'</span>) != <span class="literal">nullptr</span>) &#123;  <span class="comment">// 'D' exists in orgName?</span></span><br><span class="line">   subString = <span class="built_in">strchr</span>(orgName, <span class="string">'D'</span>);    <span class="comment">// Points to first 'D'</span></span><br><span class="line">   <span class="built_in">strcpy</span>(newText, subString);          <span class="comment">// newText now "Dept. of Redundancy Dept."</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strrchr</span>(orgName, <span class="string">'D'</span>) != <span class="literal">nullptr</span>) &#123;   <span class="comment">// 'D' exists in orgName?</span></span><br><span class="line">   subString = <span class="built_in">strrchr</span>(orgName, <span class="string">'D'</span>);     <span class="comment">// Points to last 'D'</span></span><br><span class="line">   <span class="built_in">strcpy</span>(newText, subString);            <span class="comment">// newText now "Dept."</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">subString = <span class="built_in">strstr</span>(orgName, <span class="string">"Dept"</span>); <span class="comment">// Points to first 'D'</span></span><br><span class="line"><span class="keyword">if</span> (subString != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">   <span class="built_in">strcpy</span>(newText, subString);       <span class="comment">// newText now "Dept. of Redundancy Dept."</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Memory-regions-Heap-Stack"><a href="#Memory-regions-Heap-Stack" class="headerlink" title="Memory regions: Heap/Stack"></a>Memory regions: Heap/Stack</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-20.png" alt="upload successful" title="">                </div>                <div class="image-caption">upload successful</div>            </figure><h2 id="Destructors"><a href="#Destructors" class="headerlink" title="Destructors"></a>Destructors</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-21.png" alt="upload successful" title="">                </div>                <div class="image-caption">upload successful</div>            </figure><h3 id="When-the-destructors-call"><a href="#When-the-destructors-call" class="headerlink" title="When the destructors call"></a>When the destructors call</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-22.png" alt="upload successful" title="">                </div>                <div class="image-caption">upload successful</div>            </figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">listToDisplay is passed by reference,</span><br><span class="line"> so the destructor is not called at the end of the DisplayList function.</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DisplayList</span><span class="params">(LinkedList&amp; listToDisplay)</span> </span>&#123;</span><br><span class="line">   LinkedListNode* node = listToDisplay.head;</span><br><span class="line">   <span class="keyword">while</span>(node) &#123;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; node-&gt;data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">      node = node-&gt;next;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">listToDisplay is not passed by pointer or by reference and goes out of scope at the end of the DisplayList function. </span><br><span class="line">Thus, listToDisplay&#39;s destructor is called.</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DisplayList</span><span class="params">(LinkedList listToDisplay)</span> </span>&#123;</span><br><span class="line">   LinkedListNode* node = listToDisplay.head;</span><br><span class="line">   <span class="keyword">while</span>(node) &#123;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; node-&gt;data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">      node = node-&gt;next;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Memory-leaks"><a href="#Memory-leaks" class="headerlink" title="Memory leaks"></a>Memory leaks</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-23.png" alt="upload successful" title="">                </div>                <div class="image-caption">upload successful</div>            </figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   MyClass* ptrOne = <span class="keyword">new</span> MyClass;</span><br><span class="line">   MyClass* ptrTwo = <span class="keyword">new</span> MyClass;</span><br><span class="line"></span><br><span class="line">   ptrOne = ptrTwo;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SO MAKE SURE INITIALIZE DESTRUCTOR</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      MyClass() &#123;</span><br><span class="line">         subObject = <span class="keyword">new</span> <span class="keyword">int</span>;</span><br><span class="line">         *subObject = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      ~MyClass() &#123;</span><br><span class="line">         <span class="keyword">delete</span> subObject;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">      <span class="keyword">int</span>* subObject;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   MyClass* ptrOne = <span class="keyword">new</span> MyClass;</span><br><span class="line">   MyClass* ptrTwo = <span class="keyword">new</span> MyClass;</span><br><span class="line">   ...</span><br><span class="line"></span><br><span class="line">   <span class="keyword">delete</span> ptrOne;</span><br><span class="line">   ptrOne = ptrTwo;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>```C++<br>Vector<int> cubes(intnumCubes){<br>    Vector<int> vec;<br>    for (inti= 0; i&lt; numCubes; i++)<br>        vec.add(i* i* i);<br>    return vec;<br>}</p><p>// It does, but there is an issue.<br>// The copy constructor of the Vector class is invoked because a value is being returned.<br>// We do not want to make copies of large objects. </p><p>Vector<int> &amp;cubes(intnumCubes){<br>    Vector<int> vec;<br>    for (inti= 0; i&lt; numCubes; i++)<br>        vec.add(i* i* i);<br>    return vec;<br>}</p><p>/* This is really reallybad.<br>The scope of vecis only within the function and once the function terminates the stack is cleaned up,<br>thus the reference to the memory location is destroyed.  */</p><p>Vector<int> <em>cubes(intnumCubes){<br>    Vector<int> vec;<br>    for (inti= 0; i&lt; numCubes; i++)<br>        vec.add(i</em> i* i);<br>    return vec;<br>}</p><p>/* This is really reallyreallybad.<br>The scope of vecis only within the function and once the function terminates the stack is cleaned up (all local variables are destroyed),<br>thus the reference to the memory location is destroyed.<br>Hence the pointer is pointing at a NULL reference which eventually will cause your program to crash.  */</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;String-functions-with-pointers&quot;&gt;&lt;a href=&quot;#String-functions-with-pointers&quot; class=&quot;headerlink&quot; title=&quot;String functions with pointers&quot;&gt;
      
    
    </summary>
    
    
      <category term="Program Language" scheme="http://yoursite.com/categories/Program-Language/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Tree (0)</title>
    <link href="http://yoursite.com/2020/02/10/Tree%20(0)/"/>
    <id>http://yoursite.com/2020/02/10/Tree%20(0)/</id>
    <published>2020-02-11T01:55:00.000Z</published>
    <updated>2020-02-14T04:28:30.206Z</updated>
    
    <content type="html"><![CDATA[<h2 id="235-Lowest-Common-Ancestor-of-a-Binary-Search-Tree"><a href="#235-Lowest-Common-Ancestor-of-a-Binary-Search-Tree" class="headerlink" title="235. Lowest Common Ancestor of a Binary Search Tree"></a><a href="https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/" target="_blank" rel="noopener">235. Lowest Common Ancestor of a Binary Search Tree</a></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lowestCommonAncestor</span><span class="params">(self, root: <span class="string">'TreeNode'</span>, p: <span class="string">'TreeNode'</span>, q: <span class="string">'TreeNode'</span>)</span> -&gt; 'TreeNode':</span></span><br><span class="line">    <span class="keyword">if</span> p.val &lt; root.val <span class="keyword">and</span> q.val &lt; root.val :</span><br><span class="line">        <span class="keyword">return</span> self.lowestCommonAncestor(root.left, p, q)</span><br><span class="line">    <span class="keyword">elif</span> p.val &gt; root.val <span class="keyword">and</span> q.val &gt; root.val :</span><br><span class="line">        <span class="keyword">return</span> self.lowestCommonAncestor(root.right, p, q)</span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure><h2 id="236-Lowest-Common-Ancestor-of-a-Binary-Tree"><a href="#236-Lowest-Common-Ancestor-of-a-Binary-Tree" class="headerlink" title="236. Lowest Common Ancestor of a Binary Tree"></a><a href="https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/" target="_blank" rel="noopener">236. Lowest Common Ancestor of a Binary Tree</a></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">ans = <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lowestCommonAncestor</span><span class="params">(self, root: <span class="string">'TreeNode'</span>, p: <span class="string">'TreeNode'</span>, q: <span class="string">'TreeNode'</span>)</span> -&gt; 'TreeNode':</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">#LCA : find the node that p and q seperate</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(cur)</span> -&gt; 'boolean' :</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> cur :</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            </span><br><span class="line">            left = dfs(cur.left)</span><br><span class="line">            </span><br><span class="line">            <span class="comment">#if cur node is q or p, so don't need to dfs right</span></span><br><span class="line">            mid = cur == q <span class="keyword">or</span> cur == p</span><br><span class="line">            </span><br><span class="line">            right = dfs(cur.right)</span><br><span class="line">            </span><br><span class="line">            <span class="comment">#so don't need to dfs deep</span></span><br><span class="line">            <span class="keyword">if</span> mid+right+left &gt;= <span class="number">2</span> :</span><br><span class="line">                self.ans = cur</span><br><span class="line">            </span><br><span class="line">            <span class="comment">#bring the ans up to previous level</span></span><br><span class="line">            <span class="keyword">return</span> mid <span class="keyword">or</span> left <span class="keyword">or</span> right</span><br><span class="line">        </span><br><span class="line">        dfs(root)</span><br><span class="line">        <span class="keyword">return</span> self.ans</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;235-Lowest-Common-Ancestor-of-a-Binary-Search-Tree&quot;&gt;&lt;a href=&quot;#235-Lowest-Common-Ancestor-of-a-Binary-Search-Tree&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="tree" scheme="http://yoursite.com/tags/tree/"/>
    
  </entry>
  
  <entry>
    <title>Pointers and Dynamic Memory Allocation(1)</title>
    <link href="http://yoursite.com/2020/02/10/title:%20%20Pointers%20and%20Dynamic%20Memory%20All/"/>
    <id>http://yoursite.com/2020/02/10/title:%20%20Pointers%20and%20Dynamic%20Memory%20All/</id>
    <published>2020-02-11T01:55:00.000Z</published>
    <updated>2020-02-14T04:17:01.314Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Pointer"><a href="#Pointer" class="headerlink" title="Pointer"></a>Pointer</h2><p>In vecotr, if the capacity is over size, vector will expand the size, and point to<br>another continous memory.</p><h3 id="reference-deference"><a href="#reference-deference" class="headerlink" title="reference, deference"></a>reference, deference</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> someInt;</span><br><span class="line"><span class="keyword">int</span>* valPointer;  </span><br><span class="line"></span><br><span class="line">someInt = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"someInt address is "</span> &lt;&lt; &amp;someInt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">valPointer = &amp;someInt;        </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"valPointer is "</span> &lt;&lt; valPointer &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"*valPointer is "</span> &lt;&lt; *valPointer &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">*valPointer = <span class="number">10</span>;   <span class="comment">// Changes someInt to 10</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"someInt is "</span> &lt;&lt; someInt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"*valPointer is "</span> &lt;&lt; *valPointer &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">someInt address is 76</span><br><span class="line">valPointer is 76</span><br><span class="line">*valPointer is76</span><br><span class="line">someInt is 10</span><br><span class="line">*valPointer is 10</span><br></pre></td></tr></table></figure><p><strong>COMMON ERROR</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. prog.cpp:10:13: error: invalid conversion from &#39;int&#39; to &#39;int*&#39; [-fpermissive]</span><br><span class="line">    int *ptr &#x3D; var;</span><br><span class="line"></span><br><span class="line">    CORRECT : int *ptr &#x3D; &amp;var;</span><br><span class="line"></span><br><span class="line">2. Segmentation Fault (SIGSEGV), dereferencing unknown address</span><br><span class="line">    *ptr &#x3D; var;</span><br></pre></td></tr></table></figure><h3 id="Three-ways"><a href="#Three-ways" class="headerlink" title="Three ways"></a>Three ways</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Pass-by-Value </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">square1</span><span class="params">(<span class="keyword">int</span> n)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="comment">//Address of n in square1() is not the same as n1 in main() </span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"address of n1 in square1(): "</span> &lt;&lt; &amp;n &lt;&lt; <span class="string">"\n"</span>;   </span><br><span class="line">      </span><br><span class="line">    <span class="comment">// clone modified inside the function </span></span><br><span class="line">    n *= n; </span><br><span class="line">    <span class="keyword">return</span> n; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//Pass-by-Reference with Pointer Arguments </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">square2</span><span class="params">(<span class="keyword">int</span> *n)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="comment">//Address of n in square2() is the same as n2 in main() </span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"address of n2 in square2(): "</span> &lt;&lt; n &lt;&lt; <span class="string">"\n"</span>; </span><br><span class="line">      </span><br><span class="line">    <span class="comment">// Explicit de-referencing to get the value pointed-to </span></span><br><span class="line">    *n *= *n; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//Pass-by-Reference with Reference Arguments </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">square3</span><span class="params">(<span class="keyword">int</span> &amp;n)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="comment">//Address of n in square3() is the same as n3 in main() </span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"address of n3 in square3(): "</span> &lt;&lt; &amp;n &lt;&lt; <span class="string">"\n"</span>; </span><br><span class="line">      </span><br><span class="line">    <span class="comment">// Implicit de-referencing (without '*') </span></span><br><span class="line">    n *= n; </span><br><span class="line">&#125; </span><br><span class="line">...</span><br><span class="line">    <span class="comment">//Call-by-Value </span></span><br><span class="line">    <span class="keyword">int</span> n1=<span class="number">8</span>; </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"address of n1 in main(): "</span> &lt;&lt; &amp;n1 &lt;&lt; <span class="string">"\n"</span>; </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Square of n1: "</span> &lt;&lt; square1(n1) &lt;&lt; <span class="string">"\n"</span>; </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"No change in n1: "</span> &lt;&lt; n1 &lt;&lt; <span class="string">"\n"</span>; </span><br><span class="line">      </span><br><span class="line">    <span class="comment">//Call-by-Reference with Pointer Arguments </span></span><br><span class="line">    <span class="keyword">int</span> n2=<span class="number">8</span>; </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"address of n2 in main(): "</span> &lt;&lt; &amp;n2 &lt;&lt; <span class="string">"\n"</span>; </span><br><span class="line">    square2(&amp;n2); </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Square of n2: "</span> &lt;&lt; n2 &lt;&lt; <span class="string">"\n"</span>; </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Change reflected in n2: "</span> &lt;&lt; n2 &lt;&lt; <span class="string">"\n"</span>; </span><br><span class="line">      </span><br><span class="line">    <span class="comment">//Call-by-Reference with Reference Arguments </span></span><br><span class="line">    <span class="keyword">int</span> n3=<span class="number">8</span>; </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"address of n3 in main(): "</span> &lt;&lt; &amp;n3 &lt;&lt; <span class="string">"\n"</span>; </span><br><span class="line">    square3(n3); </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Square of n3: "</span> &lt;&lt; n3 &lt;&lt; <span class="string">"\n"</span>; </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Change reflected in n3: "</span> &lt;&lt; n3 &lt;&lt; <span class="string">"\n"</span>; </span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>OUTPUT</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">address of n1 in main(): 0x7ffcf4d06e2c</span><br><span class="line">address of n1 in square1(): 0x7ffcf4d06e0c</span><br><span class="line">Square of n1: 64</span><br><span class="line">No change in n1: 8</span><br><span class="line">address of n2 in main(): 0x7ffcf4d06e30</span><br><span class="line">address of n2 in square2(): 0x7ffcf4d06e30</span><br><span class="line">Square of n2: 64</span><br><span class="line">Change reflected in n2: 64</span><br><span class="line">address of n3 in main(): 0x7ffcf4d06e34</span><br><span class="line">address of n3 in square3(): 0x7ffcf4d06e34</span><br><span class="line">Square of n3: 64</span><br><span class="line">Change reflected in n3: 64</span><br></pre></td></tr></table></figure><p><strong>COMMON ERROR</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cout &lt;&lt; &quot;Square of n1: &quot; &lt;&lt; square1(n1) &lt;&lt; &quot;\n&quot;; </span><br><span class="line"></span><br><span class="line">void square1(n1) &#123;</span><br><span class="line">   ...</span><br><span class="line">   cout &lt;&lt; &quot;address of n1 in square1(): &quot; &lt;&lt; &amp;n &lt;&lt; &quot;\n&quot;;  </span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br><span class="line">call square1(n1) -&gt; call cout :</span><br><span class="line">address of n1 in square1(): 0x7ffcf4d06e0c</span><br><span class="line">Square of n1: 64</span><br></pre></td></tr></table></figure><h3 id="Array-Name-as-Pointers"><a href="#Array-Name-as-Pointers" class="headerlink" title="Array Name as Pointers"></a>Array Name as Pointers</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="comment">//Declare an array </span></span><br><span class="line">    <span class="keyword">int</span> val[<span class="number">3</span>] = &#123; <span class="number">5</span>, <span class="number">10</span>, <span class="number">20</span> &#125;; </span><br><span class="line">      </span><br><span class="line">    <span class="comment">//declare pointer variable  </span></span><br><span class="line">    <span class="keyword">int</span> *ptr; </span><br><span class="line">      </span><br><span class="line">    <span class="comment">//Assign the address of val[0] to ptr </span></span><br><span class="line">    <span class="comment">// We can use ptr=&amp;val[0];(both are same) </span></span><br><span class="line">    ptr = val ; </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Elements of the array are: "</span>; </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ptr[<span class="number">0</span>] &lt;&lt; <span class="string">" "</span> &lt;&lt; *(++ptr) &lt;&lt; <span class="string">" "</span> &lt;&lt; val[<span class="number">2</span>]; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>OUTPUT</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Elements of the array are: 5 10 20</span><br></pre></td></tr></table></figure><h3 id="NULL"><a href="#NULL" class="headerlink" title="NULL"></a>NULL</h3><p>When a pointer is declared, the pointer variable holds an unknown address until the pointer is initialized.<br>A programmer may wish to indicate that a pointer points to “nothing” by initializing a pointer to null</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintValue</span><span class="params">(<span class="keyword">int</span>* valuePointer)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (valuePointer == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"Pointer is null"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; *valuePointer &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> someInt = <span class="number">5</span>;</span><br><span class="line">   <span class="keyword">int</span>* valPointer = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">   PrintValue(valPointer);</span><br><span class="line">   valPointer = &amp;someInt;        </span><br><span class="line">   PrintValue(valPointer);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Operators"><a href="#Operators" class="headerlink" title="Operators:"></a>Operators:</h2><h3 id="new-delete-and-gt"><a href="#new-delete-and-gt" class="headerlink" title="new, delete, and -&gt;"></a>new, delete, and -&gt;</h3><ol><li>The new operator allocates memory for the given type and returns a pointer to the allocated memory. </li><li>If the type is a class, the new operator calls the class’s constructor after allocating memory for the class’s member variables.</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   Point(<span class="keyword">double</span> xValue = <span class="number">0</span>, <span class="keyword">double</span> yValue = <span class="number">0</span>);</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">double</span> X;</span><br><span class="line">   <span class="keyword">double</span> Y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Point:: Point(<span class="keyword">double</span> xValue, <span class="keyword">double</span> yValue) &#123;</span><br><span class="line">   X = xValue;</span><br><span class="line">   Y = yValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Point::Print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"("</span> &lt;&lt; X &lt;&lt; <span class="string">", "</span>;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; Y &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   Point* point1 = <span class="keyword">new</span> Point;</span><br><span class="line">   point1-&gt;Print();</span><br><span class="line"></span><br><span class="line">   Point* point2 = <span class="keyword">new</span> Point(<span class="number">8</span>, <span class="number">9</span>);</span><br><span class="line">   (*point2).Print();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type *variable &#x3D; new type; &#x2F;&#x2F; allocates one elementor</span><br><span class="line">type *variable &#x3D; new type[n];&#x2F;&#x2F; allocates n elements I.e. an array of type</span><br></pre></td></tr></table></figure><h3 id="The-member-access-operator"><a href="#The-member-access-operator" class="headerlink" title="The member access operator"></a>The member access operator</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(*point2).Print();</span><br><span class="line">point2-&gt;Print();</span><br></pre></td></tr></table></figure><h3 id="The-delete-operator"><a href="#The-delete-operator" class="headerlink" title="The delete operator"></a>The delete operator</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   Point* point1 = <span class="keyword">new</span> Point(<span class="number">73</span>, <span class="number">19</span>);</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"X = "</span> &lt;&lt; point1-&gt;X &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"Y = "</span> &lt;&lt; point1-&gt;Y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">delete</span> point1;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Error: can't use point1 after deletion</span></span><br><span class="line">   point1-&gt;Print();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Allocating-and-deleting-object-arrays"><a href="#Allocating-and-deleting-object-arrays" class="headerlink" title="Allocating and deleting object arrays"></a>Allocating and deleting object arrays</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Allocate points</span></span><br><span class="line"><span class="keyword">int</span> pointCount = <span class="number">4</span>;</span><br><span class="line">Point* manyPoints = <span class="keyword">new</span> Point[pointCount];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Display each point</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pointCount; ++i)</span><br><span class="line">   manyPoints[i].Print();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Free all points with one delete</span></span><br><span class="line"><span class="keyword">delete</span>[] manyPoints;</span><br></pre></td></tr></table></figure>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">A dynamically allocated array is freed with one statement. </span><br><span class="line">Objects in the array cannot be deleted individually.</span><br><span class="line">ERROR :</span><br><span class="line"></span><br><span class="line">for (;i &lt; n; i++) &#123;</span><br><span class="line">    delete pointers[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Deallocating-memory"><a href="#Deallocating-memory" class="headerlink" title="Deallocating memory"></a>Deallocating memory</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PaintContainer</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      ~PaintContainer();</span><br><span class="line">      <span class="keyword">double</span> gallonPaint;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">PaintContainer::~PaintContainer() &#123; <span class="comment">// Covered in section on Destructors.</span></span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"PaintContainer deallocated."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   PaintContainer* kitchenPaint;</span><br><span class="line"></span><br><span class="line">   kitchenPaint = <span class="keyword">new</span> PaintContainer;</span><br><span class="line">   kitchenPaint-&gt;gallonPaint = <span class="number">26.3</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">delete</span> kitchenPaint;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>OUTOU</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PaintContainer deallocated.</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fun</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>: </span><br><span class="line">        Fun(int_size = <span class="number">10</span>):<span class="built_in">size</span>(_size)&#123;</span><br><span class="line">            nums= <span class="keyword">new</span> <span class="keyword">int</span>[<span class="built_in">size</span>];</span><br><span class="line">            <span class="keyword">for</span>(inti= <span class="number">0</span>; i&lt; <span class="built_in">size</span>; i++)</span><br><span class="line">                nums[i]  = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(inti= <span class="number">0</span>; i&lt; <span class="built_in">size</span>; i++) <span class="built_in">cout</span>&lt;&lt; nums[i] &lt;&lt; “  “;<span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt; ‘\n’;</span><br><span class="line">        &#125;</span><br><span class="line">        ~Fun()&#123;</span><br><span class="line">            <span class="keyword">delete</span> [] nums;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">size</span>;</span><br><span class="line">        <span class="keyword">int</span>*nums;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Fun funstuff;</span><br><span class="line">    funstuff.<span class="built_in">display</span>();  <span class="comment">// destructor will  be called  when the block is terminated. No need to call  delete</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Fun *moreFunstuff;  <span class="comment">// instance  of Fun allocated on the heap</span></span><br><span class="line">    moreFunstuff-&gt;<span class="built_in">display</span>();  <span class="comment">// destructor will  not be called  automatically.  Need to call  delete </span></span><br><span class="line">    <span class="keyword">delete</span> moreFunstuff;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Challenge"><a href="#Challenge" class="headerlink" title="Challenge"></a>Challenge</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> k = <span class="number">3</span>,  j = <span class="number">5</span>,  *p = &amp;k,  *q = &amp;j,  *r;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (p == &amp;k) </span><br><span class="line">     <span class="built_in">cout</span>&lt;&lt;<span class="number">1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"> *p = k + <span class="number">7</span>;</span><br><span class="line"> <span class="built_in">cout</span>&lt;&lt;<span class="string">"k = "</span> &lt;&lt;k&lt;&lt;<span class="string">"*p ="</span> &lt;&lt;*p&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"> <span class="built_in">cout</span>&lt;&lt; &amp;*&amp;p &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"> <span class="built_in">cout</span>&lt;&lt; <span class="number">7</span> * *p / *q + <span class="number">7</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">int</span> x[<span class="number">10</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">   <span class="keyword">int</span> *ptr =  x; </span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) </span><br><span class="line">     <span class="built_in">cout</span> &lt;&lt; *ptr++&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"> <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"> <span class="comment">// for(int i = 0; i &lt; 10; i++) cout &lt;&lt; *x++ &lt;&lt; “  “;</span></span><br><span class="line"> <span class="comment">// *x refers to x[0] *(x+1) refers to x[1]</span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">int</span>**intArray;</span><br><span class="line"> intArray= <span class="keyword">new</span> <span class="keyword">int</span>*[<span class="number">8</span>];</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">8</span> ; k++)</span><br><span class="line">   intArray[k] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">8</span>];</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; <span class="number">8</span>; r++)&#123;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; <span class="number">8</span>; c++)&#123;</span><br><span class="line">     intArray[r][c] = <span class="number">1</span> + rand() %<span class="number">100</span>;</span><br><span class="line">     <span class="built_in">cout</span>&lt;&lt; setw(<span class="number">4</span>) &lt;&lt; intArray[r][c] ;</span><br><span class="line"> &#125;</span><br><span class="line">   <span class="built_in">cout</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">8</span> ; k++)</span><br><span class="line">   <span class="keyword">delete</span> []intArray[k];</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Pointer&quot;&gt;&lt;a href=&quot;#Pointer&quot; class=&quot;headerlink&quot; title=&quot;Pointer&quot;&gt;&lt;/a&gt;Pointer&lt;/h2&gt;&lt;p&gt;In vecotr, if the capacity is over size, vector wi
      
    
    </summary>
    
    
      <category term="Program Language" scheme="http://yoursite.com/categories/Program-Language/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Greedy Algorithm (2)</title>
    <link href="http://yoursite.com/2020/02/10/Greedy%20Algorithm%20(2)/"/>
    <id>http://yoursite.com/2020/02/10/Greedy%20Algorithm%20(2)/</id>
    <published>2020-02-11T01:55:00.000Z</published>
    <updated>2020-02-14T05:36:22.059Z</updated>
    
    <content type="html"><![CDATA[<h2 id="376-Wiggle-Subsequence"><a href="#376-Wiggle-Subsequence" class="headerlink" title="376. Wiggle Subsequence"></a><a href="https://leetcode.com/problems/wiggle-subsequence/" target="_blank" rel="noopener">376. Wiggle Subsequence</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,7,4,9,2,5]</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: The entire sequence is a wiggle sequence.</span><br><span class="line"></span><br><span class="line">Input: [1,17,5,10,13,15,10,5,16,8]</span><br><span class="line">Output: 7</span><br><span class="line">Explanation: There are several subsequences that achieve this length. One is [1,17,10,13,10,16,8].</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">The longest subsequences will always start at first, to the last one.</span><br><span class="line">Since it is subsequence, not need to successive.</span><br><span class="line">Proof : [1, -1, -1, -2, 3, 2, 5, 5]</span><br><span class="line">[-1, -2, 3, 2, 5] can see as [1, -2, 3, 2, 5]</span><br><span class="line"></span><br><span class="line">Maintain two booleans to record the last is increase or decrease</span><br><span class="line">Maintain previous to determind whether cur is valid</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wiggleMaxLength</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">    <span class="keyword">if</span> len(nums) &lt; <span class="number">2</span> :</span><br><span class="line">        <span class="keyword">return</span> len(nums)</span><br><span class="line">    </span><br><span class="line">    incr, decr = <span class="literal">True</span>, <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    count = <span class="number">1</span></span><br><span class="line">    prev = nums[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> nums[<span class="number">1</span>:] :</span><br><span class="line">        <span class="keyword">if</span> num &lt; prev <span class="keyword">and</span> incr :</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            incr, decr = <span class="literal">False</span>, <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> num &gt; prev <span class="keyword">and</span> decr :</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            incr, decr = <span class="literal">True</span>, <span class="literal">False</span></span><br><span class="line">            </span><br><span class="line">        prev = num</span><br><span class="line">    <span class="keyword">return</span> count</span><br></pre></td></tr></table></figure><h2 id="406-Queue-Reconstruction-by-Height"><a href="#406-Queue-Reconstruction-by-Height" class="headerlink" title="406. Queue Reconstruction by Height"></a><a href="https://leetcode.com/problems/queue-reconstruction-by-height/" target="_blank" rel="noopener">406. Queue Reconstruction by Height</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Suppose you have a random list of people standing in a queue. Each person is described by a pair of integers (h, k), </span><br><span class="line">where h is the height of the person and k is the number of people in front of this person who have a height greater than or equal to h. </span><br><span class="line">Write an algorithm to reconstruct the queue.</span><br><span class="line"></span><br><span class="line">Input:</span><br><span class="line">[[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]]</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">[[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. sort increasing</span><br><span class="line">2. map people higher you to index -&gt; pop()</span><br><span class="line">    e.g [[4, 0], [5, 0]] : indexs : [0, 1] </span><br><span class="line">        pop(0) -&gt; 0 so indexs : [1]</span><br><span class="line">        pop(0) -&gt; 1</span><br><span class="line">        so pop will delete 0, and 1 will be at the index 0</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reconstructQueue</span><span class="params">(self, people: List[List[int]])</span> -&gt; List[List[int]]:</span></span><br><span class="line">    n = len(people)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> <span class="keyword">or</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> people</span><br><span class="line">    </span><br><span class="line">    res = [[]]*n</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#increasing</span></span><br><span class="line">    people.sort(key = <span class="keyword">lambda</span> x : (x[<span class="number">0</span>], -x[<span class="number">1</span>]))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#map of index</span></span><br><span class="line">    <span class="comment"># [0, 1, 2, 3] -&gt; pop(0) = 0 : [1, 2, 3]-&gt; pop(0) = 1: [2, 3]</span></span><br><span class="line">    indexs = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i, (_, pepHiger) <span class="keyword">in</span> enumerate(people) :</span><br><span class="line">        j = indexs.pop(pepHiger)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#j is how many people higer and before you</span></span><br><span class="line">        res[j] = people[i]</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="452-Minimum-Number-of-Arrows-to-Burst-Balloons"><a href="#452-Minimum-Number-of-Arrows-to-Burst-Balloons" class="headerlink" title="452. Minimum Number of Arrows to Burst Balloons"></a><a href="https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/" target="_blank" rel="noopener">452. Minimum Number of Arrows to Burst Balloons</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">[[10,16], [2,8], [1,6], [7,12]]</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">2</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">One way is to shoot one arrow for example at x &#x3D; 6 (bursting the balloons [2,8] and [1,6]) and another arrow at x &#x3D; 11 (bursting the other two balloons).</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findMinArrowShots</span><span class="params">(self, points: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">    points.sort(key = <span class="keyword">lambda</span> x : (x[<span class="number">1</span>]))</span><br><span class="line">    </span><br><span class="line">    res, right = <span class="number">0</span>, float(<span class="string">'-inf'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> point <span class="keyword">in</span> points : </span><br><span class="line">        <span class="comment">#new </span></span><br><span class="line">        <span class="keyword">if</span> right &lt; point[<span class="number">0</span>] :</span><br><span class="line">            res += <span class="number">1</span></span><br><span class="line">            right = point[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="402-Remove-K-Digits-https-leetcode-com-problems-remove-k-digits"><a href="#402-Remove-K-Digits-https-leetcode-com-problems-remove-k-digits" class="headerlink" title="[402. Remove K Digits] (https://leetcode.com/problems/remove-k-digits/)"></a>[402. Remove K Digits] (<a href="https://leetcode.com/problems/remove-k-digits/" target="_blank" rel="noopener">https://leetcode.com/problems/remove-k-digits/</a>)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: num &#x3D; &quot;10200&quot;, k &#x3D; 1</span><br><span class="line">Output: &quot;200&quot;</span><br><span class="line">Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">res = []</span><br><span class="line">n = len(num)</span><br><span class="line"><span class="keyword">if</span> n == k : <span class="keyword">return</span> <span class="string">'0'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> num :</span><br><span class="line">    <span class="keyword">while</span> k <span class="keyword">and</span> res <span class="keyword">and</span> res[<span class="number">-1</span>] &gt; char :</span><br><span class="line">        res.pop()</span><br><span class="line">        k -= <span class="number">1</span></span><br><span class="line">    res.append(char)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> k :</span><br><span class="line">    res.pop()</span><br><span class="line">    k -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">''</span>.join(res).lstrip(<span class="string">'0'</span>) <span class="keyword">or</span> <span class="string">"0"</span><span class="comment">#remove leading 0, if "" need to return "0"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;376-Wiggle-Subsequence&quot;&gt;&lt;a href=&quot;#376-Wiggle-Subsequence&quot; class=&quot;headerlink&quot; title=&quot;376. Wiggle Subsequence&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://le
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="greedy algorithm" scheme="http://yoursite.com/tags/greedy-algorithm/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Inheritance and Polymorphism in C++ (3)</title>
    <link href="http://yoursite.com/2020/02/08/Inheritance%20and%20Polymorphism%20in%20C++%20(3)/"/>
    <id>http://yoursite.com/2020/02/08/Inheritance%20and%20Polymorphism%20in%20C++%20(3)/</id>
    <published>2020-02-08T22:56:00.000Z</published>
    <updated>2020-02-14T04:16:39.649Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Abstract-classes-Introduction-generic"><a href="#Abstract-classes-Introduction-generic" class="headerlink" title="Abstract classes: Introduction (generic)"></a>Abstract classes: Introduction (generic)</h2><p>Object-oriented programming (OOP) :</p><ol><li>Classes</li><li>Inheritance</li><li>Abstract classes</li></ol><h3 id="Abstract-classes"><a href="#Abstract-classes" class="headerlink" title="Abstract classes"></a>Abstract classes</h3><ol><li><p>A pure virtual function is a virtual function that is not implemented in the base class, thus all derived classes must override the function. A pure virtual function is declared with the “virtual” keyword and is assigned with 0. Ex: virtual double ComputeArea() const = 0; declares a pure virtual function ComputeArea().</p></li><li><p>An abstract class is a class that cannot be instantiated as an object, but is the superclass for a subclass and specifies how the subclass must be implemented. Any class with one or more pure virtual functions is abstract.</p></li><li><p>A concrete class is a class that is not abstract, and hence can be instantiated.</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span> &#123;</span></span><br><span class="line">   <span class="keyword">protected</span>:</span><br><span class="line">      Point <span class="built_in">position</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      <span class="keyword">virtual</span> ~Shape() &#123; &#125;</span><br><span class="line">      <span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">ComputeArea</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">      <span class="function">Point <span class="title">GetPosition</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="built_in">position</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">SetPosition</span><span class="params">(Point newPosition)</span> </span>&#123;</span><br><span class="line">         <span class="built_in">position</span> = newPosition;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">MovePositionRelative</span><span class="params">(Point otherPosition)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">double</span> x = <span class="built_in">position</span>.GetX() + otherPosition.GetX();</span><br><span class="line">         <span class="keyword">double</span> y = <span class="built_in">position</span>.GetY() + otherPosition.GetY();</span><br><span class="line"></span><br><span class="line">         <span class="built_in">position</span>.SetX(x);</span><br><span class="line">         <span class="built_in">position</span>.SetY(y);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">   Shape* shape = <span class="keyword">new</span> Shape(); <span class="comment">// &lt;- ERROR!!!</span></span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Omitting ComputeArea() makes the Circle class abstract. To be concrete, all pure virtual functions from the superclass, Shape, must be implemented.</strong></p><p><strong>In Shape.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span> &#123;</span> </span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">      <span class="keyword">virtual</span> ~Shape() &#123; &#125;</span><br><span class="line">      <span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">ComputeArea</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>In Circle.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> :</span> <span class="keyword">public</span> Shape &#123;</span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">      <span class="keyword">double</span> radius;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      Circle(Point center, <span class="keyword">double</span> radius) &#123;</span><br><span class="line">         <span class="keyword">this</span>-&gt;radius = radius;</span><br><span class="line">         <span class="keyword">this</span>-&gt;<span class="built_in">position</span> = center;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">double</span> <span class="title">ComputeArea</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> (M_PI * <span class="built_in">pow</span>(radius, <span class="number">2</span>));</span><br><span class="line">      &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Is-a-versus-has-a-relationships"><a href="#Is-a-versus-has-a-relationships" class="headerlink" title="Is-a versus has-a relationships"></a>Is-a versus has-a relationships</h2><p><strong>Composition</strong><br>The ‘has-a’ relationship. A MotherInfo object ‘has a’ string object and ‘has a’ vector of ChildInfo objects, but no inheritance is involved.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChildInfo</span> &#123;</span></span><br><span class="line">   <span class="built_in">string</span> firstName;</span><br><span class="line">   <span class="built_in">string</span> birthDate;</span><br><span class="line">   <span class="built_in">string</span> schoolName;</span><br><span class="line"></span><br><span class="line">   ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MotherInfo</span> &#123;</span></span><br><span class="line">   <span class="built_in">string</span> firstname;</span><br><span class="line">   <span class="built_in">string</span> birthDate;</span><br><span class="line">   <span class="built_in">string</span> spouseName;</span><br><span class="line">   <span class="built_in">vector</span>&lt;ChildInfo&gt; childrenData;</span><br><span class="line"></span><br><span class="line">   ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>Inheritance</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonInfo</span> &#123;</span></span><br><span class="line">   <span class="built_in">string</span> firstName;</span><br><span class="line">   <span class="built_in">string</span> birthDate;</span><br><span class="line"></span><br><span class="line">   ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChildInfo</span> :</span> <span class="keyword">public</span> PersonInfo &#123;</span><br><span class="line">   <span class="built_in">string</span> schoolName;</span><br><span class="line"></span><br><span class="line">   ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MotherInfo</span> :</span> <span class="keyword">public</span> PersonInfo &#123;</span><br><span class="line">   <span class="built_in">string</span> spouseName;</span><br><span class="line">   <span class="built_in">vector</span>&lt;ChildInfo&gt; childrenData;</span><br><span class="line"></span><br><span class="line">   ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://tva1.sinaimg.cn/large/0082zybpgy1gbt2hp0or9j30ga03i74m.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Abstract-classes-Introduction-generic&quot;&gt;&lt;a href=&quot;#Abstract-classes-Introduction-generic&quot; class=&quot;headerlink&quot; title=&quot;Abstract classes: 
      
    
    </summary>
    
    
      <category term="Program Language" scheme="http://yoursite.com/categories/Program-Language/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Inheritance and Polymorphism in C++ (2)</title>
    <link href="http://yoursite.com/2020/02/07/Inheritance%20and%20Polymorphism%20in%20C++%20(2)/"/>
    <id>http://yoursite.com/2020/02/07/Inheritance%20and%20Polymorphism%20in%20C++%20(2)/</id>
    <published>2020-02-07T22:56:00.000Z</published>
    <updated>2020-02-11T18:22:17.857Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Overriding-member-functions"><a href="#Overriding-member-functions" class="headerlink" title="Overriding member functions"></a>Overriding member functions</h2><h3 id="Overriding-vs-overloading"><a href="#Overriding-vs-overloading" class="headerlink" title="Overriding vs. overloading"></a>Overriding vs. overloading</h3><p>In overloading, functions with the same name must have different parameter types. In overriding, a derived class member function takes precedence over a base class member function with the same name, regardless of the parameter types. Overloading is not performed if derived and base member functions have different parameter types; the member function of the derived class hides the member function of the base class.</p><p><strong>Restaurant’s GetDescription() must be identical to Business’s GetDescription() name, return type, and parameter list.</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Business</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      ...</span><br><span class="line">      <span class="function"><span class="built_in">string</span> <span class="title">GetDescription</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> name + <span class="string">" -- "</span> + address;</span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">   <span class="keyword">protected</span>:</span><br><span class="line">      <span class="built_in">string</span> name;</span><br><span class="line">      <span class="built_in">string</span> address;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Restaurant</span> :</span> <span class="keyword">public</span> Business &#123;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      ...</span><br><span class="line">      <span class="function"><span class="built_in">string</span> <span class="title">GetDescription</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> name + <span class="string">" -- "</span> + address + </span><br><span class="line">            <span class="string">"\n  Rating: "</span> + to_string(rating);</span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">      <span class="keyword">int</span> rating;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Or you can call it conveniently :</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Restaurant</span> :</span> <span class="keyword">public</span> Business &#123;</span><br><span class="line"></span><br><span class="line">   ...</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="built_in">string</span> <span class="title">GetDescription</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> Business::GetDescription() + <span class="string">"\n  Rating: "</span> + to_string(rating);</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>Without the prepended base class name, the call to GetDescription() refers to itself (a recursive call)</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">SetComputerStatus</span><span class="params">(<span class="built_in">string</span> cpuStatus, <span class="built_in">string</span> internetStatus)</span> </span>&#123;</span><br><span class="line">      cpuUsage = cpuStatus;</span><br><span class="line">      internet = internetStatus;</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">PrintStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"CPU: "</span> &lt;&lt; cpuUsage &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"Internet: "</span> &lt;&lt; internet &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">   <span class="built_in">string</span> cpuUsage;</span><br><span class="line">   <span class="built_in">string</span> internet;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Laptop</span> :</span> <span class="keyword">public</span> Computer &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">SetComputerStatus</span><span class="params">(<span class="built_in">string</span> cpuStatus, <span class="built_in">string</span> internetStatus, </span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="built_in">string</span> wifiStatus)</span> </span>&#123;</span><br><span class="line">      cpuUsage = cpuStatus;</span><br><span class="line">      internet = internetStatus;</span><br><span class="line">      wifiQuality = wifiStatus;</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">PrintStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      Computer::PrintStatus();</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"WiFi: "</span> &lt;&lt; wifiQuality &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   &#125;;</span><br></pre></td></tr></table></figure><h2 id="Polymorphism-and-virtual-member-functions"><a href="#Polymorphism-and-virtual-member-functions" class="headerlink" title="Polymorphism and virtual member functions"></a>Polymorphism and virtual member functions</h2><ol><li><p>Compile-time polymorphism is when the compiler determines which function to call at compile-time.</p></li><li><p>Runtime polymorphism is when the compiler is unable to determine which function to call at compile-time, so the determination is made while the program is running.</p></li><li><p>Function overloading is an example of compile-time polymorphism where the compiler determines which of several identically-named functions to call based on the function’s arguments.</p></li></ol><h3 id="compile-time-polymorphism"><a href="#compile-time-polymorphism" class="headerlink" title="compile-time polymorphism"></a>compile-time polymorphism</h3><p>convert the Restaurant pointer to a Business pointer</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DriveTo</span><span class="params">(<span class="built_in">string</span> restaurant)</span> </span>&#123;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"Driving to "</span> &lt;&lt; restaurant &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DriveTo</span><span class="params">(Restaurant restaurant)</span> </span>&#123;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"Driving to "</span> &lt;&lt; restaurant.GetDescription() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   DriveTo(<span class="string">"Big Mac's"</span>);  <span class="comment">// Call string version</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="runtime-polymorphism"><a href="#runtime-polymorphism" class="headerlink" title="runtime polymorphism"></a>runtime polymorphism</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DriveTo</span><span class="params">(Business* businessPtr)</span> </span>&#123;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"Driving to "</span> &lt;&lt; businessPtr-&gt;GetDescription() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> index;</span><br><span class="line">   <span class="built_in">vector</span>&lt;Business*&gt; businessList;</span><br><span class="line">   Business* businessPtr;</span><br><span class="line">   Restaurant* restaurantPtr;</span><br><span class="line">   ...</span><br><span class="line">   businessList.push_back(businessPtr);</span><br><span class="line">   businessList.push_back(restaurantPtr);</span><br><span class="line"></span><br><span class="line">   index = rand() % businessList.<span class="built_in">size</span>();</span><br><span class="line">   DriveTo(businessList.at(index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>derived/base class pointer conversion :<br>a pointer to a derived class is converted to a pointer to the base class without explicit casting</strong></p><p>The above statement businessList.push_back(restaurantPtr); uses derived/base class pointer conversion to convert the Restaurant pointer to a Business pointer (businessList is a vector of Business pointers).</p><p>When derived/base class pointer conversion takes place, the compiler is unable to use compile-time polymorphism. </p><h3 id="Virtual-functions"><a href="#Virtual-functions" class="headerlink" title="Virtual functions"></a>Virtual functions</h3><p>A virtual function is a member function that may be overridden in a derived class and is used for runtime polymorphism.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Business</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="built_in">string</span> <span class="title">GetDescription</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> name + <span class="string">" -- "</span> + address;</span><br><span class="line">   &#125;</span><br><span class="line">   ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Restaurant</span> :</span> <span class="keyword">public</span> Business &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="built_in">string</span> <span class="title">GetDescription</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> name + <span class="string">" -- "</span> + address +</span><br><span class="line">         <span class="string">"\n  Rating: "</span> + to_string(rating);</span><br><span class="line">   &#125;</span><br><span class="line">   ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   Business* businessPtr;</span><br><span class="line">   Restaurant favoriteCafe;</span><br><span class="line">   favoriteCafe.SetName(<span class="string">"Friends Cafe"</span>);</span><br><span class="line">   favoriteCafe.SetAddress(<span class="string">"500 2nd Ave"</span>);</span><br><span class="line">   favoriteCafe.SetRating(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Point to favoriteCafe</span></span><br><span class="line">   businessPtr = &amp;favoriteCafe;</span><br><span class="line"></span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; businessPtr-&gt;GetDescription();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>businessPtr points to favoriteCafe. businessPtr-&gt;GetDesciption() calls Business GetDescription()<br>instead of Restaurant GetDescription() because runtime polymorphism does not work without virtual functions.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Business</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="keyword">virtual</span> <span class="built_in">string</span> <span class="title">GetDescription</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> name + <span class="string">" -- "</span> + address;</span><br><span class="line">   &#125;</span><br><span class="line">   ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Restaurant</span> :</span> <span class="keyword">public</span> Business &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="built_in">string</span> <span class="title">GetDescription</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> name + <span class="string">" -- "</span> + address +</span><br><span class="line">         <span class="string">"\n  Rating: "</span> + to_string(rating);</span><br><span class="line">   &#125;</span><br><span class="line">   ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="built_in">vector</span>&lt;Business*&gt; businessList;</span><br><span class="line">    Business* businessPtr;</span><br><span class="line">    Restaurant* restaurantPtr;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The “virtual” keyword makes GetDescription() a virtual function. The “override” keyword indicates that Restaurant GetDescription() overrides the base class GetDescription().</p><p>Running the program with an overridden virtual function causes runtime polymorphism to call Restaurant GetDescription().</p><p>Another way  :</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintDescription</span><span class="params">(Business&amp; business)</span> </span>&#123;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; business.GetDescription() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Runtime polymorphism only works with pointers to derived classes.</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Restaurant favoritePlace;</span><br><span class="line">favoritePlace.SetName(<span class="string">"Friends Cafe"</span>);</span><br><span class="line">favoritePlace.SetAddress(<span class="string">"500 2nd Ave"</span>);</span><br><span class="line">favoritePlace.SetRating(<span class="number">5</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; favoritePlace.GetDescription();</span><br></pre></td></tr></table></figure><p>The compiler can tell from the code that a Restaurant object is calling GetDescription(), so the overridden GetDescription() is called.</p><h3 id="Pure-virtual-functions"><a href="#Pure-virtual-functions" class="headerlink" title="Pure virtual functions"></a>Pure virtual functions</h3><p>A pure virtual function is a virtual function that provides no definition in the base class, and all derived classes must override the function</p><p>A class that has at least one pure virtual function is known as an abstract base class. </p><p>An abstract base class object cannot be declared. Ex: The variable declaration Business someBusiness; generates a syntax error if Business is an abstract base class.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Business</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">SetName</span><span class="params">(<span class="built_in">string</span> busName)</span> </span>&#123;</span><br><span class="line">      name = busName;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">SetAddress</span><span class="params">(<span class="built_in">string</span> busAddress)</span> </span>&#123;</span><br><span class="line">      address = busAddress;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">virtual</span> <span class="built_in">string</span> <span class="title">GetDescription</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> name + <span class="string">" -- "</span> + address;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">virtual</span> <span class="built_in">string</span> <span class="title">GetHours</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;     <span class="comment">// pure virtual function</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">   <span class="built_in">string</span> name;</span><br><span class="line">   <span class="built_in">string</span> address;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Overriding-member-functions&quot;&gt;&lt;a href=&quot;#Overriding-member-functions&quot; class=&quot;headerlink&quot; title=&quot;Overriding member functions&quot;&gt;&lt;/a&gt;Overr
      
    
    </summary>
    
    
      <category term="Program Language" scheme="http://yoursite.com/categories/Program-Language/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Uniformed Search</title>
    <link href="http://yoursite.com/2020/02/06/Search/"/>
    <id>http://yoursite.com/2020/02/06/Search/</id>
    <published>2020-02-07T01:55:00.000Z</published>
    <updated>2020-02-14T04:16:45.693Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Uniformed-Search"><a href="#Uniformed-Search" class="headerlink" title="Uniformed Search"></a>Uniformed Search</h2><pre><code>a. In deterministic environments the search solution is a single sequence (list of actions)b. Stochastic environments need multiple sequences to account for all possible outcomes of actionsc. There are 5 parts to search:    1. Initial state    2. Actions possible at each state    3. Transition model (result of each action)    4. Goal test (are we there yet?)   5. Path costs/weights (not stored in states) (related to performance measure)</code></pre><p>   <img src="/images/pasted-0.png" alt="upload successful"></p><h2 id="Search-algorithm"><a href="#Search-algorithm" class="headerlink" title="Search algorithm"></a>Search algorithm</h2><pre><code>   BFS: FIFOThe search algorithms metrics/criteria: 1. Completeness (does it terminate with a valid solution) 2. Optimality (is the answer the best solution) 3. Time (in big-O notation) 4. Space (big-O) b = maximum branching factor d = minimum depth of a goal m = maximum length of any path    a. Uniform-cost searchThe only modification is when exploring a node we cannot disregard it if it has already been explored by another node We might have found a shorter path and thus need to update the cost on that node We also do not terminate when we find a goal, but instead when the goal has the lowest cost in the queue.UCS is.. 1. Complete (if costs strictly greater than 0) 2. Optimal However.... 3&amp;4. Time complexity = space complexity = O(b1+C*/min(path cost)), where C* cost of optimal solution (much worse than BFS)    b. Bidirectional search It starts from both the goal and start (using BFS) until the trees meet This is better as 2*(bd/2) &lt; bd (the space is much worse than IDS, so only applicable to small problems)</code></pre><p>![upload successful](/images/pasted-7.png =100x)</p><p>DFS: FILO<br>Metrics:<br>    1. Might not terminate (not correct) (e.g. in vacuum world, if first expand is action L)<br>    2. Non-optimal (just… no)<br>    3. Time complexity = O(bd )<br>    4. Space complexity = O(b*d) Only way this is better than BFS is the space complexity… DFS by itself is not great, but it has two (very) useful modifications</p><pre><code>a. Depth limited search </code></pre><p>It runs normal DFS, but if it is at a specified depth limit, you cannot have children (i.e. take another action) However, if you pick the depth limit before d, you will not find a solution (not correct, but will terminate)</p><p><img src="/images/pasted-10.png" alt="upload successful"></p><pre><code>b. iterative deepening DFS</code></pre><p>This search performs depth limited search with maximum depth 1, then maximum depth 2, then 3… until it finds a solution</p><p><img src="/images/pasted-13.png" alt="upload successful"></p><p>The first few states do get re-checked multiple times in IDS, however it is not too many When you find the solution at depth d, depth 1 is expanded d times (at most b of them) The second depth are expanded d-1 times (at most b2 of them) Thus</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-15.png" alt="upload successful" title="">                </div>                <div class="image-caption">upload successful</div>            </figure><p>Metrics:<br>    1. Complete 2. Non-optimal (unless uniform cost) 3. O(bd ) 4. O(b*d) Thus IDS is better in every way than BFS (asymptotically) Best uninformed we will talk about</p><p><img src="/images/pasted-17.png" alt="upload successful"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Uniformed-Search&quot;&gt;&lt;a href=&quot;#Uniformed-Search&quot; class=&quot;headerlink&quot; title=&quot;Uniformed Search&quot;&gt;&lt;/a&gt;Uniformed Search&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;a. In 
      
    
    </summary>
    
    
      <category term="AI" scheme="http://yoursite.com/categories/AI/"/>
    
    
      <category term="Search" scheme="http://yoursite.com/tags/Search/"/>
    
  </entry>
  
  <entry>
    <title>Greedy Algorithm (1)</title>
    <link href="http://yoursite.com/2020/02/05/greedy%20algorithm%20(1)/"/>
    <id>http://yoursite.com/2020/02/05/greedy%20algorithm%20(1)/</id>
    <published>2020-02-06T01:55:00.000Z</published>
    <updated>2020-02-14T04:16:06.928Z</updated>
    
    <content type="html"><![CDATA[<h2 id="860-Lemonade-Change"><a href="#860-Lemonade-Change" class="headerlink" title="860. Lemonade Change"></a><a href="https://leetcode.com/problems/lemonade-change/" target="_blank" rel="noopener">860. Lemonade Change</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: [5,5,5,10,20]</span><br><span class="line">Output: true</span><br><span class="line">Explanation: </span><br><span class="line">From the first 3 customers, we collect three $5 bills in order.</span><br><span class="line">From the fourth customer, we collect a $10 bill and give back a $5.</span><br><span class="line">From the fifth customer, we give a $10 bill and a $5 bill.</span><br><span class="line">Since all customers got correct change, we output true.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. Every time we choose the largest one to exchange, like 20 -&gt; 10 + 5</span><br><span class="line">2. if use 10 to exchange 5 we will have 10, so ten +&#x3D; 1</span><br><span class="line">3. for 20 case, we cannot just return false if there is not 10, </span><br><span class="line">since we can use 5+5+5 to exchange</span><br><span class="line">4. make sure temp &#x3D;&#x3D; 0t to quit, otherwise we will have negative temp</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lemonadeChange</span><span class="params">(self, bills: List[int])</span> -&gt; bool:</span></span><br><span class="line">        five, ten = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> cur <span class="keyword">in</span> bills :</span><br><span class="line">            <span class="keyword">if</span> cur == <span class="number">5</span> :</span><br><span class="line">                five += <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> cur == <span class="number">10</span> :</span><br><span class="line">                <span class="comment">#need 5</span></span><br><span class="line">                <span class="keyword">if</span> five :</span><br><span class="line">                    five -= <span class="number">1</span></span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">#exchange to ten, so ten +1</span></span><br><span class="line">                    ten += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span> :</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                </span><br><span class="line">            <span class="keyword">if</span> cur == <span class="number">20</span> :</span><br><span class="line">                <span class="comment">#need 15</span></span><br><span class="line">                </span><br><span class="line">                temp = <span class="number">15</span></span><br><span class="line">                <span class="keyword">if</span> ten :</span><br><span class="line">                    ten -= <span class="number">1</span></span><br><span class="line">                    temp -= <span class="number">10</span></span><br><span class="line">                <span class="comment">#cannot return false, bc we can return 5+5+5</span></span><br><span class="line">                <span class="keyword">while</span> five <span class="keyword">and</span> temp: </span><br><span class="line">                <span class="comment">#make sure when temp = 0 quit, or it will loop to negative</span></span><br><span class="line">                    five -= <span class="number">1</span></span><br><span class="line">                    temp -= <span class="number">5</span></span><br><span class="line">                <span class="keyword">if</span> temp :</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="392-Is-Subsequence"><a href="#392-Is-Subsequence" class="headerlink" title="392. Is Subsequence"></a><a href="https://leetcode.com/problems/is-subsequence/" target="_blank" rel="noopener">392. Is Subsequence</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Example 1:</span><br><span class="line">s &#x3D; &quot;abc&quot;, t &#x3D; &quot;ahbgdc&quot;</span><br><span class="line"></span><br><span class="line">Return true.</span><br><span class="line"></span><br><span class="line">Example 2:</span><br><span class="line">s &#x3D; &quot;axc&quot;, t &#x3D; &quot;ahbgdc&quot;</span><br><span class="line"></span><br><span class="line">Return false.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. Two pointers, make suer k lease than len(s)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isSubsequence</span><span class="params">(self, s: str, t: str)</span> -&gt; bool:</span></span><br><span class="line">        i, k = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> i &lt; len(t) <span class="keyword">and</span> k &lt; len(s) :</span><br><span class="line">            <span class="keyword">if</span> s[k] == t[i] :</span><br><span class="line">                k += <span class="number">1</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> k == len(s)</span><br></pre></td></tr></table></figure><h2 id="455-Assign-Cookies"><a href="#455-Assign-Cookies" class="headerlink" title="455. Assign Cookies"></a><a href="https://leetcode.com/problems/assign-cookies/" target="_blank" rel="noopener">455. Assign Cookies</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,2,3], [1,1]</span><br><span class="line"></span><br><span class="line">Output: 1</span><br><span class="line"></span><br><span class="line">Explanation: You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. </span><br><span class="line">And even though you have 2 cookies, since their size is both 1, </span><br><span class="line">you could only make the child whose greed factor is 1 content.</span><br><span class="line">You need to output 1.</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findContentChildren</span><span class="params">(self, g: List[int], s: List[int])</span> -&gt; int:</span></span><br><span class="line">        <span class="comment">#who come first, give the cookies to him</span></span><br><span class="line">        </span><br><span class="line">        g = sorted(g)</span><br><span class="line">        s = sorted(s)</span><br><span class="line">        </span><br><span class="line">        res, j = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range (len(g)) :</span><br><span class="line">            <span class="comment">#not satisified</span></span><br><span class="line">            <span class="keyword">while</span> j &lt; len(s) <span class="keyword">and</span> s[j] &lt; g[i] :</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">#satisified</span></span><br><span class="line">            <span class="keyword">if</span> j &lt; len(s) :</span><br><span class="line">                res += <span class="number">1</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment">#make sure j += 1, bc have used</span></span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="55-Jump-Game"><a href="#55-Jump-Game" class="headerlink" title="55. Jump Game"></a><a href="https://leetcode.com/problems/jump-game/" target="_blank" rel="noopener">55. Jump Game</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: [3,2,1,0,4]</span><br><span class="line">Output: false</span><br><span class="line">Explanation: You will always arrive at index 3 no matter what. Its maximum</span><br><span class="line">             jump length is 0, which makes it impossible to reach the last index.</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canJump</span><span class="params">(self, nums: List[int])</span> -&gt; bool:</span></span><br><span class="line">        n = len(nums)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">0</span> :</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        i, maxDist = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">#maxDist : the maximum position you can arrive so far</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> i &lt; n <span class="keyword">and</span> i &lt;= maxDist : <span class="comment"># if i &gt; maxDist, we cannnot get i position</span></span><br><span class="line">            maxDist = max(i + nums[i], maxDist)</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            <span class="comment"># [3, 1, 2, 0] -&gt; i = 0, maxDist = 3, we can arrive i = 3 maximum; </span></span><br><span class="line">            <span class="comment"># i = 2, maxDist = 2 + 2 = 4, arrive i = 4 maximum</span></span><br><span class="line">        <span class="keyword">return</span> maxDist &gt;= n<span class="number">-1</span> <span class="comment">#not maxDist &gt;= i, bc after loop i+= 1 &gt; n-1</span></span><br></pre></td></tr></table></figure><h2 id="45-Jump-Game-II"><a href="#45-Jump-Game-II" class="headerlink" title="45. Jump Game II"></a><a href="https://leetcode.com/problems/jump-game-ii/" target="_blank" rel="noopener">45. Jump Game II</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: [2,3,1,1,4]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: The minimum number of jumps to reach the last index is 2.</span><br><span class="line">    Jump 1 step from index 0 to 1, then 3 steps to the last index.</span><br></pre></td></tr></table></figure><p>At i = 0, if choose jump 2 -&gt; i = 2, we can only jump 1 -&gt; i = 3<br>we can only jump 1 -&gt; i = 4<br>so total is 3</p><p>At i = 0, if choose jump 1 -&gt; i = 1, we can jump 3 -&gt; i = 4<br>so total is 4</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Proof : f[i]  &gt; f[i+1] is wrong</span><br><span class="line">f[i] : the minimum steps to arrive i</span><br><span class="line">f[i+1] : the minimum steps to arrive i+1</span><br><span class="line">we prove f[i] &lt;&#x3D; f[i+1] is correct</span><br><span class="line">Assume at j, we need to arrive at i+1. </span><br><span class="line"></span><br><span class="line">j+nums[j] &gt;&#x3D; i+1</span><br><span class="line">[2, 3, 1, 1, 4]</span><br><span class="line">j &#x3D; 0, i+1 &#x3D; 1</span><br><span class="line">j+nums[j]  &#x3D; 0+2, we can arrive position at 2 maximum</span><br><span class="line"></span><br><span class="line">Assume we at j, and want to arrive at i+1, we need to jump plus 1</span><br><span class="line">f[i+1] &#x3D; f[j] + 1</span><br><span class="line">we can also arrive at i by f[j] + 1 steps at least</span><br><span class="line">so f[i] &#x3D; f[j] + 1</span><br><span class="line">Hence, f[i] &lt;&#x3D; f[i+1]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">jump</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        </span><br><span class="line">        n = len(nums)</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">0</span> <span class="keyword">or</span> n == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        l, r, step = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> l &lt;= r :</span><br><span class="line">            <span class="comment"># we check at each postion we can jump how far  </span></span><br><span class="line">            maxDist = <span class="number">0</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(l, r+<span class="number">1</span>) : <span class="comment"># want to check l == r, l &lt;= r so r+1</span></span><br><span class="line">                 <span class="comment"># maxDist : at i position, how far we can jump</span></span><br><span class="line">                maxDist = max(i+nums[i], maxDist)</span><br><span class="line">                </span><br><span class="line">            l = r+<span class="number">1</span> <span class="comment"># can arrive at r at least</span></span><br><span class="line">            r = maxDist</span><br><span class="line">            step += <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> r &gt;= n<span class="number">-1</span> :</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> step</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;860-Lemonade-Change&quot;&gt;&lt;a href=&quot;#860-Lemonade-Change&quot; class=&quot;headerlink&quot; title=&quot;860. Lemonade Change&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.co
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="greedy algorithm" scheme="http://yoursite.com/tags/greedy-algorithm/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Inheritance and Polymorphism in C++ (1)</title>
    <link href="http://yoursite.com/2020/02/05/Inheritance%20and%20Polymorphism%20in%20C++%20(1)/"/>
    <id>http://yoursite.com/2020/02/05/Inheritance%20and%20Polymorphism%20in%20C++%20(1)/</id>
    <published>2020-02-05T22:56:00.000Z</published>
    <updated>2020-02-14T04:16:27.498Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Access-by-members-of-derived-classes"><a href="#Access-by-members-of-derived-classes" class="headerlink" title="Access by members of derived classes"></a>Access by members of derived classes</h2><p>The members of a derived class have access to the public members of the base class, but not to the private members of the base class.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Business</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">       ...</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">      <span class="built_in">string</span> name;</span><br><span class="line">      <span class="built_in">string</span> address;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Restaurant</span> :</span> <span class="keyword">public</span> Business &#123;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    </span><br><span class="line">       ...</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">void</span> <span class="title">DisplayRestaurant</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="built_in">cout</span> &lt;&lt; name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">         <span class="built_in">cout</span> &lt;&lt; address &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">         <span class="built_in">cout</span> &lt;&lt; <span class="string">" Rating: "</span> &lt;&lt; rating &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">      <span class="keyword">int</span> rating;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Solution :<br>A third access specifier is protected, which provides access to derived classes but not by anyone else. </p><p>But! Careful here : A third access specifier is protected, which provides access to derived classes but not by anyone else.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Business</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:    <span class="comment">// Members accessible by anyone</span></span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">PrintMembers</span><span class="params">()</span></span>;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">protected</span>: <span class="comment">// Members accessible by self and derived classes</span></span><br><span class="line">      <span class="built_in">string</span> name;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span>:   <span class="comment">// Members accessible only by self</span></span><br><span class="line">      <span class="built_in">string</span> address;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Restaurant</span> :</span> <span class="keyword">public</span> Business &#123;</span><br><span class="line">   ...</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// Attempted accesses</span></span><br><span class="line">   PrintMembers();             <span class="comment">// OK</span></span><br><span class="line">   name = <span class="string">"Gyro Hero"</span>;         <span class="comment">// OK    ("protected" above made this possible)</span></span><br><span class="line">   address = <span class="string">"5 Fifth St"</span>;     <span class="comment">// ERROR</span></span><br><span class="line">   </span><br><span class="line">   ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   ...</span><br><span class="line">   </span><br><span class="line">   Business business;</span><br><span class="line">   Restaurant restaurant;</span><br><span class="line">   </span><br><span class="line">   ...</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// Attempted accesses</span></span><br><span class="line">   business.PrintMembers();          <span class="comment">// OK</span></span><br><span class="line">   business.name  = <span class="string">"Gyro Hero"</span>;     <span class="comment">// ERROR (protected only applies to derived classes)</span></span><br><span class="line">   business.address = <span class="string">"5 Fifth St"</span>;  <span class="comment">// ERROR</span></span><br><span class="line">   </span><br><span class="line">   restaurant.PrintMembers();         <span class="comment">// OK</span></span><br><span class="line">   restaurant.name  = <span class="string">"Gyro Hero"</span>;    <span class="comment">// ERROR</span></span><br><span class="line">   restaurant.rating = <span class="number">5</span>;  <span class="comment">// ERROR</span></span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Access-by-members-of-derived-classes&quot;&gt;&lt;a href=&quot;#Access-by-members-of-derived-classes&quot; class=&quot;headerlink&quot; title=&quot;Access by members of
      
    
    </summary>
    
    
      <category term="Program Language" scheme="http://yoursite.com/categories/Program-Language/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Build your own blog</title>
    <link href="http://yoursite.com/2020/02/01/hello-world/"/>
    <id>http://yoursite.com/2020/02/01/hello-world/</id>
    <published>2020-02-01T15:22:00.000Z</published>
    <updated>2020-02-10T01:53:43.591Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><h3 id="Change-Theme"><a href="#Change-Theme" class="headerlink" title="Change Theme"></a>Change Theme</h3><p>The theme I used in this blog is cited from <a href="https://github.com/yscoder/hexo-theme-indigo/wiki" target="_blank" rel="noopener">yscoder</a></p><p>1.<br>git clone -&gt; after all install -&gt; move theme to your hexo theme and</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>Careful here, if in the _config.yml you set it as</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>The hexo d will delete your custom domin name!<br><a href="https://stackoverflow.com/a/46431728/10854896" target="_blank" rel="noopener">What should do is here</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Informed search</title>
    <link href="http://yoursite.com/2020/01/17/Informed-search/"/>
    <id>http://yoursite.com/2020/01/17/Informed-search/</id>
    <published>2020-01-17T22:18:00.000Z</published>
    <updated>2020-02-14T04:16:18.442Z</updated>
    
    <content type="html"><![CDATA[<p>In uninformed search, we only had the node<br>information (parent, children, cost of actions)</p><p>Now we will assume there is some additional<br>information, we will call a heuristic that<br>estimates the distance to the goal</p><p>Previously, we had no idea how close we were<br>to goal, simply how far we had gone already</p><pre><code>1. Greedy best-first search</code></pre><p>This search will simply repeatedly select the<br>child with the lowest heuristic(cost to goal est.)</p><p>In fact, it is not guaranteed to converge (if a<br>path reaches a dead-end, it will loop infinitely)</p><pre><code>2. A* (a star)</code></pre><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-19.png" alt="upload successful" title="">                </div>                <div class="image-caption">upload successful</div>            </figure><p>Priority queues can be used to efficiently store<br>and insert states and their f-values into the fringe</p><p>Good heuristics can remove “bad” sections of the search space that will not be on any optimal solution (called pruning)</p><p>A* is optimal and in fact, no optimal algorithm could expand less nodes (optimally efficient) However, the time and memory cost is still exponential (memory tighter constraint)</p><pre><code>2.1 Iterative deepening A*</code></pre><ol><li>Run DFS in IDS, but instead of using depth<br>as cutoff, use f-cost</li><li>If search fails to find goal, increase f-cost<br>to next smallest seen value (above old cost)</li></ol><p>Pros: Efficient on memory</p><p>Cons: Large (LARGE) amount of re-searching</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In uninformed search, we only had the node&lt;br&gt;information (parent, children, cost of actions)&lt;/p&gt;
&lt;p&gt;Now we will assume there is some add
      
    
    </summary>
    
    
      <category term="AI" scheme="http://yoursite.com/categories/AI/"/>
    
    
  </entry>
  
  <entry>
    <title>Comparison of Greedy Search Algorithms</title>
    <link href="http://yoursite.com/2020/01/10/Comparison%20of%20Greedy%20Search%20Algo/"/>
    <id>http://yoursite.com/2020/01/10/Comparison%20of%20Greedy%20Search%20Algo/</id>
    <published>2020-01-10T22:18:00.000Z</published>
    <updated>2020-02-14T04:15:52.496Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>best-first searches: </p><ol><li>weighted A*, </li><li>greedy search, </li><li>A∗ǫ , </li><li>window A*</li><li>multi-state commitment k-weighted A*.</li></ol></li><li><p>hill climbing algorithms :</p><ol><li>hill climb- ing</li><li>LSS-LRTA*</li></ol></li><li><p>beam searches :</p><ol><li>BULB</li><li>beam-stack search</li></ol></li><li><p>pathfinding in grids (Thayer, Ruml, and Bitton 2008), </p></li><li><p>the traveling salesman problem (Pearl and Kim 1982), </p></li><li><p>dynamic robot pathfinding (Likhachev, Gordon, and Thrun 2003), </p></li><li><p>the sliding tile puzzle (Korf 1985), </p></li><li><p>the pancake puzzle (Holte, Grajkowskic, and Tanner 2005), </p></li><li><p>and a vacuum-robot domain (Russell and Norvig 2010).</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;best-first searches: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;weighted A*, &lt;/li&gt;
&lt;li&gt;greedy search, &lt;/li&gt;
&lt;li&gt;A∗ǫ , &lt;/li&gt;
&lt;li&gt;window A*&lt;/li&gt;
&lt;li&gt;multi-stat
      
    
    </summary>
    
    
      <category term="AI" scheme="http://yoursite.com/categories/AI/"/>
    
    
  </entry>
  
  <entry>
    <title>Some thoughts on AI</title>
    <link href="http://yoursite.com/2020/01/05/Some-thoughts-about-AI/"/>
    <id>http://yoursite.com/2020/01/05/Some-thoughts-about-AI/</id>
    <published>2020-01-06T03:45:00.000Z</published>
    <updated>2020-02-14T04:15:26.160Z</updated>
    
    <content type="html"><![CDATA[<p>Recently, there has been a lot of concerns about AI(artificial intelligence), like AI will make people lose jobs and the tech oligarch will make wealth inequality; in brief, AI will raise abundant social issues over than its advantage to society. On the contrary, some people argues that AI will bring abundant jobs instead. Like in the past, some people concerned that industrial revolution will take away people’s jobs but we know this revolution promote society development and then bring many opening jobs. However, I still believe there are many reasons to be concerned about advances of AI.</p><p>As the automation is developing, we can see in the near future; millions of people will be replaced by the machines. The reasons I concerned are that there are many advantages in automation over than humans. First, machines will never feel tired. Mentioned in this article, I believe ”the self-driving trucks promised by Tesla’s Elon Musk become widely available in the next decade.” (Bossmann, 2016). Human drivers need to take a break after long driving, but self-driving trucks not. Self-driving car can keep long driving during the midnight to avoid rush hours in the daytime, and self-driving car has a lower risk of accidents than humans after long driving. Absolutely, transportation company will hire robots to drive rather than humans in obvious these advances. Hence, we can see in the near future; AI will take away many people’s jobs, and the unemployment rate will be increasing rapidly.</p><p>What if AI turn to hurt humans? Hollywood movies have presented many AI disasters for us. And in this article, the author mentioned a vivid example: in order to kill the cancer, the machine kills everyone on the planet instead, which is more efficient. (Bossmann, 2016). As we know, the real world is really complicated. It is hard to just use some if-else statements to cover all the cases, like we are hard to predicate the future. So, in more specific, how can we ensure that the robot will not hurt human in a complicate case like rescue hostages? How can we ensure human will still dominate the world if one day we totally lose the ingenuity and intelligence than AI? As one day AI can evolve them very efficiently by iteration? How can we protect ourselves if robots start to attack people? How can we ensure we can still dominate the world, not AI dominate us? Or AI can just create a pandemic breaks out the world, which is the most efficient way to kill all the organism on this planet. Or like the movie, The Matrix, people are imprisoned in a container as a energy source?</p><p>Obviously, there are still many issues that AI will bring to us. So I believe govern- ments, industries, and academics should take some steps to address these issues. First, since the automation take place of many people’s job, the unemployment rate will be in- creasing. Government should make some effectual policy to against unemployment. For example, Andrew Yang proposes government to pay one thousand dollars each month to every American over the age of 18. This money is from company’s VAT(A Value-Added Tax), and then people use the money to consumer company’s product. (Yang, 2020). This is a double win. No need to say, there are still a lot of issues that AI will bring to us in the future, but government should take its strong right to control these issues.</p><p>Second, industries and academics should make some principles or agreement during the AI development. Like The Institute for Ethical ML, this academic institute make 8 principles when designing and developing AI and ML.(for Ethical AI ML, 2020). In that 8 principles, the developer commit to assess and handle the impact of incorrect result. So I believe the developers can take a great effort to avoid accident due to AI, and even when the accident happens, they can reduce losses.</p><p>In brief, We have reasons to be concerned about advances of AI.And there are still many steps to address these issues, but the only principle we need to make sure is, artificial intelligence is conducive to improving the efficiency of social work and promoting social development.</p><hr><p>References</p><p>J. Bossmann. Top 9 ethical issues in artificial intelligence. 2016. URL <a href="https://www.weforum.org/agenda/2016/10/top-10-ethical-issues" target="_blank" rel="noopener">https://www.weforum.org/agenda/2016/10/top-10-ethical-issues</a> -in-artificial-intelligence.<br>I. for Ethical AI ML. The 7 Most Pressing Ethical Issues in Artificial Intelligence. 2020. URL <a href="https://ethical.institute/principles.html" target="_blank" rel="noopener">https://ethical.institute/principles.html</a>.<br>A. Yang. VALUE-ADDED TAX. 2020. URL <a href="https://www.yang2020.com/policies/value-added-tax/" target="_blank" rel="noopener">https://www.yang2020.com/policies/value-added-tax/</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Recently, there has been a lot of concerns about AI(artificial intelligence), like AI will make people lose jobs and the tech oligarch wi
      
    
    </summary>
    
    
      <category term="AI" scheme="http://yoursite.com/categories/AI/"/>
    
    
  </entry>
  
</feed>
